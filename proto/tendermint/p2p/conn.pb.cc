// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/p2p/conn.proto

#include "tendermint/p2p/conn.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tendermint {
namespace p2p {
constexpr PacketPing::PacketPing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PacketPingDefaultTypeInternal {
  constexpr PacketPingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PacketPingDefaultTypeInternal() {}
  union {
    PacketPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PacketPingDefaultTypeInternal _PacketPing_default_instance_;
constexpr PacketPong::PacketPong(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PacketPongDefaultTypeInternal {
  constexpr PacketPongDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PacketPongDefaultTypeInternal() {}
  union {
    PacketPong _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PacketPongDefaultTypeInternal _PacketPong_default_instance_;
constexpr PacketMsg::PacketMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_id_(0)
  , eof_(false){}
struct PacketMsgDefaultTypeInternal {
  constexpr PacketMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PacketMsgDefaultTypeInternal() {}
  union {
    PacketMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PacketMsgDefaultTypeInternal _PacketMsg_default_instance_;
constexpr Packet::Packet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct PacketDefaultTypeInternal {
  constexpr PacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PacketDefaultTypeInternal() {}
  union {
    Packet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PacketDefaultTypeInternal _Packet_default_instance_;
constexpr AuthSigMessage::AuthSigMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sig_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pub_key_(nullptr){}
struct AuthSigMessageDefaultTypeInternal {
  constexpr AuthSigMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthSigMessageDefaultTypeInternal() {}
  union {
    AuthSigMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthSigMessageDefaultTypeInternal _AuthSigMessage_default_instance_;
}  // namespace p2p
}  // namespace tendermint
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tendermint_2fp2p_2fconn_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tendermint_2fp2p_2fconn_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tendermint_2fp2p_2fconn_2eproto = nullptr;

const uint32_t TableStruct_tendermint_2fp2p_2fconn_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::PacketPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::PacketPong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::PacketMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::PacketMsg, channel_id_),
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::PacketMsg, eof_),
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::PacketMsg, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::Packet, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::Packet, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::Packet, sum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::AuthSigMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::AuthSigMessage, pub_key_),
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::AuthSigMessage, sig_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tendermint::p2p::PacketPing)},
  { 6, -1, -1, sizeof(::tendermint::p2p::PacketPong)},
  { 12, -1, -1, sizeof(::tendermint::p2p::PacketMsg)},
  { 21, -1, -1, sizeof(::tendermint::p2p::Packet)},
  { 31, -1, -1, sizeof(::tendermint::p2p::AuthSigMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::p2p::_PacketPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::p2p::_PacketPong_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::p2p::_PacketMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::p2p::_Packet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::p2p::_AuthSigMessage_default_instance_),
};

const char descriptor_table_protodef_tendermint_2fp2p_2fconn_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031tendermint/p2p/conn.proto\022\016tendermint."
  "p2p\032\024gogoproto/gogo.proto\032\034tendermint/cr"
  "ypto/keys.proto\"\014\n\nPacketPing\"\014\n\nPacketP"
  "ong\"R\n\tPacketMsg\022!\n\nchannel_id\030\001 \001(\005B\r\342\336"
  "\037\tChannelID\022\024\n\003eof\030\002 \001(\010B\007\342\336\037\003EOF\022\014\n\004dat"
  "a\030\003 \001(\014\"\246\001\n\006Packet\0221\n\013packet_ping\030\001 \001(\0132"
  "\032.tendermint.p2p.PacketPingH\000\0221\n\013packet_"
  "pong\030\002 \001(\0132\032.tendermint.p2p.PacketPongH\000"
  "\022/\n\npacket_msg\030\003 \001(\0132\031.tendermint.p2p.Pa"
  "cketMsgH\000B\005\n\003sum\"R\n\016AuthSigMessage\0223\n\007pu"
  "b_key\030\001 \001(\0132\034.tendermint.crypto.PublicKe"
  "yB\004\310\336\037\000\022\013\n\003sig\030\002 \001(\014B7Z5github.com/tende"
  "rmint/tendermint/proto/tendermint/p2pb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tendermint_2fp2p_2fconn_2eproto_deps[2] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_tendermint_2fcrypto_2fkeys_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tendermint_2fp2p_2fconn_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2fp2p_2fconn_2eproto = {
  false, false, 525, descriptor_table_protodef_tendermint_2fp2p_2fconn_2eproto, "tendermint/p2p/conn.proto", 
  &descriptor_table_tendermint_2fp2p_2fconn_2eproto_once, descriptor_table_tendermint_2fp2p_2fconn_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_tendermint_2fp2p_2fconn_2eproto::offsets,
  file_level_metadata_tendermint_2fp2p_2fconn_2eproto, file_level_enum_descriptors_tendermint_2fp2p_2fconn_2eproto, file_level_service_descriptors_tendermint_2fp2p_2fconn_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tendermint_2fp2p_2fconn_2eproto_getter() {
  return &descriptor_table_tendermint_2fp2p_2fconn_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tendermint_2fp2p_2fconn_2eproto(&descriptor_table_tendermint_2fp2p_2fconn_2eproto);
namespace tendermint {
namespace p2p {

// ===================================================================

class PacketPing::_Internal {
 public:
};

PacketPing::PacketPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.PacketPing)
}
PacketPing::PacketPing(const PacketPing& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.p2p.PacketPing)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketPing::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PacketPing::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fp2p_2fconn_2eproto_getter, &descriptor_table_tendermint_2fp2p_2fconn_2eproto_once,
      file_level_metadata_tendermint_2fp2p_2fconn_2eproto[0]);
}

// ===================================================================

class PacketPong::_Internal {
 public:
};

PacketPong::PacketPong(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.PacketPong)
}
PacketPong::PacketPong(const PacketPong& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.p2p.PacketPong)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketPong::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketPong::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PacketPong::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fp2p_2fconn_2eproto_getter, &descriptor_table_tendermint_2fp2p_2fconn_2eproto_once,
      file_level_metadata_tendermint_2fp2p_2fconn_2eproto[1]);
}

// ===================================================================

class PacketMsg::_Internal {
 public:
};

PacketMsg::PacketMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.PacketMsg)
}
PacketMsg::PacketMsg(const PacketMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eof_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(eof_));
  // @@protoc_insertion_point(copy_constructor:tendermint.p2p.PacketMsg)
}

inline void PacketMsg::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&eof_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(eof_));
}

PacketMsg::~PacketMsg() {
  // @@protoc_insertion_point(destructor:tendermint.p2p.PacketMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PacketMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PacketMsg::ArenaDtor(void* object) {
  PacketMsg* _this = reinterpret_cast< PacketMsg* >(object);
  (void)_this;
}
void PacketMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PacketMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PacketMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.p2p.PacketMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eof_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(eof_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 channel_id = 1 [(.gogoproto.customname) = "ChannelID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool eof = 2 [(.gogoproto.customname) = "EOF"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          eof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PacketMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.p2p.PacketMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel_id = 1 [(.gogoproto.customname) = "ChannelID"];
  if (this->_internal_channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel_id(), target);
  }

  // bool eof = 2 [(.gogoproto.customname) = "EOF"];
  if (this->_internal_eof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_eof(), target);
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.p2p.PacketMsg)
  return target;
}

size_t PacketMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.p2p.PacketMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 channel_id = 1 [(.gogoproto.customname) = "ChannelID"];
  if (this->_internal_channel_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_channel_id());
  }

  // bool eof = 2 [(.gogoproto.customname) = "EOF"];
  if (this->_internal_eof() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PacketMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketMsg::GetClassData() const { return &_class_data_; }

void PacketMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PacketMsg *>(to)->MergeFrom(
      static_cast<const PacketMsg &>(from));
}


void PacketMsg::MergeFrom(const PacketMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.p2p.PacketMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from._internal_eof() != 0) {
    _internal_set_eof(from._internal_eof());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketMsg::CopyFrom(const PacketMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.p2p.PacketMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketMsg::IsInitialized() const {
  return true;
}

void PacketMsg::InternalSwap(PacketMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PacketMsg, eof_)
      + sizeof(PacketMsg::eof_)
      - PROTOBUF_FIELD_OFFSET(PacketMsg, channel_id_)>(
          reinterpret_cast<char*>(&channel_id_),
          reinterpret_cast<char*>(&other->channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fp2p_2fconn_2eproto_getter, &descriptor_table_tendermint_2fp2p_2fconn_2eproto_once,
      file_level_metadata_tendermint_2fp2p_2fconn_2eproto[2]);
}

// ===================================================================

class Packet::_Internal {
 public:
  static const ::tendermint::p2p::PacketPing& packet_ping(const Packet* msg);
  static const ::tendermint::p2p::PacketPong& packet_pong(const Packet* msg);
  static const ::tendermint::p2p::PacketMsg& packet_msg(const Packet* msg);
};

const ::tendermint::p2p::PacketPing&
Packet::_Internal::packet_ping(const Packet* msg) {
  return *msg->sum_.packet_ping_;
}
const ::tendermint::p2p::PacketPong&
Packet::_Internal::packet_pong(const Packet* msg) {
  return *msg->sum_.packet_pong_;
}
const ::tendermint::p2p::PacketMsg&
Packet::_Internal::packet_msg(const Packet* msg) {
  return *msg->sum_.packet_msg_;
}
void Packet::set_allocated_packet_ping(::tendermint::p2p::PacketPing* packet_ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (packet_ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::p2p::PacketPing>::GetOwningArena(packet_ping);
    if (message_arena != submessage_arena) {
      packet_ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_ping, submessage_arena);
    }
    set_has_packet_ping();
    sum_.packet_ping_ = packet_ping;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.Packet.packet_ping)
}
void Packet::set_allocated_packet_pong(::tendermint::p2p::PacketPong* packet_pong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (packet_pong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::p2p::PacketPong>::GetOwningArena(packet_pong);
    if (message_arena != submessage_arena) {
      packet_pong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_pong, submessage_arena);
    }
    set_has_packet_pong();
    sum_.packet_pong_ = packet_pong;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.Packet.packet_pong)
}
void Packet::set_allocated_packet_msg(::tendermint::p2p::PacketMsg* packet_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (packet_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::p2p::PacketMsg>::GetOwningArena(packet_msg);
    if (message_arena != submessage_arena) {
      packet_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_msg, submessage_arena);
    }
    set_has_packet_msg();
    sum_.packet_msg_ = packet_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.Packet.packet_msg)
}
Packet::Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.Packet)
}
Packet::Packet(const Packet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_sum();
  switch (from.sum_case()) {
    case kPacketPing: {
      _internal_mutable_packet_ping()->::tendermint::p2p::PacketPing::MergeFrom(from._internal_packet_ping());
      break;
    }
    case kPacketPong: {
      _internal_mutable_packet_pong()->::tendermint::p2p::PacketPong::MergeFrom(from._internal_packet_pong());
      break;
    }
    case kPacketMsg: {
      _internal_mutable_packet_msg()->::tendermint::p2p::PacketMsg::MergeFrom(from._internal_packet_msg());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.p2p.Packet)
}

inline void Packet::SharedCtor() {
clear_has_sum();
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:tendermint.p2p.Packet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Packet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_sum()) {
    clear_sum();
  }
}

void Packet::ArenaDtor(void* object) {
  Packet* _this = reinterpret_cast< Packet* >(object);
  (void)_this;
}
void Packet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Packet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Packet::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:tendermint.p2p.Packet)
  switch (sum_case()) {
    case kPacketPing: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.packet_ping_;
      }
      break;
    }
    case kPacketPong: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.packet_pong_;
      }
      break;
    }
    case kPacketMsg: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.packet_msg_;
      }
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SUM_NOT_SET;
}


void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.p2p.Packet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Packet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.p2p.PacketPing packet_ping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_ping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.p2p.PacketPong packet_pong = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_pong(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.p2p.PacketMsg packet_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Packet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.p2p.Packet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.p2p.PacketPing packet_ping = 1;
  if (_internal_has_packet_ping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::packet_ping(this), target, stream);
  }

  // .tendermint.p2p.PacketPong packet_pong = 2;
  if (_internal_has_packet_pong()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::packet_pong(this), target, stream);
  }

  // .tendermint.p2p.PacketMsg packet_msg = 3;
  if (_internal_has_packet_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::packet_msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.p2p.Packet)
  return target;
}

size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.p2p.Packet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sum_case()) {
    // .tendermint.p2p.PacketPing packet_ping = 1;
    case kPacketPing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.packet_ping_);
      break;
    }
    // .tendermint.p2p.PacketPong packet_pong = 2;
    case kPacketPong: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.packet_pong_);
      break;
    }
    // .tendermint.p2p.PacketMsg packet_msg = 3;
    case kPacketMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.packet_msg_);
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Packet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Packet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Packet::GetClassData() const { return &_class_data_; }

void Packet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Packet *>(to)->MergeFrom(
      static_cast<const Packet &>(from));
}


void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.p2p.Packet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sum_case()) {
    case kPacketPing: {
      _internal_mutable_packet_ping()->::tendermint::p2p::PacketPing::MergeFrom(from._internal_packet_ping());
      break;
    }
    case kPacketPong: {
      _internal_mutable_packet_pong()->::tendermint::p2p::PacketPong::MergeFrom(from._internal_packet_pong());
      break;
    }
    case kPacketMsg: {
      _internal_mutable_packet_msg()->::tendermint::p2p::PacketMsg::MergeFrom(from._internal_packet_msg());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.p2p.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::InternalSwap(Packet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(sum_, other->sum_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Packet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fp2p_2fconn_2eproto_getter, &descriptor_table_tendermint_2fp2p_2fconn_2eproto_once,
      file_level_metadata_tendermint_2fp2p_2fconn_2eproto[3]);
}

// ===================================================================

class AuthSigMessage::_Internal {
 public:
  static const ::tendermint::crypto::PublicKey& pub_key(const AuthSigMessage* msg);
};

const ::tendermint::crypto::PublicKey&
AuthSigMessage::_Internal::pub_key(const AuthSigMessage* msg) {
  return *msg->pub_key_;
}
void AuthSigMessage::clear_pub_key() {
  if (GetArenaForAllocation() == nullptr && pub_key_ != nullptr) {
    delete pub_key_;
  }
  pub_key_ = nullptr;
}
AuthSigMessage::AuthSigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.AuthSigMessage)
}
AuthSigMessage::AuthSigMessage(const AuthSigMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sig().empty()) {
    sig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sig(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pub_key()) {
    pub_key_ = new ::tendermint::crypto::PublicKey(*from.pub_key_);
  } else {
    pub_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.p2p.AuthSigMessage)
}

inline void AuthSigMessage::SharedCtor() {
sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pub_key_ = nullptr;
}

AuthSigMessage::~AuthSigMessage() {
  // @@protoc_insertion_point(destructor:tendermint.p2p.AuthSigMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthSigMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pub_key_;
}

void AuthSigMessage::ArenaDtor(void* object) {
  AuthSigMessage* _this = reinterpret_cast< AuthSigMessage* >(object);
  (void)_this;
}
void AuthSigMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthSigMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthSigMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.p2p.AuthSigMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sig_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pub_key_ != nullptr) {
    delete pub_key_;
  }
  pub_key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthSigMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.crypto.PublicKey pub_key = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sig = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthSigMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.p2p.AuthSigMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.crypto.PublicKey pub_key = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_pub_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pub_key(this), target, stream);
  }

  // bytes sig = 2;
  if (!this->_internal_sig().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sig(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.p2p.AuthSigMessage)
  return target;
}

size_t AuthSigMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.p2p.AuthSigMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sig = 2;
  if (!this->_internal_sig().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sig());
  }

  // .tendermint.crypto.PublicKey pub_key = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_pub_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pub_key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthSigMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthSigMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthSigMessage::GetClassData() const { return &_class_data_; }

void AuthSigMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthSigMessage *>(to)->MergeFrom(
      static_cast<const AuthSigMessage &>(from));
}


void AuthSigMessage::MergeFrom(const AuthSigMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.p2p.AuthSigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sig().empty()) {
    _internal_set_sig(from._internal_sig());
  }
  if (from._internal_has_pub_key()) {
    _internal_mutable_pub_key()->::tendermint::crypto::PublicKey::MergeFrom(from._internal_pub_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthSigMessage::CopyFrom(const AuthSigMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.p2p.AuthSigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthSigMessage::IsInitialized() const {
  return true;
}

void AuthSigMessage::InternalSwap(AuthSigMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sig_, lhs_arena,
      &other->sig_, rhs_arena
  );
  swap(pub_key_, other->pub_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthSigMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fp2p_2fconn_2eproto_getter, &descriptor_table_tendermint_2fp2p_2fconn_2eproto_once,
      file_level_metadata_tendermint_2fp2p_2fconn_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace p2p
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::p2p::PacketPing* Arena::CreateMaybeMessage< ::tendermint::p2p::PacketPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::p2p::PacketPing >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::p2p::PacketPong* Arena::CreateMaybeMessage< ::tendermint::p2p::PacketPong >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::p2p::PacketPong >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::p2p::PacketMsg* Arena::CreateMaybeMessage< ::tendermint::p2p::PacketMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::p2p::PacketMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::p2p::Packet* Arena::CreateMaybeMessage< ::tendermint::p2p::Packet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::p2p::Packet >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::p2p::AuthSigMessage* Arena::CreateMaybeMessage< ::tendermint::p2p::AuthSigMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::p2p::AuthSigMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
