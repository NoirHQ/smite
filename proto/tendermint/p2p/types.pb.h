// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/p2p/types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tendermint_2fp2p_2ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tendermint_2fp2p_2ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tendermint_2fp2p_2ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2fp2p_2ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2fp2p_2ftypes_2eproto;
namespace tendermint {
namespace p2p {
class DefaultNodeInfo;
struct DefaultNodeInfoDefaultTypeInternal;
extern DefaultNodeInfoDefaultTypeInternal _DefaultNodeInfo_default_instance_;
class DefaultNodeInfoOther;
struct DefaultNodeInfoOtherDefaultTypeInternal;
extern DefaultNodeInfoOtherDefaultTypeInternal _DefaultNodeInfoOther_default_instance_;
class NetAddress;
struct NetAddressDefaultTypeInternal;
extern NetAddressDefaultTypeInternal _NetAddress_default_instance_;
class ProtocolVersion;
struct ProtocolVersionDefaultTypeInternal;
extern ProtocolVersionDefaultTypeInternal _ProtocolVersion_default_instance_;
}  // namespace p2p
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> ::tendermint::p2p::DefaultNodeInfo* Arena::CreateMaybeMessage<::tendermint::p2p::DefaultNodeInfo>(Arena*);
template<> ::tendermint::p2p::DefaultNodeInfoOther* Arena::CreateMaybeMessage<::tendermint::p2p::DefaultNodeInfoOther>(Arena*);
template<> ::tendermint::p2p::NetAddress* Arena::CreateMaybeMessage<::tendermint::p2p::NetAddress>(Arena*);
template<> ::tendermint::p2p::ProtocolVersion* Arena::CreateMaybeMessage<::tendermint::p2p::ProtocolVersion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tendermint {
namespace p2p {

// ===================================================================

class NetAddress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.p2p.NetAddress) */ {
 public:
  inline NetAddress() : NetAddress(nullptr) {}
  ~NetAddress() override;
  explicit constexpr NetAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetAddress(const NetAddress& from);
  NetAddress(NetAddress&& from) noexcept
    : NetAddress() {
    *this = ::std::move(from);
  }

  inline NetAddress& operator=(const NetAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetAddress& operator=(NetAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetAddress* internal_default_instance() {
    return reinterpret_cast<const NetAddress*>(
               &_NetAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetAddress& a, NetAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(NetAddress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetAddress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetAddress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetAddress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetAddress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.p2p.NetAddress";
  }
  protected:
  explicit NetAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIpFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // string id = 1 [(.gogoproto.customname) = "ID"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string ip = 2 [(.gogoproto.customname) = "IP"];
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint32 port = 3;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.p2p.NetAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  uint32_t port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fp2p_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ProtocolVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.p2p.ProtocolVersion) */ {
 public:
  inline ProtocolVersion() : ProtocolVersion(nullptr) {}
  ~ProtocolVersion() override;
  explicit constexpr ProtocolVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtocolVersion(const ProtocolVersion& from);
  ProtocolVersion(ProtocolVersion&& from) noexcept
    : ProtocolVersion() {
    *this = ::std::move(from);
  }

  inline ProtocolVersion& operator=(const ProtocolVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolVersion& operator=(ProtocolVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtocolVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtocolVersion* internal_default_instance() {
    return reinterpret_cast<const ProtocolVersion*>(
               &_ProtocolVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtocolVersion& a, ProtocolVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtocolVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtocolVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtocolVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtocolVersion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolVersion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.p2p.ProtocolVersion";
  }
  protected:
  explicit ProtocolVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kP2PFieldNumber = 1,
    kBlockFieldNumber = 2,
    kAppFieldNumber = 3,
  };
  // uint64 p2p = 1 [(.gogoproto.customname) = "P2P"];
  void clear_p2p();
  uint64_t p2p() const;
  void set_p2p(uint64_t value);
  private:
  uint64_t _internal_p2p() const;
  void _internal_set_p2p(uint64_t value);
  public:

  // uint64 block = 2;
  void clear_block();
  uint64_t block() const;
  void set_block(uint64_t value);
  private:
  uint64_t _internal_block() const;
  void _internal_set_block(uint64_t value);
  public:

  // uint64 app = 3;
  void clear_app();
  uint64_t app() const;
  void set_app(uint64_t value);
  private:
  uint64_t _internal_app() const;
  void _internal_set_app(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.p2p.ProtocolVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t p2p_;
  uint64_t block_;
  uint64_t app_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fp2p_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class DefaultNodeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.p2p.DefaultNodeInfo) */ {
 public:
  inline DefaultNodeInfo() : DefaultNodeInfo(nullptr) {}
  ~DefaultNodeInfo() override;
  explicit constexpr DefaultNodeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DefaultNodeInfo(const DefaultNodeInfo& from);
  DefaultNodeInfo(DefaultNodeInfo&& from) noexcept
    : DefaultNodeInfo() {
    *this = ::std::move(from);
  }

  inline DefaultNodeInfo& operator=(const DefaultNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefaultNodeInfo& operator=(DefaultNodeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DefaultNodeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DefaultNodeInfo* internal_default_instance() {
    return reinterpret_cast<const DefaultNodeInfo*>(
               &_DefaultNodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DefaultNodeInfo& a, DefaultNodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DefaultNodeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DefaultNodeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DefaultNodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DefaultNodeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DefaultNodeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DefaultNodeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefaultNodeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.p2p.DefaultNodeInfo";
  }
  protected:
  explicit DefaultNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultNodeIdFieldNumber = 2,
    kListenAddrFieldNumber = 3,
    kNetworkFieldNumber = 4,
    kVersionFieldNumber = 5,
    kChannelsFieldNumber = 6,
    kMonikerFieldNumber = 7,
    kProtocolVersionFieldNumber = 1,
    kOtherFieldNumber = 8,
  };
  // string default_node_id = 2 [(.gogoproto.customname) = "DefaultNodeID"];
  void clear_default_node_id();
  const std::string& default_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_node_id();
  PROTOBUF_NODISCARD std::string* release_default_node_id();
  void set_allocated_default_node_id(std::string* default_node_id);
  private:
  const std::string& _internal_default_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_node_id(const std::string& value);
  std::string* _internal_mutable_default_node_id();
  public:

  // string listen_addr = 3;
  void clear_listen_addr();
  const std::string& listen_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_listen_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_listen_addr();
  PROTOBUF_NODISCARD std::string* release_listen_addr();
  void set_allocated_listen_addr(std::string* listen_addr);
  private:
  const std::string& _internal_listen_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_listen_addr(const std::string& value);
  std::string* _internal_mutable_listen_addr();
  public:

  // string network = 4;
  void clear_network();
  const std::string& network() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_network(ArgT0&& arg0, ArgT... args);
  std::string* mutable_network();
  PROTOBUF_NODISCARD std::string* release_network();
  void set_allocated_network(std::string* network);
  private:
  const std::string& _internal_network() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_network(const std::string& value);
  std::string* _internal_mutable_network();
  public:

  // string version = 5;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // bytes channels = 6;
  void clear_channels();
  const std::string& channels() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channels(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channels();
  PROTOBUF_NODISCARD std::string* release_channels();
  void set_allocated_channels(std::string* channels);
  private:
  const std::string& _internal_channels() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channels(const std::string& value);
  std::string* _internal_mutable_channels();
  public:

  // string moniker = 7;
  void clear_moniker();
  const std::string& moniker() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_moniker(ArgT0&& arg0, ArgT... args);
  std::string* mutable_moniker();
  PROTOBUF_NODISCARD std::string* release_moniker();
  void set_allocated_moniker(std::string* moniker);
  private:
  const std::string& _internal_moniker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_moniker(const std::string& value);
  std::string* _internal_mutable_moniker();
  public:

  // .tendermint.p2p.ProtocolVersion protocol_version = 1 [(.gogoproto.nullable) = false];
  bool has_protocol_version() const;
  private:
  bool _internal_has_protocol_version() const;
  public:
  void clear_protocol_version();
  const ::tendermint::p2p::ProtocolVersion& protocol_version() const;
  PROTOBUF_NODISCARD ::tendermint::p2p::ProtocolVersion* release_protocol_version();
  ::tendermint::p2p::ProtocolVersion* mutable_protocol_version();
  void set_allocated_protocol_version(::tendermint::p2p::ProtocolVersion* protocol_version);
  private:
  const ::tendermint::p2p::ProtocolVersion& _internal_protocol_version() const;
  ::tendermint::p2p::ProtocolVersion* _internal_mutable_protocol_version();
  public:
  void unsafe_arena_set_allocated_protocol_version(
      ::tendermint::p2p::ProtocolVersion* protocol_version);
  ::tendermint::p2p::ProtocolVersion* unsafe_arena_release_protocol_version();

  // .tendermint.p2p.DefaultNodeInfoOther other = 8 [(.gogoproto.nullable) = false];
  bool has_other() const;
  private:
  bool _internal_has_other() const;
  public:
  void clear_other();
  const ::tendermint::p2p::DefaultNodeInfoOther& other() const;
  PROTOBUF_NODISCARD ::tendermint::p2p::DefaultNodeInfoOther* release_other();
  ::tendermint::p2p::DefaultNodeInfoOther* mutable_other();
  void set_allocated_other(::tendermint::p2p::DefaultNodeInfoOther* other);
  private:
  const ::tendermint::p2p::DefaultNodeInfoOther& _internal_other() const;
  ::tendermint::p2p::DefaultNodeInfoOther* _internal_mutable_other();
  public:
  void unsafe_arena_set_allocated_other(
      ::tendermint::p2p::DefaultNodeInfoOther* other);
  ::tendermint::p2p::DefaultNodeInfoOther* unsafe_arena_release_other();

  // @@protoc_insertion_point(class_scope:tendermint.p2p.DefaultNodeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr listen_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr moniker_;
  ::tendermint::p2p::ProtocolVersion* protocol_version_;
  ::tendermint::p2p::DefaultNodeInfoOther* other_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fp2p_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class DefaultNodeInfoOther final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.p2p.DefaultNodeInfoOther) */ {
 public:
  inline DefaultNodeInfoOther() : DefaultNodeInfoOther(nullptr) {}
  ~DefaultNodeInfoOther() override;
  explicit constexpr DefaultNodeInfoOther(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DefaultNodeInfoOther(const DefaultNodeInfoOther& from);
  DefaultNodeInfoOther(DefaultNodeInfoOther&& from) noexcept
    : DefaultNodeInfoOther() {
    *this = ::std::move(from);
  }

  inline DefaultNodeInfoOther& operator=(const DefaultNodeInfoOther& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefaultNodeInfoOther& operator=(DefaultNodeInfoOther&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DefaultNodeInfoOther& default_instance() {
    return *internal_default_instance();
  }
  static inline const DefaultNodeInfoOther* internal_default_instance() {
    return reinterpret_cast<const DefaultNodeInfoOther*>(
               &_DefaultNodeInfoOther_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DefaultNodeInfoOther& a, DefaultNodeInfoOther& b) {
    a.Swap(&b);
  }
  inline void Swap(DefaultNodeInfoOther* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DefaultNodeInfoOther* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DefaultNodeInfoOther* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DefaultNodeInfoOther>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DefaultNodeInfoOther& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DefaultNodeInfoOther& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefaultNodeInfoOther* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.p2p.DefaultNodeInfoOther";
  }
  protected:
  explicit DefaultNodeInfoOther(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxIndexFieldNumber = 1,
    kRpcAddressFieldNumber = 2,
  };
  // string tx_index = 1;
  void clear_tx_index();
  const std::string& tx_index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tx_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tx_index();
  PROTOBUF_NODISCARD std::string* release_tx_index();
  void set_allocated_tx_index(std::string* tx_index);
  private:
  const std::string& _internal_tx_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx_index(const std::string& value);
  std::string* _internal_mutable_tx_index();
  public:

  // string rpc_address = 2 [(.gogoproto.customname) = "RPCAddress"];
  void clear_rpc_address();
  const std::string& rpc_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rpc_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rpc_address();
  PROTOBUF_NODISCARD std::string* release_rpc_address();
  void set_allocated_rpc_address(std::string* rpc_address);
  private:
  const std::string& _internal_rpc_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpc_address(const std::string& value);
  std::string* _internal_mutable_rpc_address();
  public:

  // @@protoc_insertion_point(class_scope:tendermint.p2p.DefaultNodeInfoOther)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpc_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fp2p_2ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetAddress

// string id = 1 [(.gogoproto.customname) = "ID"];
inline void NetAddress::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& NetAddress::id() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.NetAddress.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetAddress::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.p2p.NetAddress.id)
}
inline std::string* NetAddress::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.NetAddress.id)
  return _s;
}
inline const std::string& NetAddress::_internal_id() const {
  return id_.Get();
}
inline void NetAddress::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NetAddress::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NetAddress::release_id() {
  // @@protoc_insertion_point(field_release:tendermint.p2p.NetAddress.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NetAddress::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.NetAddress.id)
}

// string ip = 2 [(.gogoproto.customname) = "IP"];
inline void NetAddress::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& NetAddress::ip() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.NetAddress.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetAddress::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.p2p.NetAddress.ip)
}
inline std::string* NetAddress::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.NetAddress.ip)
  return _s;
}
inline const std::string& NetAddress::_internal_ip() const {
  return ip_.Get();
}
inline void NetAddress::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NetAddress::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NetAddress::release_ip() {
  // @@protoc_insertion_point(field_release:tendermint.p2p.NetAddress.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NetAddress::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.NetAddress.ip)
}

// uint32 port = 3;
inline void NetAddress::clear_port() {
  port_ = 0u;
}
inline uint32_t NetAddress::_internal_port() const {
  return port_;
}
inline uint32_t NetAddress::port() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.NetAddress.port)
  return _internal_port();
}
inline void NetAddress::_internal_set_port(uint32_t value) {
  
  port_ = value;
}
inline void NetAddress::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:tendermint.p2p.NetAddress.port)
}

// -------------------------------------------------------------------

// ProtocolVersion

// uint64 p2p = 1 [(.gogoproto.customname) = "P2P"];
inline void ProtocolVersion::clear_p2p() {
  p2p_ = uint64_t{0u};
}
inline uint64_t ProtocolVersion::_internal_p2p() const {
  return p2p_;
}
inline uint64_t ProtocolVersion::p2p() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.ProtocolVersion.p2p)
  return _internal_p2p();
}
inline void ProtocolVersion::_internal_set_p2p(uint64_t value) {
  
  p2p_ = value;
}
inline void ProtocolVersion::set_p2p(uint64_t value) {
  _internal_set_p2p(value);
  // @@protoc_insertion_point(field_set:tendermint.p2p.ProtocolVersion.p2p)
}

// uint64 block = 2;
inline void ProtocolVersion::clear_block() {
  block_ = uint64_t{0u};
}
inline uint64_t ProtocolVersion::_internal_block() const {
  return block_;
}
inline uint64_t ProtocolVersion::block() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.ProtocolVersion.block)
  return _internal_block();
}
inline void ProtocolVersion::_internal_set_block(uint64_t value) {
  
  block_ = value;
}
inline void ProtocolVersion::set_block(uint64_t value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:tendermint.p2p.ProtocolVersion.block)
}

// uint64 app = 3;
inline void ProtocolVersion::clear_app() {
  app_ = uint64_t{0u};
}
inline uint64_t ProtocolVersion::_internal_app() const {
  return app_;
}
inline uint64_t ProtocolVersion::app() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.ProtocolVersion.app)
  return _internal_app();
}
inline void ProtocolVersion::_internal_set_app(uint64_t value) {
  
  app_ = value;
}
inline void ProtocolVersion::set_app(uint64_t value) {
  _internal_set_app(value);
  // @@protoc_insertion_point(field_set:tendermint.p2p.ProtocolVersion.app)
}

// -------------------------------------------------------------------

// DefaultNodeInfo

// .tendermint.p2p.ProtocolVersion protocol_version = 1 [(.gogoproto.nullable) = false];
inline bool DefaultNodeInfo::_internal_has_protocol_version() const {
  return this != internal_default_instance() && protocol_version_ != nullptr;
}
inline bool DefaultNodeInfo::has_protocol_version() const {
  return _internal_has_protocol_version();
}
inline void DefaultNodeInfo::clear_protocol_version() {
  if (GetArenaForAllocation() == nullptr && protocol_version_ != nullptr) {
    delete protocol_version_;
  }
  protocol_version_ = nullptr;
}
inline const ::tendermint::p2p::ProtocolVersion& DefaultNodeInfo::_internal_protocol_version() const {
  const ::tendermint::p2p::ProtocolVersion* p = protocol_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::p2p::ProtocolVersion&>(
      ::tendermint::p2p::_ProtocolVersion_default_instance_);
}
inline const ::tendermint::p2p::ProtocolVersion& DefaultNodeInfo::protocol_version() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.DefaultNodeInfo.protocol_version)
  return _internal_protocol_version();
}
inline void DefaultNodeInfo::unsafe_arena_set_allocated_protocol_version(
    ::tendermint::p2p::ProtocolVersion* protocol_version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protocol_version_);
  }
  protocol_version_ = protocol_version;
  if (protocol_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.p2p.DefaultNodeInfo.protocol_version)
}
inline ::tendermint::p2p::ProtocolVersion* DefaultNodeInfo::release_protocol_version() {
  
  ::tendermint::p2p::ProtocolVersion* temp = protocol_version_;
  protocol_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::p2p::ProtocolVersion* DefaultNodeInfo::unsafe_arena_release_protocol_version() {
  // @@protoc_insertion_point(field_release:tendermint.p2p.DefaultNodeInfo.protocol_version)
  
  ::tendermint::p2p::ProtocolVersion* temp = protocol_version_;
  protocol_version_ = nullptr;
  return temp;
}
inline ::tendermint::p2p::ProtocolVersion* DefaultNodeInfo::_internal_mutable_protocol_version() {
  
  if (protocol_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::p2p::ProtocolVersion>(GetArenaForAllocation());
    protocol_version_ = p;
  }
  return protocol_version_;
}
inline ::tendermint::p2p::ProtocolVersion* DefaultNodeInfo::mutable_protocol_version() {
  ::tendermint::p2p::ProtocolVersion* _msg = _internal_mutable_protocol_version();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.DefaultNodeInfo.protocol_version)
  return _msg;
}
inline void DefaultNodeInfo::set_allocated_protocol_version(::tendermint::p2p::ProtocolVersion* protocol_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete protocol_version_;
  }
  if (protocol_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::p2p::ProtocolVersion>::GetOwningArena(protocol_version);
    if (message_arena != submessage_arena) {
      protocol_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protocol_version, submessage_arena);
    }
    
  } else {
    
  }
  protocol_version_ = protocol_version;
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.DefaultNodeInfo.protocol_version)
}

// string default_node_id = 2 [(.gogoproto.customname) = "DefaultNodeID"];
inline void DefaultNodeInfo::clear_default_node_id() {
  default_node_id_.ClearToEmpty();
}
inline const std::string& DefaultNodeInfo::default_node_id() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.DefaultNodeInfo.default_node_id)
  return _internal_default_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DefaultNodeInfo::set_default_node_id(ArgT0&& arg0, ArgT... args) {
 
 default_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.p2p.DefaultNodeInfo.default_node_id)
}
inline std::string* DefaultNodeInfo::mutable_default_node_id() {
  std::string* _s = _internal_mutable_default_node_id();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.DefaultNodeInfo.default_node_id)
  return _s;
}
inline const std::string& DefaultNodeInfo::_internal_default_node_id() const {
  return default_node_id_.Get();
}
inline void DefaultNodeInfo::_internal_set_default_node_id(const std::string& value) {
  
  default_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DefaultNodeInfo::_internal_mutable_default_node_id() {
  
  return default_node_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DefaultNodeInfo::release_default_node_id() {
  // @@protoc_insertion_point(field_release:tendermint.p2p.DefaultNodeInfo.default_node_id)
  return default_node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DefaultNodeInfo::set_allocated_default_node_id(std::string* default_node_id) {
  if (default_node_id != nullptr) {
    
  } else {
    
  }
  default_node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_node_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (default_node_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    default_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.DefaultNodeInfo.default_node_id)
}

// string listen_addr = 3;
inline void DefaultNodeInfo::clear_listen_addr() {
  listen_addr_.ClearToEmpty();
}
inline const std::string& DefaultNodeInfo::listen_addr() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.DefaultNodeInfo.listen_addr)
  return _internal_listen_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DefaultNodeInfo::set_listen_addr(ArgT0&& arg0, ArgT... args) {
 
 listen_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.p2p.DefaultNodeInfo.listen_addr)
}
inline std::string* DefaultNodeInfo::mutable_listen_addr() {
  std::string* _s = _internal_mutable_listen_addr();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.DefaultNodeInfo.listen_addr)
  return _s;
}
inline const std::string& DefaultNodeInfo::_internal_listen_addr() const {
  return listen_addr_.Get();
}
inline void DefaultNodeInfo::_internal_set_listen_addr(const std::string& value) {
  
  listen_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DefaultNodeInfo::_internal_mutable_listen_addr() {
  
  return listen_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DefaultNodeInfo::release_listen_addr() {
  // @@protoc_insertion_point(field_release:tendermint.p2p.DefaultNodeInfo.listen_addr)
  return listen_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DefaultNodeInfo::set_allocated_listen_addr(std::string* listen_addr) {
  if (listen_addr != nullptr) {
    
  } else {
    
  }
  listen_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), listen_addr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (listen_addr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    listen_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.DefaultNodeInfo.listen_addr)
}

// string network = 4;
inline void DefaultNodeInfo::clear_network() {
  network_.ClearToEmpty();
}
inline const std::string& DefaultNodeInfo::network() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.DefaultNodeInfo.network)
  return _internal_network();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DefaultNodeInfo::set_network(ArgT0&& arg0, ArgT... args) {
 
 network_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.p2p.DefaultNodeInfo.network)
}
inline std::string* DefaultNodeInfo::mutable_network() {
  std::string* _s = _internal_mutable_network();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.DefaultNodeInfo.network)
  return _s;
}
inline const std::string& DefaultNodeInfo::_internal_network() const {
  return network_.Get();
}
inline void DefaultNodeInfo::_internal_set_network(const std::string& value) {
  
  network_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DefaultNodeInfo::_internal_mutable_network() {
  
  return network_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DefaultNodeInfo::release_network() {
  // @@protoc_insertion_point(field_release:tendermint.p2p.DefaultNodeInfo.network)
  return network_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DefaultNodeInfo::set_allocated_network(std::string* network) {
  if (network != nullptr) {
    
  } else {
    
  }
  network_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), network,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (network_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    network_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.DefaultNodeInfo.network)
}

// string version = 5;
inline void DefaultNodeInfo::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& DefaultNodeInfo::version() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.DefaultNodeInfo.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DefaultNodeInfo::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.p2p.DefaultNodeInfo.version)
}
inline std::string* DefaultNodeInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.DefaultNodeInfo.version)
  return _s;
}
inline const std::string& DefaultNodeInfo::_internal_version() const {
  return version_.Get();
}
inline void DefaultNodeInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DefaultNodeInfo::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DefaultNodeInfo::release_version() {
  // @@protoc_insertion_point(field_release:tendermint.p2p.DefaultNodeInfo.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DefaultNodeInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.DefaultNodeInfo.version)
}

// bytes channels = 6;
inline void DefaultNodeInfo::clear_channels() {
  channels_.ClearToEmpty();
}
inline const std::string& DefaultNodeInfo::channels() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.DefaultNodeInfo.channels)
  return _internal_channels();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DefaultNodeInfo::set_channels(ArgT0&& arg0, ArgT... args) {
 
 channels_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.p2p.DefaultNodeInfo.channels)
}
inline std::string* DefaultNodeInfo::mutable_channels() {
  std::string* _s = _internal_mutable_channels();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.DefaultNodeInfo.channels)
  return _s;
}
inline const std::string& DefaultNodeInfo::_internal_channels() const {
  return channels_.Get();
}
inline void DefaultNodeInfo::_internal_set_channels(const std::string& value) {
  
  channels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DefaultNodeInfo::_internal_mutable_channels() {
  
  return channels_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DefaultNodeInfo::release_channels() {
  // @@protoc_insertion_point(field_release:tendermint.p2p.DefaultNodeInfo.channels)
  return channels_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DefaultNodeInfo::set_allocated_channels(std::string* channels) {
  if (channels != nullptr) {
    
  } else {
    
  }
  channels_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channels,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (channels_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    channels_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.DefaultNodeInfo.channels)
}

// string moniker = 7;
inline void DefaultNodeInfo::clear_moniker() {
  moniker_.ClearToEmpty();
}
inline const std::string& DefaultNodeInfo::moniker() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.DefaultNodeInfo.moniker)
  return _internal_moniker();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DefaultNodeInfo::set_moniker(ArgT0&& arg0, ArgT... args) {
 
 moniker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.p2p.DefaultNodeInfo.moniker)
}
inline std::string* DefaultNodeInfo::mutable_moniker() {
  std::string* _s = _internal_mutable_moniker();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.DefaultNodeInfo.moniker)
  return _s;
}
inline const std::string& DefaultNodeInfo::_internal_moniker() const {
  return moniker_.Get();
}
inline void DefaultNodeInfo::_internal_set_moniker(const std::string& value) {
  
  moniker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DefaultNodeInfo::_internal_mutable_moniker() {
  
  return moniker_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DefaultNodeInfo::release_moniker() {
  // @@protoc_insertion_point(field_release:tendermint.p2p.DefaultNodeInfo.moniker)
  return moniker_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DefaultNodeInfo::set_allocated_moniker(std::string* moniker) {
  if (moniker != nullptr) {
    
  } else {
    
  }
  moniker_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), moniker,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (moniker_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    moniker_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.DefaultNodeInfo.moniker)
}

// .tendermint.p2p.DefaultNodeInfoOther other = 8 [(.gogoproto.nullable) = false];
inline bool DefaultNodeInfo::_internal_has_other() const {
  return this != internal_default_instance() && other_ != nullptr;
}
inline bool DefaultNodeInfo::has_other() const {
  return _internal_has_other();
}
inline void DefaultNodeInfo::clear_other() {
  if (GetArenaForAllocation() == nullptr && other_ != nullptr) {
    delete other_;
  }
  other_ = nullptr;
}
inline const ::tendermint::p2p::DefaultNodeInfoOther& DefaultNodeInfo::_internal_other() const {
  const ::tendermint::p2p::DefaultNodeInfoOther* p = other_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::p2p::DefaultNodeInfoOther&>(
      ::tendermint::p2p::_DefaultNodeInfoOther_default_instance_);
}
inline const ::tendermint::p2p::DefaultNodeInfoOther& DefaultNodeInfo::other() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.DefaultNodeInfo.other)
  return _internal_other();
}
inline void DefaultNodeInfo::unsafe_arena_set_allocated_other(
    ::tendermint::p2p::DefaultNodeInfoOther* other) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(other_);
  }
  other_ = other;
  if (other) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.p2p.DefaultNodeInfo.other)
}
inline ::tendermint::p2p::DefaultNodeInfoOther* DefaultNodeInfo::release_other() {
  
  ::tendermint::p2p::DefaultNodeInfoOther* temp = other_;
  other_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::p2p::DefaultNodeInfoOther* DefaultNodeInfo::unsafe_arena_release_other() {
  // @@protoc_insertion_point(field_release:tendermint.p2p.DefaultNodeInfo.other)
  
  ::tendermint::p2p::DefaultNodeInfoOther* temp = other_;
  other_ = nullptr;
  return temp;
}
inline ::tendermint::p2p::DefaultNodeInfoOther* DefaultNodeInfo::_internal_mutable_other() {
  
  if (other_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::p2p::DefaultNodeInfoOther>(GetArenaForAllocation());
    other_ = p;
  }
  return other_;
}
inline ::tendermint::p2p::DefaultNodeInfoOther* DefaultNodeInfo::mutable_other() {
  ::tendermint::p2p::DefaultNodeInfoOther* _msg = _internal_mutable_other();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.DefaultNodeInfo.other)
  return _msg;
}
inline void DefaultNodeInfo::set_allocated_other(::tendermint::p2p::DefaultNodeInfoOther* other) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete other_;
  }
  if (other) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::p2p::DefaultNodeInfoOther>::GetOwningArena(other);
    if (message_arena != submessage_arena) {
      other = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other, submessage_arena);
    }
    
  } else {
    
  }
  other_ = other;
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.DefaultNodeInfo.other)
}

// -------------------------------------------------------------------

// DefaultNodeInfoOther

// string tx_index = 1;
inline void DefaultNodeInfoOther::clear_tx_index() {
  tx_index_.ClearToEmpty();
}
inline const std::string& DefaultNodeInfoOther::tx_index() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.DefaultNodeInfoOther.tx_index)
  return _internal_tx_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DefaultNodeInfoOther::set_tx_index(ArgT0&& arg0, ArgT... args) {
 
 tx_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.p2p.DefaultNodeInfoOther.tx_index)
}
inline std::string* DefaultNodeInfoOther::mutable_tx_index() {
  std::string* _s = _internal_mutable_tx_index();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.DefaultNodeInfoOther.tx_index)
  return _s;
}
inline const std::string& DefaultNodeInfoOther::_internal_tx_index() const {
  return tx_index_.Get();
}
inline void DefaultNodeInfoOther::_internal_set_tx_index(const std::string& value) {
  
  tx_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DefaultNodeInfoOther::_internal_mutable_tx_index() {
  
  return tx_index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DefaultNodeInfoOther::release_tx_index() {
  // @@protoc_insertion_point(field_release:tendermint.p2p.DefaultNodeInfoOther.tx_index)
  return tx_index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DefaultNodeInfoOther::set_allocated_tx_index(std::string* tx_index) {
  if (tx_index != nullptr) {
    
  } else {
    
  }
  tx_index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_index,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tx_index_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tx_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.DefaultNodeInfoOther.tx_index)
}

// string rpc_address = 2 [(.gogoproto.customname) = "RPCAddress"];
inline void DefaultNodeInfoOther::clear_rpc_address() {
  rpc_address_.ClearToEmpty();
}
inline const std::string& DefaultNodeInfoOther::rpc_address() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.DefaultNodeInfoOther.rpc_address)
  return _internal_rpc_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DefaultNodeInfoOther::set_rpc_address(ArgT0&& arg0, ArgT... args) {
 
 rpc_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.p2p.DefaultNodeInfoOther.rpc_address)
}
inline std::string* DefaultNodeInfoOther::mutable_rpc_address() {
  std::string* _s = _internal_mutable_rpc_address();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.DefaultNodeInfoOther.rpc_address)
  return _s;
}
inline const std::string& DefaultNodeInfoOther::_internal_rpc_address() const {
  return rpc_address_.Get();
}
inline void DefaultNodeInfoOther::_internal_set_rpc_address(const std::string& value) {
  
  rpc_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DefaultNodeInfoOther::_internal_mutable_rpc_address() {
  
  return rpc_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DefaultNodeInfoOther::release_rpc_address() {
  // @@protoc_insertion_point(field_release:tendermint.p2p.DefaultNodeInfoOther.rpc_address)
  return rpc_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DefaultNodeInfoOther::set_allocated_rpc_address(std::string* rpc_address) {
  if (rpc_address != nullptr) {
    
  } else {
    
  }
  rpc_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rpc_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rpc_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rpc_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.DefaultNodeInfoOther.rpc_address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace p2p
}  // namespace tendermint

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tendermint_2fp2p_2ftypes_2eproto
