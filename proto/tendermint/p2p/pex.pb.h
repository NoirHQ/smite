// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/p2p/pex.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tendermint_2fp2p_2fpex_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tendermint_2fp2p_2fpex_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tendermint/p2p/types.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tendermint_2fp2p_2fpex_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2fp2p_2fpex_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2fp2p_2fpex_2eproto;
namespace tendermint {
namespace p2p {
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class PexAddrs;
struct PexAddrsDefaultTypeInternal;
extern PexAddrsDefaultTypeInternal _PexAddrs_default_instance_;
class PexRequest;
struct PexRequestDefaultTypeInternal;
extern PexRequestDefaultTypeInternal _PexRequest_default_instance_;
}  // namespace p2p
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> ::tendermint::p2p::Message* Arena::CreateMaybeMessage<::tendermint::p2p::Message>(Arena*);
template<> ::tendermint::p2p::PexAddrs* Arena::CreateMaybeMessage<::tendermint::p2p::PexAddrs>(Arena*);
template<> ::tendermint::p2p::PexRequest* Arena::CreateMaybeMessage<::tendermint::p2p::PexRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tendermint {
namespace p2p {

// ===================================================================

class PexRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:tendermint.p2p.PexRequest) */ {
 public:
  inline PexRequest() : PexRequest(nullptr) {}
  explicit constexpr PexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PexRequest(const PexRequest& from);
  PexRequest(PexRequest&& from) noexcept
    : PexRequest() {
    *this = ::std::move(from);
  }

  inline PexRequest& operator=(const PexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PexRequest& operator=(PexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PexRequest* internal_default_instance() {
    return reinterpret_cast<const PexRequest*>(
               &_PexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PexRequest& a, PexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PexRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PexRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PexRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PexRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.p2p.PexRequest";
  }
  protected:
  explicit PexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tendermint.p2p.PexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fp2p_2fpex_2eproto;
};
// -------------------------------------------------------------------

class PexAddrs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.p2p.PexAddrs) */ {
 public:
  inline PexAddrs() : PexAddrs(nullptr) {}
  ~PexAddrs() override;
  explicit constexpr PexAddrs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PexAddrs(const PexAddrs& from);
  PexAddrs(PexAddrs&& from) noexcept
    : PexAddrs() {
    *this = ::std::move(from);
  }

  inline PexAddrs& operator=(const PexAddrs& from) {
    CopyFrom(from);
    return *this;
  }
  inline PexAddrs& operator=(PexAddrs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PexAddrs& default_instance() {
    return *internal_default_instance();
  }
  static inline const PexAddrs* internal_default_instance() {
    return reinterpret_cast<const PexAddrs*>(
               &_PexAddrs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PexAddrs& a, PexAddrs& b) {
    a.Swap(&b);
  }
  inline void Swap(PexAddrs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PexAddrs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PexAddrs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PexAddrs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PexAddrs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PexAddrs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PexAddrs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.p2p.PexAddrs";
  }
  protected:
  explicit PexAddrs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrsFieldNumber = 1,
  };
  // repeated .tendermint.p2p.NetAddress addrs = 1 [(.gogoproto.nullable) = false];
  int addrs_size() const;
  private:
  int _internal_addrs_size() const;
  public:
  void clear_addrs();
  ::tendermint::p2p::NetAddress* mutable_addrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::p2p::NetAddress >*
      mutable_addrs();
  private:
  const ::tendermint::p2p::NetAddress& _internal_addrs(int index) const;
  ::tendermint::p2p::NetAddress* _internal_add_addrs();
  public:
  const ::tendermint::p2p::NetAddress& addrs(int index) const;
  ::tendermint::p2p::NetAddress* add_addrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::p2p::NetAddress >&
      addrs() const;

  // @@protoc_insertion_point(class_scope:tendermint.p2p.PexAddrs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::p2p::NetAddress > addrs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fp2p_2fpex_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.p2p.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit constexpr Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  enum SumCase {
    kPexRequest = 1,
    kPexAddrs = 2,
    SUM_NOT_SET = 0,
  };

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.p2p.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPexRequestFieldNumber = 1,
    kPexAddrsFieldNumber = 2,
  };
  // .tendermint.p2p.PexRequest pex_request = 1;
  bool has_pex_request() const;
  private:
  bool _internal_has_pex_request() const;
  public:
  void clear_pex_request();
  const ::tendermint::p2p::PexRequest& pex_request() const;
  PROTOBUF_NODISCARD ::tendermint::p2p::PexRequest* release_pex_request();
  ::tendermint::p2p::PexRequest* mutable_pex_request();
  void set_allocated_pex_request(::tendermint::p2p::PexRequest* pex_request);
  private:
  const ::tendermint::p2p::PexRequest& _internal_pex_request() const;
  ::tendermint::p2p::PexRequest* _internal_mutable_pex_request();
  public:
  void unsafe_arena_set_allocated_pex_request(
      ::tendermint::p2p::PexRequest* pex_request);
  ::tendermint::p2p::PexRequest* unsafe_arena_release_pex_request();

  // .tendermint.p2p.PexAddrs pex_addrs = 2;
  bool has_pex_addrs() const;
  private:
  bool _internal_has_pex_addrs() const;
  public:
  void clear_pex_addrs();
  const ::tendermint::p2p::PexAddrs& pex_addrs() const;
  PROTOBUF_NODISCARD ::tendermint::p2p::PexAddrs* release_pex_addrs();
  ::tendermint::p2p::PexAddrs* mutable_pex_addrs();
  void set_allocated_pex_addrs(::tendermint::p2p::PexAddrs* pex_addrs);
  private:
  const ::tendermint::p2p::PexAddrs& _internal_pex_addrs() const;
  ::tendermint::p2p::PexAddrs* _internal_mutable_pex_addrs();
  public:
  void unsafe_arena_set_allocated_pex_addrs(
      ::tendermint::p2p::PexAddrs* pex_addrs);
  ::tendermint::p2p::PexAddrs* unsafe_arena_release_pex_addrs();

  void clear_sum();
  SumCase sum_case() const;
  // @@protoc_insertion_point(class_scope:tendermint.p2p.Message)
 private:
  class _Internal;
  void set_has_pex_request();
  void set_has_pex_addrs();

  inline bool has_sum() const;
  inline void clear_has_sum();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union SumUnion {
    constexpr SumUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::tendermint::p2p::PexRequest* pex_request_;
    ::tendermint::p2p::PexAddrs* pex_addrs_;
  } sum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_tendermint_2fp2p_2fpex_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PexRequest

// -------------------------------------------------------------------

// PexAddrs

// repeated .tendermint.p2p.NetAddress addrs = 1 [(.gogoproto.nullable) = false];
inline int PexAddrs::_internal_addrs_size() const {
  return addrs_.size();
}
inline int PexAddrs::addrs_size() const {
  return _internal_addrs_size();
}
inline ::tendermint::p2p::NetAddress* PexAddrs::mutable_addrs(int index) {
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.PexAddrs.addrs)
  return addrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::p2p::NetAddress >*
PexAddrs::mutable_addrs() {
  // @@protoc_insertion_point(field_mutable_list:tendermint.p2p.PexAddrs.addrs)
  return &addrs_;
}
inline const ::tendermint::p2p::NetAddress& PexAddrs::_internal_addrs(int index) const {
  return addrs_.Get(index);
}
inline const ::tendermint::p2p::NetAddress& PexAddrs::addrs(int index) const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.PexAddrs.addrs)
  return _internal_addrs(index);
}
inline ::tendermint::p2p::NetAddress* PexAddrs::_internal_add_addrs() {
  return addrs_.Add();
}
inline ::tendermint::p2p::NetAddress* PexAddrs::add_addrs() {
  ::tendermint::p2p::NetAddress* _add = _internal_add_addrs();
  // @@protoc_insertion_point(field_add:tendermint.p2p.PexAddrs.addrs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::p2p::NetAddress >&
PexAddrs::addrs() const {
  // @@protoc_insertion_point(field_list:tendermint.p2p.PexAddrs.addrs)
  return addrs_;
}

// -------------------------------------------------------------------

// Message

// .tendermint.p2p.PexRequest pex_request = 1;
inline bool Message::_internal_has_pex_request() const {
  return sum_case() == kPexRequest;
}
inline bool Message::has_pex_request() const {
  return _internal_has_pex_request();
}
inline void Message::set_has_pex_request() {
  _oneof_case_[0] = kPexRequest;
}
inline void Message::clear_pex_request() {
  if (_internal_has_pex_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sum_.pex_request_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::p2p::PexRequest* Message::release_pex_request() {
  // @@protoc_insertion_point(field_release:tendermint.p2p.Message.pex_request)
  if (_internal_has_pex_request()) {
    clear_has_sum();
      ::tendermint::p2p::PexRequest* temp = sum_.pex_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sum_.pex_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::p2p::PexRequest& Message::_internal_pex_request() const {
  return _internal_has_pex_request()
      ? *sum_.pex_request_
      : reinterpret_cast< ::tendermint::p2p::PexRequest&>(::tendermint::p2p::_PexRequest_default_instance_);
}
inline const ::tendermint::p2p::PexRequest& Message::pex_request() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.Message.pex_request)
  return _internal_pex_request();
}
inline ::tendermint::p2p::PexRequest* Message::unsafe_arena_release_pex_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.p2p.Message.pex_request)
  if (_internal_has_pex_request()) {
    clear_has_sum();
    ::tendermint::p2p::PexRequest* temp = sum_.pex_request_;
    sum_.pex_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_pex_request(::tendermint::p2p::PexRequest* pex_request) {
  clear_sum();
  if (pex_request) {
    set_has_pex_request();
    sum_.pex_request_ = pex_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.p2p.Message.pex_request)
}
inline ::tendermint::p2p::PexRequest* Message::_internal_mutable_pex_request() {
  if (!_internal_has_pex_request()) {
    clear_sum();
    set_has_pex_request();
    sum_.pex_request_ = CreateMaybeMessage< ::tendermint::p2p::PexRequest >(GetArenaForAllocation());
  }
  return sum_.pex_request_;
}
inline ::tendermint::p2p::PexRequest* Message::mutable_pex_request() {
  ::tendermint::p2p::PexRequest* _msg = _internal_mutable_pex_request();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.Message.pex_request)
  return _msg;
}

// .tendermint.p2p.PexAddrs pex_addrs = 2;
inline bool Message::_internal_has_pex_addrs() const {
  return sum_case() == kPexAddrs;
}
inline bool Message::has_pex_addrs() const {
  return _internal_has_pex_addrs();
}
inline void Message::set_has_pex_addrs() {
  _oneof_case_[0] = kPexAddrs;
}
inline void Message::clear_pex_addrs() {
  if (_internal_has_pex_addrs()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sum_.pex_addrs_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::p2p::PexAddrs* Message::release_pex_addrs() {
  // @@protoc_insertion_point(field_release:tendermint.p2p.Message.pex_addrs)
  if (_internal_has_pex_addrs()) {
    clear_has_sum();
      ::tendermint::p2p::PexAddrs* temp = sum_.pex_addrs_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sum_.pex_addrs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::p2p::PexAddrs& Message::_internal_pex_addrs() const {
  return _internal_has_pex_addrs()
      ? *sum_.pex_addrs_
      : reinterpret_cast< ::tendermint::p2p::PexAddrs&>(::tendermint::p2p::_PexAddrs_default_instance_);
}
inline const ::tendermint::p2p::PexAddrs& Message::pex_addrs() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.Message.pex_addrs)
  return _internal_pex_addrs();
}
inline ::tendermint::p2p::PexAddrs* Message::unsafe_arena_release_pex_addrs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.p2p.Message.pex_addrs)
  if (_internal_has_pex_addrs()) {
    clear_has_sum();
    ::tendermint::p2p::PexAddrs* temp = sum_.pex_addrs_;
    sum_.pex_addrs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_pex_addrs(::tendermint::p2p::PexAddrs* pex_addrs) {
  clear_sum();
  if (pex_addrs) {
    set_has_pex_addrs();
    sum_.pex_addrs_ = pex_addrs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.p2p.Message.pex_addrs)
}
inline ::tendermint::p2p::PexAddrs* Message::_internal_mutable_pex_addrs() {
  if (!_internal_has_pex_addrs()) {
    clear_sum();
    set_has_pex_addrs();
    sum_.pex_addrs_ = CreateMaybeMessage< ::tendermint::p2p::PexAddrs >(GetArenaForAllocation());
  }
  return sum_.pex_addrs_;
}
inline ::tendermint::p2p::PexAddrs* Message::mutable_pex_addrs() {
  ::tendermint::p2p::PexAddrs* _msg = _internal_mutable_pex_addrs();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.Message.pex_addrs)
  return _msg;
}

inline bool Message::has_sum() const {
  return sum_case() != SUM_NOT_SET;
}
inline void Message::clear_has_sum() {
  _oneof_case_[0] = SUM_NOT_SET;
}
inline Message::SumCase Message::sum_case() const {
  return Message::SumCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace p2p
}  // namespace tendermint

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tendermint_2fp2p_2fpex_2eproto
