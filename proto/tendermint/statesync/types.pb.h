// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/statesync/types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tendermint_2fstatesync_2ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tendermint_2fstatesync_2ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tendermint_2fstatesync_2ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2fstatesync_2ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2fstatesync_2ftypes_2eproto;
namespace tendermint {
namespace statesync {
class ChunkRequest;
struct ChunkRequestDefaultTypeInternal;
extern ChunkRequestDefaultTypeInternal _ChunkRequest_default_instance_;
class ChunkResponse;
struct ChunkResponseDefaultTypeInternal;
extern ChunkResponseDefaultTypeInternal _ChunkResponse_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class SnapshotsRequest;
struct SnapshotsRequestDefaultTypeInternal;
extern SnapshotsRequestDefaultTypeInternal _SnapshotsRequest_default_instance_;
class SnapshotsResponse;
struct SnapshotsResponseDefaultTypeInternal;
extern SnapshotsResponseDefaultTypeInternal _SnapshotsResponse_default_instance_;
}  // namespace statesync
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> ::tendermint::statesync::ChunkRequest* Arena::CreateMaybeMessage<::tendermint::statesync::ChunkRequest>(Arena*);
template<> ::tendermint::statesync::ChunkResponse* Arena::CreateMaybeMessage<::tendermint::statesync::ChunkResponse>(Arena*);
template<> ::tendermint::statesync::Message* Arena::CreateMaybeMessage<::tendermint::statesync::Message>(Arena*);
template<> ::tendermint::statesync::SnapshotsRequest* Arena::CreateMaybeMessage<::tendermint::statesync::SnapshotsRequest>(Arena*);
template<> ::tendermint::statesync::SnapshotsResponse* Arena::CreateMaybeMessage<::tendermint::statesync::SnapshotsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tendermint {
namespace statesync {

// ===================================================================

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.statesync.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit constexpr Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  enum SumCase {
    kSnapshotsRequest = 1,
    kSnapshotsResponse = 2,
    kChunkRequest = 3,
    kChunkResponse = 4,
    SUM_NOT_SET = 0,
  };

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.statesync.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotsRequestFieldNumber = 1,
    kSnapshotsResponseFieldNumber = 2,
    kChunkRequestFieldNumber = 3,
    kChunkResponseFieldNumber = 4,
  };
  // .tendermint.statesync.SnapshotsRequest snapshots_request = 1;
  bool has_snapshots_request() const;
  private:
  bool _internal_has_snapshots_request() const;
  public:
  void clear_snapshots_request();
  const ::tendermint::statesync::SnapshotsRequest& snapshots_request() const;
  PROTOBUF_NODISCARD ::tendermint::statesync::SnapshotsRequest* release_snapshots_request();
  ::tendermint::statesync::SnapshotsRequest* mutable_snapshots_request();
  void set_allocated_snapshots_request(::tendermint::statesync::SnapshotsRequest* snapshots_request);
  private:
  const ::tendermint::statesync::SnapshotsRequest& _internal_snapshots_request() const;
  ::tendermint::statesync::SnapshotsRequest* _internal_mutable_snapshots_request();
  public:
  void unsafe_arena_set_allocated_snapshots_request(
      ::tendermint::statesync::SnapshotsRequest* snapshots_request);
  ::tendermint::statesync::SnapshotsRequest* unsafe_arena_release_snapshots_request();

  // .tendermint.statesync.SnapshotsResponse snapshots_response = 2;
  bool has_snapshots_response() const;
  private:
  bool _internal_has_snapshots_response() const;
  public:
  void clear_snapshots_response();
  const ::tendermint::statesync::SnapshotsResponse& snapshots_response() const;
  PROTOBUF_NODISCARD ::tendermint::statesync::SnapshotsResponse* release_snapshots_response();
  ::tendermint::statesync::SnapshotsResponse* mutable_snapshots_response();
  void set_allocated_snapshots_response(::tendermint::statesync::SnapshotsResponse* snapshots_response);
  private:
  const ::tendermint::statesync::SnapshotsResponse& _internal_snapshots_response() const;
  ::tendermint::statesync::SnapshotsResponse* _internal_mutable_snapshots_response();
  public:
  void unsafe_arena_set_allocated_snapshots_response(
      ::tendermint::statesync::SnapshotsResponse* snapshots_response);
  ::tendermint::statesync::SnapshotsResponse* unsafe_arena_release_snapshots_response();

  // .tendermint.statesync.ChunkRequest chunk_request = 3;
  bool has_chunk_request() const;
  private:
  bool _internal_has_chunk_request() const;
  public:
  void clear_chunk_request();
  const ::tendermint::statesync::ChunkRequest& chunk_request() const;
  PROTOBUF_NODISCARD ::tendermint::statesync::ChunkRequest* release_chunk_request();
  ::tendermint::statesync::ChunkRequest* mutable_chunk_request();
  void set_allocated_chunk_request(::tendermint::statesync::ChunkRequest* chunk_request);
  private:
  const ::tendermint::statesync::ChunkRequest& _internal_chunk_request() const;
  ::tendermint::statesync::ChunkRequest* _internal_mutable_chunk_request();
  public:
  void unsafe_arena_set_allocated_chunk_request(
      ::tendermint::statesync::ChunkRequest* chunk_request);
  ::tendermint::statesync::ChunkRequest* unsafe_arena_release_chunk_request();

  // .tendermint.statesync.ChunkResponse chunk_response = 4;
  bool has_chunk_response() const;
  private:
  bool _internal_has_chunk_response() const;
  public:
  void clear_chunk_response();
  const ::tendermint::statesync::ChunkResponse& chunk_response() const;
  PROTOBUF_NODISCARD ::tendermint::statesync::ChunkResponse* release_chunk_response();
  ::tendermint::statesync::ChunkResponse* mutable_chunk_response();
  void set_allocated_chunk_response(::tendermint::statesync::ChunkResponse* chunk_response);
  private:
  const ::tendermint::statesync::ChunkResponse& _internal_chunk_response() const;
  ::tendermint::statesync::ChunkResponse* _internal_mutable_chunk_response();
  public:
  void unsafe_arena_set_allocated_chunk_response(
      ::tendermint::statesync::ChunkResponse* chunk_response);
  ::tendermint::statesync::ChunkResponse* unsafe_arena_release_chunk_response();

  void clear_sum();
  SumCase sum_case() const;
  // @@protoc_insertion_point(class_scope:tendermint.statesync.Message)
 private:
  class _Internal;
  void set_has_snapshots_request();
  void set_has_snapshots_response();
  void set_has_chunk_request();
  void set_has_chunk_response();

  inline bool has_sum() const;
  inline void clear_has_sum();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union SumUnion {
    constexpr SumUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::tendermint::statesync::SnapshotsRequest* snapshots_request_;
    ::tendermint::statesync::SnapshotsResponse* snapshots_response_;
    ::tendermint::statesync::ChunkRequest* chunk_request_;
    ::tendermint::statesync::ChunkResponse* chunk_response_;
  } sum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_tendermint_2fstatesync_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class SnapshotsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:tendermint.statesync.SnapshotsRequest) */ {
 public:
  inline SnapshotsRequest() : SnapshotsRequest(nullptr) {}
  explicit constexpr SnapshotsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnapshotsRequest(const SnapshotsRequest& from);
  SnapshotsRequest(SnapshotsRequest&& from) noexcept
    : SnapshotsRequest() {
    *this = ::std::move(from);
  }

  inline SnapshotsRequest& operator=(const SnapshotsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotsRequest& operator=(SnapshotsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnapshotsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnapshotsRequest* internal_default_instance() {
    return reinterpret_cast<const SnapshotsRequest*>(
               &_SnapshotsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SnapshotsRequest& a, SnapshotsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnapshotsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnapshotsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SnapshotsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SnapshotsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.statesync.SnapshotsRequest";
  }
  protected:
  explicit SnapshotsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tendermint.statesync.SnapshotsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fstatesync_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class SnapshotsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.statesync.SnapshotsResponse) */ {
 public:
  inline SnapshotsResponse() : SnapshotsResponse(nullptr) {}
  ~SnapshotsResponse() override;
  explicit constexpr SnapshotsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnapshotsResponse(const SnapshotsResponse& from);
  SnapshotsResponse(SnapshotsResponse&& from) noexcept
    : SnapshotsResponse() {
    *this = ::std::move(from);
  }

  inline SnapshotsResponse& operator=(const SnapshotsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotsResponse& operator=(SnapshotsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnapshotsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnapshotsResponse* internal_default_instance() {
    return reinterpret_cast<const SnapshotsResponse*>(
               &_SnapshotsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SnapshotsResponse& a, SnapshotsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnapshotsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnapshotsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnapshotsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnapshotsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.statesync.SnapshotsResponse";
  }
  protected:
  explicit SnapshotsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 4,
    kMetadataFieldNumber = 5,
    kHeightFieldNumber = 1,
    kFormatFieldNumber = 2,
    kChunksFieldNumber = 3,
  };
  // bytes hash = 4;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // bytes metadata = 5;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // uint64 height = 1;
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // uint32 format = 2;
  void clear_format();
  uint32_t format() const;
  void set_format(uint32_t value);
  private:
  uint32_t _internal_format() const;
  void _internal_set_format(uint32_t value);
  public:

  // uint32 chunks = 3;
  void clear_chunks();
  uint32_t chunks() const;
  void set_chunks(uint32_t value);
  private:
  uint32_t _internal_chunks() const;
  void _internal_set_chunks(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.statesync.SnapshotsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  uint64_t height_;
  uint32_t format_;
  uint32_t chunks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fstatesync_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ChunkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.statesync.ChunkRequest) */ {
 public:
  inline ChunkRequest() : ChunkRequest(nullptr) {}
  ~ChunkRequest() override;
  explicit constexpr ChunkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChunkRequest(const ChunkRequest& from);
  ChunkRequest(ChunkRequest&& from) noexcept
    : ChunkRequest() {
    *this = ::std::move(from);
  }

  inline ChunkRequest& operator=(const ChunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkRequest& operator=(ChunkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkRequest* internal_default_instance() {
    return reinterpret_cast<const ChunkRequest*>(
               &_ChunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChunkRequest& a, ChunkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChunkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChunkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChunkRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.statesync.ChunkRequest";
  }
  protected:
  explicit ChunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kFormatFieldNumber = 2,
    kIndexFieldNumber = 3,
  };
  // uint64 height = 1;
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // uint32 format = 2;
  void clear_format();
  uint32_t format() const;
  void set_format(uint32_t value);
  private:
  uint32_t _internal_format() const;
  void _internal_set_format(uint32_t value);
  public:

  // uint32 index = 3;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.statesync.ChunkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t height_;
  uint32_t format_;
  uint32_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fstatesync_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ChunkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.statesync.ChunkResponse) */ {
 public:
  inline ChunkResponse() : ChunkResponse(nullptr) {}
  ~ChunkResponse() override;
  explicit constexpr ChunkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChunkResponse(const ChunkResponse& from);
  ChunkResponse(ChunkResponse&& from) noexcept
    : ChunkResponse() {
    *this = ::std::move(from);
  }

  inline ChunkResponse& operator=(const ChunkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkResponse& operator=(ChunkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkResponse* internal_default_instance() {
    return reinterpret_cast<const ChunkResponse*>(
               &_ChunkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChunkResponse& a, ChunkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChunkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChunkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChunkResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.statesync.ChunkResponse";
  }
  protected:
  explicit ChunkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkFieldNumber = 4,
    kHeightFieldNumber = 1,
    kFormatFieldNumber = 2,
    kIndexFieldNumber = 3,
    kMissingFieldNumber = 5,
  };
  // bytes chunk = 4;
  void clear_chunk();
  const std::string& chunk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chunk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chunk();
  PROTOBUF_NODISCARD std::string* release_chunk();
  void set_allocated_chunk(std::string* chunk);
  private:
  const std::string& _internal_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk(const std::string& value);
  std::string* _internal_mutable_chunk();
  public:

  // uint64 height = 1;
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // uint32 format = 2;
  void clear_format();
  uint32_t format() const;
  void set_format(uint32_t value);
  private:
  uint32_t _internal_format() const;
  void _internal_set_format(uint32_t value);
  public:

  // uint32 index = 3;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // bool missing = 5;
  void clear_missing();
  bool missing() const;
  void set_missing(bool value);
  private:
  bool _internal_missing() const;
  void _internal_set_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.statesync.ChunkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunk_;
  uint64_t height_;
  uint32_t format_;
  uint32_t index_;
  bool missing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fstatesync_2ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// .tendermint.statesync.SnapshotsRequest snapshots_request = 1;
inline bool Message::_internal_has_snapshots_request() const {
  return sum_case() == kSnapshotsRequest;
}
inline bool Message::has_snapshots_request() const {
  return _internal_has_snapshots_request();
}
inline void Message::set_has_snapshots_request() {
  _oneof_case_[0] = kSnapshotsRequest;
}
inline void Message::clear_snapshots_request() {
  if (_internal_has_snapshots_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sum_.snapshots_request_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::statesync::SnapshotsRequest* Message::release_snapshots_request() {
  // @@protoc_insertion_point(field_release:tendermint.statesync.Message.snapshots_request)
  if (_internal_has_snapshots_request()) {
    clear_has_sum();
      ::tendermint::statesync::SnapshotsRequest* temp = sum_.snapshots_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sum_.snapshots_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::statesync::SnapshotsRequest& Message::_internal_snapshots_request() const {
  return _internal_has_snapshots_request()
      ? *sum_.snapshots_request_
      : reinterpret_cast< ::tendermint::statesync::SnapshotsRequest&>(::tendermint::statesync::_SnapshotsRequest_default_instance_);
}
inline const ::tendermint::statesync::SnapshotsRequest& Message::snapshots_request() const {
  // @@protoc_insertion_point(field_get:tendermint.statesync.Message.snapshots_request)
  return _internal_snapshots_request();
}
inline ::tendermint::statesync::SnapshotsRequest* Message::unsafe_arena_release_snapshots_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.statesync.Message.snapshots_request)
  if (_internal_has_snapshots_request()) {
    clear_has_sum();
    ::tendermint::statesync::SnapshotsRequest* temp = sum_.snapshots_request_;
    sum_.snapshots_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_snapshots_request(::tendermint::statesync::SnapshotsRequest* snapshots_request) {
  clear_sum();
  if (snapshots_request) {
    set_has_snapshots_request();
    sum_.snapshots_request_ = snapshots_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.statesync.Message.snapshots_request)
}
inline ::tendermint::statesync::SnapshotsRequest* Message::_internal_mutable_snapshots_request() {
  if (!_internal_has_snapshots_request()) {
    clear_sum();
    set_has_snapshots_request();
    sum_.snapshots_request_ = CreateMaybeMessage< ::tendermint::statesync::SnapshotsRequest >(GetArenaForAllocation());
  }
  return sum_.snapshots_request_;
}
inline ::tendermint::statesync::SnapshotsRequest* Message::mutable_snapshots_request() {
  ::tendermint::statesync::SnapshotsRequest* _msg = _internal_mutable_snapshots_request();
  // @@protoc_insertion_point(field_mutable:tendermint.statesync.Message.snapshots_request)
  return _msg;
}

// .tendermint.statesync.SnapshotsResponse snapshots_response = 2;
inline bool Message::_internal_has_snapshots_response() const {
  return sum_case() == kSnapshotsResponse;
}
inline bool Message::has_snapshots_response() const {
  return _internal_has_snapshots_response();
}
inline void Message::set_has_snapshots_response() {
  _oneof_case_[0] = kSnapshotsResponse;
}
inline void Message::clear_snapshots_response() {
  if (_internal_has_snapshots_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sum_.snapshots_response_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::statesync::SnapshotsResponse* Message::release_snapshots_response() {
  // @@protoc_insertion_point(field_release:tendermint.statesync.Message.snapshots_response)
  if (_internal_has_snapshots_response()) {
    clear_has_sum();
      ::tendermint::statesync::SnapshotsResponse* temp = sum_.snapshots_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sum_.snapshots_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::statesync::SnapshotsResponse& Message::_internal_snapshots_response() const {
  return _internal_has_snapshots_response()
      ? *sum_.snapshots_response_
      : reinterpret_cast< ::tendermint::statesync::SnapshotsResponse&>(::tendermint::statesync::_SnapshotsResponse_default_instance_);
}
inline const ::tendermint::statesync::SnapshotsResponse& Message::snapshots_response() const {
  // @@protoc_insertion_point(field_get:tendermint.statesync.Message.snapshots_response)
  return _internal_snapshots_response();
}
inline ::tendermint::statesync::SnapshotsResponse* Message::unsafe_arena_release_snapshots_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.statesync.Message.snapshots_response)
  if (_internal_has_snapshots_response()) {
    clear_has_sum();
    ::tendermint::statesync::SnapshotsResponse* temp = sum_.snapshots_response_;
    sum_.snapshots_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_snapshots_response(::tendermint::statesync::SnapshotsResponse* snapshots_response) {
  clear_sum();
  if (snapshots_response) {
    set_has_snapshots_response();
    sum_.snapshots_response_ = snapshots_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.statesync.Message.snapshots_response)
}
inline ::tendermint::statesync::SnapshotsResponse* Message::_internal_mutable_snapshots_response() {
  if (!_internal_has_snapshots_response()) {
    clear_sum();
    set_has_snapshots_response();
    sum_.snapshots_response_ = CreateMaybeMessage< ::tendermint::statesync::SnapshotsResponse >(GetArenaForAllocation());
  }
  return sum_.snapshots_response_;
}
inline ::tendermint::statesync::SnapshotsResponse* Message::mutable_snapshots_response() {
  ::tendermint::statesync::SnapshotsResponse* _msg = _internal_mutable_snapshots_response();
  // @@protoc_insertion_point(field_mutable:tendermint.statesync.Message.snapshots_response)
  return _msg;
}

// .tendermint.statesync.ChunkRequest chunk_request = 3;
inline bool Message::_internal_has_chunk_request() const {
  return sum_case() == kChunkRequest;
}
inline bool Message::has_chunk_request() const {
  return _internal_has_chunk_request();
}
inline void Message::set_has_chunk_request() {
  _oneof_case_[0] = kChunkRequest;
}
inline void Message::clear_chunk_request() {
  if (_internal_has_chunk_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sum_.chunk_request_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::statesync::ChunkRequest* Message::release_chunk_request() {
  // @@protoc_insertion_point(field_release:tendermint.statesync.Message.chunk_request)
  if (_internal_has_chunk_request()) {
    clear_has_sum();
      ::tendermint::statesync::ChunkRequest* temp = sum_.chunk_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sum_.chunk_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::statesync::ChunkRequest& Message::_internal_chunk_request() const {
  return _internal_has_chunk_request()
      ? *sum_.chunk_request_
      : reinterpret_cast< ::tendermint::statesync::ChunkRequest&>(::tendermint::statesync::_ChunkRequest_default_instance_);
}
inline const ::tendermint::statesync::ChunkRequest& Message::chunk_request() const {
  // @@protoc_insertion_point(field_get:tendermint.statesync.Message.chunk_request)
  return _internal_chunk_request();
}
inline ::tendermint::statesync::ChunkRequest* Message::unsafe_arena_release_chunk_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.statesync.Message.chunk_request)
  if (_internal_has_chunk_request()) {
    clear_has_sum();
    ::tendermint::statesync::ChunkRequest* temp = sum_.chunk_request_;
    sum_.chunk_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_chunk_request(::tendermint::statesync::ChunkRequest* chunk_request) {
  clear_sum();
  if (chunk_request) {
    set_has_chunk_request();
    sum_.chunk_request_ = chunk_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.statesync.Message.chunk_request)
}
inline ::tendermint::statesync::ChunkRequest* Message::_internal_mutable_chunk_request() {
  if (!_internal_has_chunk_request()) {
    clear_sum();
    set_has_chunk_request();
    sum_.chunk_request_ = CreateMaybeMessage< ::tendermint::statesync::ChunkRequest >(GetArenaForAllocation());
  }
  return sum_.chunk_request_;
}
inline ::tendermint::statesync::ChunkRequest* Message::mutable_chunk_request() {
  ::tendermint::statesync::ChunkRequest* _msg = _internal_mutable_chunk_request();
  // @@protoc_insertion_point(field_mutable:tendermint.statesync.Message.chunk_request)
  return _msg;
}

// .tendermint.statesync.ChunkResponse chunk_response = 4;
inline bool Message::_internal_has_chunk_response() const {
  return sum_case() == kChunkResponse;
}
inline bool Message::has_chunk_response() const {
  return _internal_has_chunk_response();
}
inline void Message::set_has_chunk_response() {
  _oneof_case_[0] = kChunkResponse;
}
inline void Message::clear_chunk_response() {
  if (_internal_has_chunk_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sum_.chunk_response_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::statesync::ChunkResponse* Message::release_chunk_response() {
  // @@protoc_insertion_point(field_release:tendermint.statesync.Message.chunk_response)
  if (_internal_has_chunk_response()) {
    clear_has_sum();
      ::tendermint::statesync::ChunkResponse* temp = sum_.chunk_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sum_.chunk_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::statesync::ChunkResponse& Message::_internal_chunk_response() const {
  return _internal_has_chunk_response()
      ? *sum_.chunk_response_
      : reinterpret_cast< ::tendermint::statesync::ChunkResponse&>(::tendermint::statesync::_ChunkResponse_default_instance_);
}
inline const ::tendermint::statesync::ChunkResponse& Message::chunk_response() const {
  // @@protoc_insertion_point(field_get:tendermint.statesync.Message.chunk_response)
  return _internal_chunk_response();
}
inline ::tendermint::statesync::ChunkResponse* Message::unsafe_arena_release_chunk_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.statesync.Message.chunk_response)
  if (_internal_has_chunk_response()) {
    clear_has_sum();
    ::tendermint::statesync::ChunkResponse* temp = sum_.chunk_response_;
    sum_.chunk_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_chunk_response(::tendermint::statesync::ChunkResponse* chunk_response) {
  clear_sum();
  if (chunk_response) {
    set_has_chunk_response();
    sum_.chunk_response_ = chunk_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.statesync.Message.chunk_response)
}
inline ::tendermint::statesync::ChunkResponse* Message::_internal_mutable_chunk_response() {
  if (!_internal_has_chunk_response()) {
    clear_sum();
    set_has_chunk_response();
    sum_.chunk_response_ = CreateMaybeMessage< ::tendermint::statesync::ChunkResponse >(GetArenaForAllocation());
  }
  return sum_.chunk_response_;
}
inline ::tendermint::statesync::ChunkResponse* Message::mutable_chunk_response() {
  ::tendermint::statesync::ChunkResponse* _msg = _internal_mutable_chunk_response();
  // @@protoc_insertion_point(field_mutable:tendermint.statesync.Message.chunk_response)
  return _msg;
}

inline bool Message::has_sum() const {
  return sum_case() != SUM_NOT_SET;
}
inline void Message::clear_has_sum() {
  _oneof_case_[0] = SUM_NOT_SET;
}
inline Message::SumCase Message::sum_case() const {
  return Message::SumCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SnapshotsRequest

// -------------------------------------------------------------------

// SnapshotsResponse

// uint64 height = 1;
inline void SnapshotsResponse::clear_height() {
  height_ = uint64_t{0u};
}
inline uint64_t SnapshotsResponse::_internal_height() const {
  return height_;
}
inline uint64_t SnapshotsResponse::height() const {
  // @@protoc_insertion_point(field_get:tendermint.statesync.SnapshotsResponse.height)
  return _internal_height();
}
inline void SnapshotsResponse::_internal_set_height(uint64_t value) {
  
  height_ = value;
}
inline void SnapshotsResponse::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.statesync.SnapshotsResponse.height)
}

// uint32 format = 2;
inline void SnapshotsResponse::clear_format() {
  format_ = 0u;
}
inline uint32_t SnapshotsResponse::_internal_format() const {
  return format_;
}
inline uint32_t SnapshotsResponse::format() const {
  // @@protoc_insertion_point(field_get:tendermint.statesync.SnapshotsResponse.format)
  return _internal_format();
}
inline void SnapshotsResponse::_internal_set_format(uint32_t value) {
  
  format_ = value;
}
inline void SnapshotsResponse::set_format(uint32_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:tendermint.statesync.SnapshotsResponse.format)
}

// uint32 chunks = 3;
inline void SnapshotsResponse::clear_chunks() {
  chunks_ = 0u;
}
inline uint32_t SnapshotsResponse::_internal_chunks() const {
  return chunks_;
}
inline uint32_t SnapshotsResponse::chunks() const {
  // @@protoc_insertion_point(field_get:tendermint.statesync.SnapshotsResponse.chunks)
  return _internal_chunks();
}
inline void SnapshotsResponse::_internal_set_chunks(uint32_t value) {
  
  chunks_ = value;
}
inline void SnapshotsResponse::set_chunks(uint32_t value) {
  _internal_set_chunks(value);
  // @@protoc_insertion_point(field_set:tendermint.statesync.SnapshotsResponse.chunks)
}

// bytes hash = 4;
inline void SnapshotsResponse::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& SnapshotsResponse::hash() const {
  // @@protoc_insertion_point(field_get:tendermint.statesync.SnapshotsResponse.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SnapshotsResponse::set_hash(ArgT0&& arg0, ArgT... args) {
 
 hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.statesync.SnapshotsResponse.hash)
}
inline std::string* SnapshotsResponse::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.statesync.SnapshotsResponse.hash)
  return _s;
}
inline const std::string& SnapshotsResponse::_internal_hash() const {
  return hash_.Get();
}
inline void SnapshotsResponse::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SnapshotsResponse::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SnapshotsResponse::release_hash() {
  // @@protoc_insertion_point(field_release:tendermint.statesync.SnapshotsResponse.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SnapshotsResponse::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.statesync.SnapshotsResponse.hash)
}

// bytes metadata = 5;
inline void SnapshotsResponse::clear_metadata() {
  metadata_.ClearToEmpty();
}
inline const std::string& SnapshotsResponse::metadata() const {
  // @@protoc_insertion_point(field_get:tendermint.statesync.SnapshotsResponse.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SnapshotsResponse::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 metadata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.statesync.SnapshotsResponse.metadata)
}
inline std::string* SnapshotsResponse::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:tendermint.statesync.SnapshotsResponse.metadata)
  return _s;
}
inline const std::string& SnapshotsResponse::_internal_metadata() const {
  return metadata_.Get();
}
inline void SnapshotsResponse::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SnapshotsResponse::_internal_mutable_metadata() {
  
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SnapshotsResponse::release_metadata() {
  // @@protoc_insertion_point(field_release:tendermint.statesync.SnapshotsResponse.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SnapshotsResponse::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.statesync.SnapshotsResponse.metadata)
}

// -------------------------------------------------------------------

// ChunkRequest

// uint64 height = 1;
inline void ChunkRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline uint64_t ChunkRequest::_internal_height() const {
  return height_;
}
inline uint64_t ChunkRequest::height() const {
  // @@protoc_insertion_point(field_get:tendermint.statesync.ChunkRequest.height)
  return _internal_height();
}
inline void ChunkRequest::_internal_set_height(uint64_t value) {
  
  height_ = value;
}
inline void ChunkRequest::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.statesync.ChunkRequest.height)
}

// uint32 format = 2;
inline void ChunkRequest::clear_format() {
  format_ = 0u;
}
inline uint32_t ChunkRequest::_internal_format() const {
  return format_;
}
inline uint32_t ChunkRequest::format() const {
  // @@protoc_insertion_point(field_get:tendermint.statesync.ChunkRequest.format)
  return _internal_format();
}
inline void ChunkRequest::_internal_set_format(uint32_t value) {
  
  format_ = value;
}
inline void ChunkRequest::set_format(uint32_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:tendermint.statesync.ChunkRequest.format)
}

// uint32 index = 3;
inline void ChunkRequest::clear_index() {
  index_ = 0u;
}
inline uint32_t ChunkRequest::_internal_index() const {
  return index_;
}
inline uint32_t ChunkRequest::index() const {
  // @@protoc_insertion_point(field_get:tendermint.statesync.ChunkRequest.index)
  return _internal_index();
}
inline void ChunkRequest::_internal_set_index(uint32_t value) {
  
  index_ = value;
}
inline void ChunkRequest::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:tendermint.statesync.ChunkRequest.index)
}

// -------------------------------------------------------------------

// ChunkResponse

// uint64 height = 1;
inline void ChunkResponse::clear_height() {
  height_ = uint64_t{0u};
}
inline uint64_t ChunkResponse::_internal_height() const {
  return height_;
}
inline uint64_t ChunkResponse::height() const {
  // @@protoc_insertion_point(field_get:tendermint.statesync.ChunkResponse.height)
  return _internal_height();
}
inline void ChunkResponse::_internal_set_height(uint64_t value) {
  
  height_ = value;
}
inline void ChunkResponse::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.statesync.ChunkResponse.height)
}

// uint32 format = 2;
inline void ChunkResponse::clear_format() {
  format_ = 0u;
}
inline uint32_t ChunkResponse::_internal_format() const {
  return format_;
}
inline uint32_t ChunkResponse::format() const {
  // @@protoc_insertion_point(field_get:tendermint.statesync.ChunkResponse.format)
  return _internal_format();
}
inline void ChunkResponse::_internal_set_format(uint32_t value) {
  
  format_ = value;
}
inline void ChunkResponse::set_format(uint32_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:tendermint.statesync.ChunkResponse.format)
}

// uint32 index = 3;
inline void ChunkResponse::clear_index() {
  index_ = 0u;
}
inline uint32_t ChunkResponse::_internal_index() const {
  return index_;
}
inline uint32_t ChunkResponse::index() const {
  // @@protoc_insertion_point(field_get:tendermint.statesync.ChunkResponse.index)
  return _internal_index();
}
inline void ChunkResponse::_internal_set_index(uint32_t value) {
  
  index_ = value;
}
inline void ChunkResponse::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:tendermint.statesync.ChunkResponse.index)
}

// bytes chunk = 4;
inline void ChunkResponse::clear_chunk() {
  chunk_.ClearToEmpty();
}
inline const std::string& ChunkResponse::chunk() const {
  // @@protoc_insertion_point(field_get:tendermint.statesync.ChunkResponse.chunk)
  return _internal_chunk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChunkResponse::set_chunk(ArgT0&& arg0, ArgT... args) {
 
 chunk_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.statesync.ChunkResponse.chunk)
}
inline std::string* ChunkResponse::mutable_chunk() {
  std::string* _s = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:tendermint.statesync.ChunkResponse.chunk)
  return _s;
}
inline const std::string& ChunkResponse::_internal_chunk() const {
  return chunk_.Get();
}
inline void ChunkResponse::_internal_set_chunk(const std::string& value) {
  
  chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChunkResponse::_internal_mutable_chunk() {
  
  return chunk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChunkResponse::release_chunk() {
  // @@protoc_insertion_point(field_release:tendermint.statesync.ChunkResponse.chunk)
  return chunk_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChunkResponse::set_allocated_chunk(std::string* chunk) {
  if (chunk != nullptr) {
    
  } else {
    
  }
  chunk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chunk,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chunk_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chunk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.statesync.ChunkResponse.chunk)
}

// bool missing = 5;
inline void ChunkResponse::clear_missing() {
  missing_ = false;
}
inline bool ChunkResponse::_internal_missing() const {
  return missing_;
}
inline bool ChunkResponse::missing() const {
  // @@protoc_insertion_point(field_get:tendermint.statesync.ChunkResponse.missing)
  return _internal_missing();
}
inline void ChunkResponse::_internal_set_missing(bool value) {
  
  missing_ = value;
}
inline void ChunkResponse::set_missing(bool value) {
  _internal_set_missing(value);
  // @@protoc_insertion_point(field_set:tendermint.statesync.ChunkResponse.missing)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace statesync
}  // namespace tendermint

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tendermint_2fstatesync_2ftypes_2eproto
