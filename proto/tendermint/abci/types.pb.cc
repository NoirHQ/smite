// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/abci/types.proto

#include "tendermint/abci/types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tendermint {
namespace abci {
constexpr Request::Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct RequestDefaultTypeInternal {
  constexpr RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestDefaultTypeInternal _Request_default_instance_;
constexpr RequestEcho::RequestEcho(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RequestEchoDefaultTypeInternal {
  constexpr RequestEchoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestEchoDefaultTypeInternal() {}
  union {
    RequestEcho _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestEchoDefaultTypeInternal _RequestEcho_default_instance_;
constexpr RequestFlush::RequestFlush(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RequestFlushDefaultTypeInternal {
  constexpr RequestFlushDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestFlushDefaultTypeInternal() {}
  union {
    RequestFlush _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestFlushDefaultTypeInternal _RequestFlush_default_instance_;
constexpr RequestInfo::RequestInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_version_(uint64_t{0u})
  , p2p_version_(uint64_t{0u}){}
struct RequestInfoDefaultTypeInternal {
  constexpr RequestInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestInfoDefaultTypeInternal() {}
  union {
    RequestInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestInfoDefaultTypeInternal _RequestInfo_default_instance_;
constexpr RequestSetOption::RequestSetOption(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RequestSetOptionDefaultTypeInternal {
  constexpr RequestSetOptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestSetOptionDefaultTypeInternal() {}
  union {
    RequestSetOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestSetOptionDefaultTypeInternal _RequestSetOption_default_instance_;
constexpr RequestInitChain::RequestInitChain(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : validators_()
  , chain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_state_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_(nullptr)
  , consensus_params_(nullptr)
  , initial_height_(int64_t{0}){}
struct RequestInitChainDefaultTypeInternal {
  constexpr RequestInitChainDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestInitChainDefaultTypeInternal() {}
  union {
    RequestInitChain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestInitChainDefaultTypeInternal _RequestInitChain_default_instance_;
constexpr RequestQuery::RequestQuery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(int64_t{0})
  , prove_(false){}
struct RequestQueryDefaultTypeInternal {
  constexpr RequestQueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestQueryDefaultTypeInternal() {}
  union {
    RequestQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestQueryDefaultTypeInternal _RequestQuery_default_instance_;
constexpr RequestBeginBlock::RequestBeginBlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : byzantine_validators_()
  , hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , last_commit_info_(nullptr){}
struct RequestBeginBlockDefaultTypeInternal {
  constexpr RequestBeginBlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestBeginBlockDefaultTypeInternal() {}
  union {
    RequestBeginBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestBeginBlockDefaultTypeInternal _RequestBeginBlock_default_instance_;
constexpr RequestCheckTx::RequestCheckTx(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tx_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct RequestCheckTxDefaultTypeInternal {
  constexpr RequestCheckTxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestCheckTxDefaultTypeInternal() {}
  union {
    RequestCheckTx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestCheckTxDefaultTypeInternal _RequestCheckTx_default_instance_;
constexpr RequestDeliverTx::RequestDeliverTx(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tx_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RequestDeliverTxDefaultTypeInternal {
  constexpr RequestDeliverTxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestDeliverTxDefaultTypeInternal() {}
  union {
    RequestDeliverTx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestDeliverTxDefaultTypeInternal _RequestDeliverTx_default_instance_;
constexpr RequestEndBlock::RequestEndBlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(int64_t{0}){}
struct RequestEndBlockDefaultTypeInternal {
  constexpr RequestEndBlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestEndBlockDefaultTypeInternal() {}
  union {
    RequestEndBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestEndBlockDefaultTypeInternal _RequestEndBlock_default_instance_;
constexpr RequestCommit::RequestCommit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RequestCommitDefaultTypeInternal {
  constexpr RequestCommitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestCommitDefaultTypeInternal() {}
  union {
    RequestCommit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestCommitDefaultTypeInternal _RequestCommit_default_instance_;
constexpr RequestListSnapshots::RequestListSnapshots(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RequestListSnapshotsDefaultTypeInternal {
  constexpr RequestListSnapshotsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestListSnapshotsDefaultTypeInternal() {}
  union {
    RequestListSnapshots _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestListSnapshotsDefaultTypeInternal _RequestListSnapshots_default_instance_;
constexpr RequestOfferSnapshot::RequestOfferSnapshot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , snapshot_(nullptr){}
struct RequestOfferSnapshotDefaultTypeInternal {
  constexpr RequestOfferSnapshotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestOfferSnapshotDefaultTypeInternal() {}
  union {
    RequestOfferSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestOfferSnapshotDefaultTypeInternal _RequestOfferSnapshot_default_instance_;
constexpr RequestLoadSnapshotChunk::RequestLoadSnapshotChunk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(uint64_t{0u})
  , format_(0u)
  , chunk_(0u){}
struct RequestLoadSnapshotChunkDefaultTypeInternal {
  constexpr RequestLoadSnapshotChunkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestLoadSnapshotChunkDefaultTypeInternal() {}
  union {
    RequestLoadSnapshotChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestLoadSnapshotChunkDefaultTypeInternal _RequestLoadSnapshotChunk_default_instance_;
constexpr RequestApplySnapshotChunk::RequestApplySnapshotChunk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(0u){}
struct RequestApplySnapshotChunkDefaultTypeInternal {
  constexpr RequestApplySnapshotChunkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestApplySnapshotChunkDefaultTypeInternal() {}
  union {
    RequestApplySnapshotChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestApplySnapshotChunkDefaultTypeInternal _RequestApplySnapshotChunk_default_instance_;
constexpr Response::Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ResponseDefaultTypeInternal {
  constexpr ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseDefaultTypeInternal _Response_default_instance_;
constexpr ResponseException::ResponseException(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ResponseExceptionDefaultTypeInternal {
  constexpr ResponseExceptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseExceptionDefaultTypeInternal() {}
  union {
    ResponseException _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseExceptionDefaultTypeInternal _ResponseException_default_instance_;
constexpr ResponseEcho::ResponseEcho(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ResponseEchoDefaultTypeInternal {
  constexpr ResponseEchoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseEchoDefaultTypeInternal() {}
  union {
    ResponseEcho _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseEchoDefaultTypeInternal _ResponseEcho_default_instance_;
constexpr ResponseFlush::ResponseFlush(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ResponseFlushDefaultTypeInternal {
  constexpr ResponseFlushDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseFlushDefaultTypeInternal() {}
  union {
    ResponseFlush _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseFlushDefaultTypeInternal _ResponseFlush_default_instance_;
constexpr ResponseInfo::ResponseInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_block_app_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_version_(uint64_t{0u})
  , last_block_height_(int64_t{0}){}
struct ResponseInfoDefaultTypeInternal {
  constexpr ResponseInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseInfoDefaultTypeInternal() {}
  union {
    ResponseInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseInfoDefaultTypeInternal _ResponseInfo_default_instance_;
constexpr ResponseSetOption::ResponseSetOption(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : log_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(0u){}
struct ResponseSetOptionDefaultTypeInternal {
  constexpr ResponseSetOptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseSetOptionDefaultTypeInternal() {}
  union {
    ResponseSetOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseSetOptionDefaultTypeInternal _ResponseSetOption_default_instance_;
constexpr ResponseInitChain::ResponseInitChain(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : validators_()
  , app_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , consensus_params_(nullptr){}
struct ResponseInitChainDefaultTypeInternal {
  constexpr ResponseInitChainDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseInitChainDefaultTypeInternal() {}
  union {
    ResponseInitChain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseInitChainDefaultTypeInternal _ResponseInitChain_default_instance_;
constexpr ResponseQuery::ResponseQuery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : log_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , codespace_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proof_ops_(nullptr)
  , index_(int64_t{0})
  , height_(int64_t{0})
  , code_(0u){}
struct ResponseQueryDefaultTypeInternal {
  constexpr ResponseQueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseQueryDefaultTypeInternal() {}
  union {
    ResponseQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseQueryDefaultTypeInternal _ResponseQuery_default_instance_;
constexpr ResponseBeginBlock::ResponseBeginBlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_(){}
struct ResponseBeginBlockDefaultTypeInternal {
  constexpr ResponseBeginBlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseBeginBlockDefaultTypeInternal() {}
  union {
    ResponseBeginBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseBeginBlockDefaultTypeInternal _ResponseBeginBlock_default_instance_;
constexpr ResponseCheckTx::ResponseCheckTx(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , log_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , codespace_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gas_wanted_(int64_t{0})
  , gas_used_(int64_t{0})
  , code_(0u){}
struct ResponseCheckTxDefaultTypeInternal {
  constexpr ResponseCheckTxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseCheckTxDefaultTypeInternal() {}
  union {
    ResponseCheckTx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseCheckTxDefaultTypeInternal _ResponseCheckTx_default_instance_;
constexpr ResponseDeliverTx::ResponseDeliverTx(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , log_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , codespace_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gas_wanted_(int64_t{0})
  , gas_used_(int64_t{0})
  , code_(0u){}
struct ResponseDeliverTxDefaultTypeInternal {
  constexpr ResponseDeliverTxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseDeliverTxDefaultTypeInternal() {}
  union {
    ResponseDeliverTx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseDeliverTxDefaultTypeInternal _ResponseDeliverTx_default_instance_;
constexpr ResponseEndBlock::ResponseEndBlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : validator_updates_()
  , events_()
  , consensus_param_updates_(nullptr){}
struct ResponseEndBlockDefaultTypeInternal {
  constexpr ResponseEndBlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseEndBlockDefaultTypeInternal() {}
  union {
    ResponseEndBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseEndBlockDefaultTypeInternal _ResponseEndBlock_default_instance_;
constexpr ResponseCommit::ResponseCommit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , retain_height_(int64_t{0}){}
struct ResponseCommitDefaultTypeInternal {
  constexpr ResponseCommitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseCommitDefaultTypeInternal() {}
  union {
    ResponseCommit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseCommitDefaultTypeInternal _ResponseCommit_default_instance_;
constexpr ResponseListSnapshots::ResponseListSnapshots(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : snapshots_(){}
struct ResponseListSnapshotsDefaultTypeInternal {
  constexpr ResponseListSnapshotsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseListSnapshotsDefaultTypeInternal() {}
  union {
    ResponseListSnapshots _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseListSnapshotsDefaultTypeInternal _ResponseListSnapshots_default_instance_;
constexpr ResponseOfferSnapshot::ResponseOfferSnapshot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct ResponseOfferSnapshotDefaultTypeInternal {
  constexpr ResponseOfferSnapshotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseOfferSnapshotDefaultTypeInternal() {}
  union {
    ResponseOfferSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseOfferSnapshotDefaultTypeInternal _ResponseOfferSnapshot_default_instance_;
constexpr ResponseLoadSnapshotChunk::ResponseLoadSnapshotChunk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ResponseLoadSnapshotChunkDefaultTypeInternal {
  constexpr ResponseLoadSnapshotChunkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseLoadSnapshotChunkDefaultTypeInternal() {}
  union {
    ResponseLoadSnapshotChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseLoadSnapshotChunkDefaultTypeInternal _ResponseLoadSnapshotChunk_default_instance_;
constexpr ResponseApplySnapshotChunk::ResponseApplySnapshotChunk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : refetch_chunks_()
  , _refetch_chunks_cached_byte_size_(0)
  , reject_senders_()
  , result_(0)
{}
struct ResponseApplySnapshotChunkDefaultTypeInternal {
  constexpr ResponseApplySnapshotChunkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseApplySnapshotChunkDefaultTypeInternal() {}
  union {
    ResponseApplySnapshotChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseApplySnapshotChunkDefaultTypeInternal _ResponseApplySnapshotChunk_default_instance_;
constexpr ConsensusParams::ConsensusParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_(nullptr)
  , evidence_(nullptr)
  , validator_(nullptr)
  , version_(nullptr){}
struct ConsensusParamsDefaultTypeInternal {
  constexpr ConsensusParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConsensusParamsDefaultTypeInternal() {}
  union {
    ConsensusParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConsensusParamsDefaultTypeInternal _ConsensusParams_default_instance_;
constexpr BlockParams::BlockParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_bytes_(int64_t{0})
  , max_gas_(int64_t{0}){}
struct BlockParamsDefaultTypeInternal {
  constexpr BlockParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockParamsDefaultTypeInternal() {}
  union {
    BlockParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockParamsDefaultTypeInternal _BlockParams_default_instance_;
constexpr LastCommitInfo::LastCommitInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : votes_()
  , round_(0){}
struct LastCommitInfoDefaultTypeInternal {
  constexpr LastCommitInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LastCommitInfoDefaultTypeInternal() {}
  union {
    LastCommitInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LastCommitInfoDefaultTypeInternal _LastCommitInfo_default_instance_;
constexpr Event::Event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attributes_()
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct EventDefaultTypeInternal {
  constexpr EventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventDefaultTypeInternal _Event_default_instance_;
constexpr EventAttribute::EventAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(false){}
struct EventAttributeDefaultTypeInternal {
  constexpr EventAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventAttributeDefaultTypeInternal() {}
  union {
    EventAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventAttributeDefaultTypeInternal _EventAttribute_default_instance_;
constexpr TxResult::TxResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tx_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(nullptr)
  , height_(int64_t{0})
  , index_(0u){}
struct TxResultDefaultTypeInternal {
  constexpr TxResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TxResultDefaultTypeInternal() {}
  union {
    TxResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TxResultDefaultTypeInternal _TxResult_default_instance_;
constexpr Validator::Validator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , power_(int64_t{0}){}
struct ValidatorDefaultTypeInternal {
  constexpr ValidatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidatorDefaultTypeInternal() {}
  union {
    Validator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidatorDefaultTypeInternal _Validator_default_instance_;
constexpr ValidatorUpdate::ValidatorUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pub_key_(nullptr)
  , power_(int64_t{0}){}
struct ValidatorUpdateDefaultTypeInternal {
  constexpr ValidatorUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidatorUpdateDefaultTypeInternal() {}
  union {
    ValidatorUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidatorUpdateDefaultTypeInternal _ValidatorUpdate_default_instance_;
constexpr VoteInfo::VoteInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : validator_(nullptr)
  , signed_last_block_(false){}
struct VoteInfoDefaultTypeInternal {
  constexpr VoteInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoteInfoDefaultTypeInternal() {}
  union {
    VoteInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoteInfoDefaultTypeInternal _VoteInfo_default_instance_;
constexpr Evidence::Evidence(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : validator_(nullptr)
  , time_(nullptr)
  , height_(int64_t{0})
  , total_voting_power_(int64_t{0})
  , type_(0)
{}
struct EvidenceDefaultTypeInternal {
  constexpr EvidenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EvidenceDefaultTypeInternal() {}
  union {
    Evidence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EvidenceDefaultTypeInternal _Evidence_default_instance_;
constexpr Snapshot::Snapshot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(uint64_t{0u})
  , format_(0u)
  , chunks_(0u){}
struct SnapshotDefaultTypeInternal {
  constexpr SnapshotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnapshotDefaultTypeInternal() {}
  union {
    Snapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnapshotDefaultTypeInternal _Snapshot_default_instance_;
}  // namespace abci
}  // namespace tendermint
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tendermint_2fabci_2ftypes_2eproto[44];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tendermint_2fabci_2ftypes_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tendermint_2fabci_2ftypes_2eproto = nullptr;

const uint32_t TableStruct_tendermint_2fabci_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Request, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestEcho, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestEcho, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestFlush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInfo, version_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInfo, block_version_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInfo, p2p_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestSetOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestSetOption, key_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestSetOption, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInitChain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInitChain, time_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInitChain, chain_id_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInitChain, consensus_params_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInitChain, validators_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInitChain, app_state_bytes_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInitChain, initial_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestQuery, data_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestQuery, path_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestQuery, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestQuery, prove_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestBeginBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestBeginBlock, hash_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestBeginBlock, header_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestBeginBlock, last_commit_info_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestBeginBlock, byzantine_validators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestCheckTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestCheckTx, tx_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestCheckTx, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestDeliverTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestDeliverTx, tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestEndBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestEndBlock, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestListSnapshots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestOfferSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestOfferSnapshot, snapshot_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestOfferSnapshot, app_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestLoadSnapshotChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestLoadSnapshotChunk, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestLoadSnapshotChunk, format_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestLoadSnapshotChunk, chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestApplySnapshotChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestApplySnapshotChunk, index_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestApplySnapshotChunk, chunk_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestApplySnapshotChunk, sender_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Response, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseException, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseException, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseEcho, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseEcho, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseFlush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseInfo, data_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseInfo, version_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseInfo, app_version_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseInfo, last_block_height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseInfo, last_block_app_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseSetOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseSetOption, code_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseSetOption, log_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseSetOption, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseInitChain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseInitChain, consensus_params_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseInitChain, validators_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseInitChain, app_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseQuery, code_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseQuery, log_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseQuery, info_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseQuery, index_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseQuery, key_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseQuery, value_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseQuery, proof_ops_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseQuery, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseQuery, codespace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseBeginBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseBeginBlock, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, code_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, data_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, log_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, info_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, gas_wanted_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, gas_used_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, events_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, codespace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseDeliverTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseDeliverTx, code_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseDeliverTx, data_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseDeliverTx, log_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseDeliverTx, info_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseDeliverTx, gas_wanted_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseDeliverTx, gas_used_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseDeliverTx, events_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseDeliverTx, codespace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseEndBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseEndBlock, validator_updates_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseEndBlock, consensus_param_updates_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseEndBlock, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCommit, data_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCommit, retain_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseListSnapshots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseListSnapshots, snapshots_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseOfferSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseOfferSnapshot, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseLoadSnapshotChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseLoadSnapshotChunk, chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseApplySnapshotChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseApplySnapshotChunk, result_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseApplySnapshotChunk, refetch_chunks_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseApplySnapshotChunk, reject_senders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ConsensusParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ConsensusParams, block_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ConsensusParams, evidence_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ConsensusParams, validator_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ConsensusParams, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::BlockParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::BlockParams, max_bytes_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::BlockParams, max_gas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::LastCommitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::LastCommitInfo, round_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::LastCommitInfo, votes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Event, type_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Event, attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::EventAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::EventAttribute, key_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::EventAttribute, value_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::EventAttribute, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::TxResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::TxResult, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::TxResult, index_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::TxResult, tx_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::TxResult, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Validator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Validator, address_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Validator, power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ValidatorUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ValidatorUpdate, pub_key_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ValidatorUpdate, power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::VoteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::VoteInfo, validator_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::VoteInfo, signed_last_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Evidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Evidence, type_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Evidence, validator_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Evidence, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Evidence, time_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Evidence, total_voting_power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Snapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Snapshot, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Snapshot, format_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Snapshot, chunks_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Snapshot, hash_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Snapshot, metadata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tendermint::abci::Request)},
  { 22, -1, -1, sizeof(::tendermint::abci::RequestEcho)},
  { 29, -1, -1, sizeof(::tendermint::abci::RequestFlush)},
  { 35, -1, -1, sizeof(::tendermint::abci::RequestInfo)},
  { 44, -1, -1, sizeof(::tendermint::abci::RequestSetOption)},
  { 52, -1, -1, sizeof(::tendermint::abci::RequestInitChain)},
  { 64, -1, -1, sizeof(::tendermint::abci::RequestQuery)},
  { 74, -1, -1, sizeof(::tendermint::abci::RequestBeginBlock)},
  { 84, -1, -1, sizeof(::tendermint::abci::RequestCheckTx)},
  { 92, -1, -1, sizeof(::tendermint::abci::RequestDeliverTx)},
  { 99, -1, -1, sizeof(::tendermint::abci::RequestEndBlock)},
  { 106, -1, -1, sizeof(::tendermint::abci::RequestCommit)},
  { 112, -1, -1, sizeof(::tendermint::abci::RequestListSnapshots)},
  { 118, -1, -1, sizeof(::tendermint::abci::RequestOfferSnapshot)},
  { 126, -1, -1, sizeof(::tendermint::abci::RequestLoadSnapshotChunk)},
  { 135, -1, -1, sizeof(::tendermint::abci::RequestApplySnapshotChunk)},
  { 144, -1, -1, sizeof(::tendermint::abci::Response)},
  { 167, -1, -1, sizeof(::tendermint::abci::ResponseException)},
  { 174, -1, -1, sizeof(::tendermint::abci::ResponseEcho)},
  { 181, -1, -1, sizeof(::tendermint::abci::ResponseFlush)},
  { 187, -1, -1, sizeof(::tendermint::abci::ResponseInfo)},
  { 198, -1, -1, sizeof(::tendermint::abci::ResponseSetOption)},
  { 207, -1, -1, sizeof(::tendermint::abci::ResponseInitChain)},
  { 216, -1, -1, sizeof(::tendermint::abci::ResponseQuery)},
  { 231, -1, -1, sizeof(::tendermint::abci::ResponseBeginBlock)},
  { 238, -1, -1, sizeof(::tendermint::abci::ResponseCheckTx)},
  { 252, -1, -1, sizeof(::tendermint::abci::ResponseDeliverTx)},
  { 266, -1, -1, sizeof(::tendermint::abci::ResponseEndBlock)},
  { 275, -1, -1, sizeof(::tendermint::abci::ResponseCommit)},
  { 283, -1, -1, sizeof(::tendermint::abci::ResponseListSnapshots)},
  { 290, -1, -1, sizeof(::tendermint::abci::ResponseOfferSnapshot)},
  { 297, -1, -1, sizeof(::tendermint::abci::ResponseLoadSnapshotChunk)},
  { 304, -1, -1, sizeof(::tendermint::abci::ResponseApplySnapshotChunk)},
  { 313, -1, -1, sizeof(::tendermint::abci::ConsensusParams)},
  { 323, -1, -1, sizeof(::tendermint::abci::BlockParams)},
  { 331, -1, -1, sizeof(::tendermint::abci::LastCommitInfo)},
  { 339, -1, -1, sizeof(::tendermint::abci::Event)},
  { 347, -1, -1, sizeof(::tendermint::abci::EventAttribute)},
  { 356, -1, -1, sizeof(::tendermint::abci::TxResult)},
  { 366, -1, -1, sizeof(::tendermint::abci::Validator)},
  { 374, -1, -1, sizeof(::tendermint::abci::ValidatorUpdate)},
  { 382, -1, -1, sizeof(::tendermint::abci::VoteInfo)},
  { 390, -1, -1, sizeof(::tendermint::abci::Evidence)},
  { 401, -1, -1, sizeof(::tendermint::abci::Snapshot)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_RequestEcho_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_RequestFlush_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_RequestInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_RequestSetOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_RequestInitChain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_RequestQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_RequestBeginBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_RequestCheckTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_RequestDeliverTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_RequestEndBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_RequestCommit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_RequestListSnapshots_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_RequestOfferSnapshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_RequestLoadSnapshotChunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_RequestApplySnapshotChunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_ResponseException_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_ResponseEcho_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_ResponseFlush_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_ResponseInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_ResponseSetOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_ResponseInitChain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_ResponseQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_ResponseBeginBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_ResponseCheckTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_ResponseDeliverTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_ResponseEndBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_ResponseCommit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_ResponseListSnapshots_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_ResponseOfferSnapshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_ResponseLoadSnapshotChunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_ResponseApplySnapshotChunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_ConsensusParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_BlockParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_LastCommitInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_EventAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_TxResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_Validator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_ValidatorUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_VoteInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_Evidence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::abci::_Snapshot_default_instance_),
};

const char descriptor_table_protodef_tendermint_2fabci_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033tendermint/abci/types.proto\022\017tendermin"
  "t.abci\032\035tendermint/crypto/proof.proto\032\034t"
  "endermint/types/types.proto\032\034tendermint/"
  "crypto/keys.proto\032\035tendermint/types/para"
  "ms.proto\032\037google/protobuf/timestamp.prot"
  "o\032\024gogoproto/gogo.proto\"\352\006\n\007Request\022,\n\004e"
  "cho\030\001 \001(\0132\034.tendermint.abci.RequestEchoH"
  "\000\022.\n\005flush\030\002 \001(\0132\035.tendermint.abci.Reque"
  "stFlushH\000\022,\n\004info\030\003 \001(\0132\034.tendermint.abc"
  "i.RequestInfoH\000\0227\n\nset_option\030\004 \001(\0132!.te"
  "ndermint.abci.RequestSetOptionH\000\0227\n\ninit"
  "_chain\030\005 \001(\0132!.tendermint.abci.RequestIn"
  "itChainH\000\022.\n\005query\030\006 \001(\0132\035.tendermint.ab"
  "ci.RequestQueryH\000\0229\n\013begin_block\030\007 \001(\0132\""
  ".tendermint.abci.RequestBeginBlockH\000\0223\n\010"
  "check_tx\030\010 \001(\0132\037.tendermint.abci.Request"
  "CheckTxH\000\0227\n\ndeliver_tx\030\t \001(\0132!.tendermi"
  "nt.abci.RequestDeliverTxH\000\0225\n\tend_block\030"
  "\n \001(\0132 .tendermint.abci.RequestEndBlockH"
  "\000\0220\n\006commit\030\013 \001(\0132\036.tendermint.abci.Requ"
  "estCommitH\000\022\?\n\016list_snapshots\030\014 \001(\0132%.te"
  "ndermint.abci.RequestListSnapshotsH\000\022\?\n\016"
  "offer_snapshot\030\r \001(\0132%.tendermint.abci.R"
  "equestOfferSnapshotH\000\022H\n\023load_snapshot_c"
  "hunk\030\016 \001(\0132).tendermint.abci.RequestLoad"
  "SnapshotChunkH\000\022J\n\024apply_snapshot_chunk\030"
  "\017 \001(\0132*.tendermint.abci.RequestApplySnap"
  "shotChunkH\000B\007\n\005value\"\036\n\013RequestEcho\022\017\n\007m"
  "essage\030\001 \001(\t\"\016\n\014RequestFlush\"J\n\013RequestI"
  "nfo\022\017\n\007version\030\001 \001(\t\022\025\n\rblock_version\030\002 "
  "\001(\004\022\023\n\013p2p_version\030\003 \001(\004\".\n\020RequestSetOp"
  "tion\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\201\002\n\020Req"
  "uestInitChain\0222\n\004time\030\001 \001(\0132\032.google.pro"
  "tobuf.TimestampB\010\310\336\037\000\220\337\037\001\022\020\n\010chain_id\030\002 "
  "\001(\t\022:\n\020consensus_params\030\003 \001(\0132 .tendermi"
  "nt.abci.ConsensusParams\022:\n\nvalidators\030\004 "
  "\003(\0132 .tendermint.abci.ValidatorUpdateB\004\310"
  "\336\037\000\022\027\n\017app_state_bytes\030\005 \001(\014\022\026\n\016initial_"
  "height\030\006 \001(\003\"I\n\014RequestQuery\022\014\n\004data\030\001 \001"
  "(\014\022\014\n\004path\030\002 \001(\t\022\016\n\006height\030\003 \001(\003\022\r\n\005prov"
  "e\030\004 \001(\010\"\321\001\n\021RequestBeginBlock\022\014\n\004hash\030\001 "
  "\001(\014\022.\n\006header\030\002 \001(\0132\030.tendermint.types.H"
  "eaderB\004\310\336\037\000\022\?\n\020last_commit_info\030\003 \001(\0132\037."
  "tendermint.abci.LastCommitInfoB\004\310\336\037\000\022=\n\024"
  "byzantine_validators\030\004 \003(\0132\031.tendermint."
  "abci.EvidenceB\004\310\336\037\000\"H\n\016RequestCheckTx\022\n\n"
  "\002tx\030\001 \001(\014\022*\n\004type\030\002 \001(\0162\034.tendermint.abc"
  "i.CheckTxType\"\036\n\020RequestDeliverTx\022\n\n\002tx\030"
  "\001 \001(\014\"!\n\017RequestEndBlock\022\016\n\006height\030\001 \001(\003"
  "\"\017\n\rRequestCommit\"\026\n\024RequestListSnapshot"
  "s\"U\n\024RequestOfferSnapshot\022+\n\010snapshot\030\001 "
  "\001(\0132\031.tendermint.abci.Snapshot\022\020\n\010app_ha"
  "sh\030\002 \001(\014\"I\n\030RequestLoadSnapshotChunk\022\016\n\006"
  "height\030\001 \001(\004\022\016\n\006format\030\002 \001(\r\022\r\n\005chunk\030\003 "
  "\001(\r\"I\n\031RequestApplySnapshotChunk\022\r\n\005inde"
  "x\030\001 \001(\r\022\r\n\005chunk\030\002 \001(\014\022\016\n\006sender\030\003 \001(\t\"\263"
  "\007\n\010Response\0227\n\texception\030\001 \001(\0132\".tenderm"
  "int.abci.ResponseExceptionH\000\022-\n\004echo\030\002 \001"
  "(\0132\035.tendermint.abci.ResponseEchoH\000\022/\n\005f"
  "lush\030\003 \001(\0132\036.tendermint.abci.ResponseFlu"
  "shH\000\022-\n\004info\030\004 \001(\0132\035.tendermint.abci.Res"
  "ponseInfoH\000\0228\n\nset_option\030\005 \001(\0132\".tender"
  "mint.abci.ResponseSetOptionH\000\0228\n\ninit_ch"
  "ain\030\006 \001(\0132\".tendermint.abci.ResponseInit"
  "ChainH\000\022/\n\005query\030\007 \001(\0132\036.tendermint.abci"
  ".ResponseQueryH\000\022:\n\013begin_block\030\010 \001(\0132#."
  "tendermint.abci.ResponseBeginBlockH\000\0224\n\010"
  "check_tx\030\t \001(\0132 .tendermint.abci.Respons"
  "eCheckTxH\000\0228\n\ndeliver_tx\030\n \001(\0132\".tenderm"
  "int.abci.ResponseDeliverTxH\000\0226\n\tend_bloc"
  "k\030\013 \001(\0132!.tendermint.abci.ResponseEndBlo"
  "ckH\000\0221\n\006commit\030\014 \001(\0132\037.tendermint.abci.R"
  "esponseCommitH\000\022@\n\016list_snapshots\030\r \001(\0132"
  "&.tendermint.abci.ResponseListSnapshotsH"
  "\000\022@\n\016offer_snapshot\030\016 \001(\0132&.tendermint.a"
  "bci.ResponseOfferSnapshotH\000\022I\n\023load_snap"
  "shot_chunk\030\017 \001(\0132*.tendermint.abci.Respo"
  "nseLoadSnapshotChunkH\000\022K\n\024apply_snapshot"
  "_chunk\030\020 \001(\0132+.tendermint.abci.ResponseA"
  "pplySnapshotChunkH\000B\007\n\005value\"\"\n\021Response"
  "Exception\022\r\n\005error\030\001 \001(\t\"\037\n\014ResponseEcho"
  "\022\017\n\007message\030\001 \001(\t\"\017\n\rResponseFlush\"z\n\014Re"
  "sponseInfo\022\014\n\004data\030\001 \001(\t\022\017\n\007version\030\002 \001("
  "\t\022\023\n\013app_version\030\003 \001(\004\022\031\n\021last_block_hei"
  "ght\030\004 \001(\003\022\033\n\023last_block_app_hash\030\005 \001(\014\"<"
  "\n\021ResponseSetOption\022\014\n\004code\030\001 \001(\r\022\013\n\003log"
  "\030\003 \001(\t\022\014\n\004info\030\004 \001(\t\"\235\001\n\021ResponseInitCha"
  "in\022:\n\020consensus_params\030\001 \001(\0132 .tendermin"
  "t.abci.ConsensusParams\022:\n\nvalidators\030\002 \003"
  "(\0132 .tendermint.abci.ValidatorUpdateB\004\310\336"
  "\037\000\022\020\n\010app_hash\030\003 \001(\014\"\266\001\n\rResponseQuery\022\014"
  "\n\004code\030\001 \001(\r\022\013\n\003log\030\003 \001(\t\022\014\n\004info\030\004 \001(\t\022"
  "\r\n\005index\030\005 \001(\003\022\013\n\003key\030\006 \001(\014\022\r\n\005value\030\007 \001"
  "(\014\022.\n\tproof_ops\030\010 \001(\0132\033.tendermint.crypt"
  "o.ProofOps\022\016\n\006height\030\t \001(\003\022\021\n\tcodespace\030"
  "\n \001(\t\"V\n\022ResponseBeginBlock\022@\n\006events\030\001 "
  "\003(\0132\026.tendermint.abci.EventB\030\310\336\037\000\352\336\037\020eve"
  "nts,omitempty\"\331\001\n\017ResponseCheckTx\022\014\n\004cod"
  "e\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\022\013\n\003log\030\003 \001(\t\022\014\n\004in"
  "fo\030\004 \001(\t\022\036\n\ngas_wanted\030\005 \001(\003R\ngas_wanted"
  "\022\032\n\010gas_used\030\006 \001(\003R\010gas_used\022@\n\006events\030\007"
  " \003(\0132\026.tendermint.abci.EventB\030\310\336\037\000\352\336\037\020ev"
  "ents,omitempty\022\021\n\tcodespace\030\010 \001(\t\"\333\001\n\021Re"
  "sponseDeliverTx\022\014\n\004code\030\001 \001(\r\022\014\n\004data\030\002 "
  "\001(\014\022\013\n\003log\030\003 \001(\t\022\014\n\004info\030\004 \001(\t\022\036\n\ngas_wa"
  "nted\030\005 \001(\003R\ngas_wanted\022\032\n\010gas_used\030\006 \001(\003"
  "R\010gas_used\022@\n\006events\030\007 \003(\0132\026.tendermint."
  "abci.EventB\030\310\336\037\000\352\336\037\020events,omitempty\022\021\n\t"
  "codespace\030\010 \001(\t\"\332\001\n\020ResponseEndBlock\022A\n\021"
  "validator_updates\030\001 \003(\0132 .tendermint.abc"
  "i.ValidatorUpdateB\004\310\336\037\000\022A\n\027consensus_par"
  "am_updates\030\002 \001(\0132 .tendermint.abci.Conse"
  "nsusParams\022@\n\006events\030\003 \003(\0132\026.tendermint."
  "abci.EventB\030\310\336\037\000\352\336\037\020events,omitempty\"5\n\016"
  "ResponseCommit\022\014\n\004data\030\002 \001(\014\022\025\n\rretain_h"
  "eight\030\003 \001(\003\"E\n\025ResponseListSnapshots\022,\n\t"
  "snapshots\030\001 \003(\0132\031.tendermint.abci.Snapsh"
  "ot\"\266\001\n\025ResponseOfferSnapshot\022=\n\006result\030\001"
  " \001(\0162-.tendermint.abci.ResponseOfferSnap"
  "shot.Result\"^\n\006Result\022\013\n\007UNKNOWN\020\000\022\n\n\006AC"
  "CEPT\020\001\022\t\n\005ABORT\020\002\022\n\n\006REJECT\020\003\022\021\n\rREJECT_"
  "FORMAT\020\004\022\021\n\rREJECT_SENDER\020\005\"*\n\031ResponseL"
  "oadSnapshotChunk\022\r\n\005chunk\030\001 \001(\014\"\362\001\n\032Resp"
  "onseApplySnapshotChunk\022B\n\006result\030\001 \001(\01622"
  ".tendermint.abci.ResponseApplySnapshotCh"
  "unk.Result\022\026\n\016refetch_chunks\030\002 \003(\r\022\026\n\016re"
  "ject_senders\030\003 \003(\t\"`\n\006Result\022\013\n\007UNKNOWN\020"
  "\000\022\n\n\006ACCEPT\020\001\022\t\n\005ABORT\020\002\022\t\n\005RETRY\020\003\022\022\n\016R"
  "ETRY_SNAPSHOT\020\004\022\023\n\017REJECT_SNAPSHOT\020\005\"\332\001\n"
  "\017ConsensusParams\022+\n\005block\030\001 \001(\0132\034.tender"
  "mint.abci.BlockParams\0222\n\010evidence\030\002 \001(\0132"
  " .tendermint.types.EvidenceParams\0224\n\tval"
  "idator\030\003 \001(\0132!.tendermint.types.Validato"
  "rParams\0220\n\007version\030\004 \001(\0132\037.tendermint.ty"
  "pes.VersionParams\"1\n\013BlockParams\022\021\n\tmax_"
  "bytes\030\001 \001(\003\022\017\n\007max_gas\030\002 \001(\003\"O\n\016LastComm"
  "itInfo\022\r\n\005round\030\001 \001(\005\022.\n\005votes\030\002 \003(\0132\031.t"
  "endermint.abci.VoteInfoB\004\310\336\037\000\"h\n\005Event\022\014"
  "\n\004type\030\001 \001(\t\022Q\n\nattributes\030\002 \003(\0132\037.tende"
  "rmint.abci.EventAttributeB\034\310\336\037\000\352\336\037\024attri"
  "butes,omitempty\";\n\016EventAttribute\022\013\n\003key"
  "\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\022\r\n\005index\030\003 \001(\010\"o\n\010"
  "TxResult\022\016\n\006height\030\001 \001(\003\022\r\n\005index\030\002 \001(\r\022"
  "\n\n\002tx\030\003 \001(\014\0228\n\006result\030\004 \001(\0132\".tendermint"
  ".abci.ResponseDeliverTxB\004\310\336\037\000\"+\n\tValidat"
  "or\022\017\n\007address\030\001 \001(\014\022\r\n\005power\030\003 \001(\003\"U\n\017Va"
  "lidatorUpdate\0223\n\007pub_key\030\001 \001(\0132\034.tenderm"
  "int.crypto.PublicKeyB\004\310\336\037\000\022\r\n\005power\030\002 \001("
  "\003\"Z\n\010VoteInfo\0223\n\tvalidator\030\001 \001(\0132\032.tende"
  "rmint.abci.ValidatorB\004\310\336\037\000\022\031\n\021signed_las"
  "t_block\030\002 \001(\010\"\314\001\n\010Evidence\022+\n\004type\030\001 \001(\016"
  "2\035.tendermint.abci.EvidenceType\0223\n\tvalid"
  "ator\030\002 \001(\0132\032.tendermint.abci.ValidatorB\004"
  "\310\336\037\000\022\016\n\006height\030\003 \001(\003\0222\n\004time\030\004 \001(\0132\032.goo"
  "gle.protobuf.TimestampB\010\310\336\037\000\220\337\037\001\022\032\n\022tota"
  "l_voting_power\030\005 \001(\003\"Z\n\010Snapshot\022\016\n\006heig"
  "ht\030\001 \001(\004\022\016\n\006format\030\002 \001(\r\022\016\n\006chunks\030\003 \001(\r"
  "\022\014\n\004hash\030\004 \001(\014\022\020\n\010metadata\030\005 \001(\014*9\n\013Chec"
  "kTxType\022\020\n\003NEW\020\000\032\007\212\235 \003New\022\030\n\007RECHECK\020\001\032\013"
  "\212\235 \007Recheck*H\n\014EvidenceType\022\013\n\007UNKNOWN\020\000"
  "\022\022\n\016DUPLICATE_VOTE\020\001\022\027\n\023LIGHT_CLIENT_ATT"
  "ACK\020\0022\203\n\n\017ABCIApplication\022C\n\004Echo\022\034.tend"
  "ermint.abci.RequestEcho\032\035.tendermint.abc"
  "i.ResponseEcho\022F\n\005Flush\022\035.tendermint.abc"
  "i.RequestFlush\032\036.tendermint.abci.Respons"
  "eFlush\022C\n\004Info\022\034.tendermint.abci.Request"
  "Info\032\035.tendermint.abci.ResponseInfo\022R\n\tS"
  "etOption\022!.tendermint.abci.RequestSetOpt"
  "ion\032\".tendermint.abci.ResponseSetOption\022"
  "R\n\tDeliverTx\022!.tendermint.abci.RequestDe"
  "liverTx\032\".tendermint.abci.ResponseDelive"
  "rTx\022L\n\007CheckTx\022\037.tendermint.abci.Request"
  "CheckTx\032 .tendermint.abci.ResponseCheckT"
  "x\022F\n\005Query\022\035.tendermint.abci.RequestQuer"
  "y\032\036.tendermint.abci.ResponseQuery\022I\n\006Com"
  "mit\022\036.tendermint.abci.RequestCommit\032\037.te"
  "ndermint.abci.ResponseCommit\022R\n\tInitChai"
  "n\022!.tendermint.abci.RequestInitChain\032\".t"
  "endermint.abci.ResponseInitChain\022U\n\nBegi"
  "nBlock\022\".tendermint.abci.RequestBeginBlo"
  "ck\032#.tendermint.abci.ResponseBeginBlock\022"
  "O\n\010EndBlock\022 .tendermint.abci.RequestEnd"
  "Block\032!.tendermint.abci.ResponseEndBlock"
  "\022^\n\rListSnapshots\022%.tendermint.abci.Requ"
  "estListSnapshots\032&.tendermint.abci.Respo"
  "nseListSnapshots\022^\n\rOfferSnapshot\022%.tend"
  "ermint.abci.RequestOfferSnapshot\032&.tende"
  "rmint.abci.ResponseOfferSnapshot\022j\n\021Load"
  "SnapshotChunk\022).tendermint.abci.RequestL"
  "oadSnapshotChunk\032*.tendermint.abci.Respo"
  "nseLoadSnapshotChunk\022m\n\022ApplySnapshotChu"
  "nk\022*.tendermint.abci.RequestApplySnapsho"
  "tChunk\032+.tendermint.abci.ResponseApplySn"
  "apshotChunkB-Z+github.com/tendermint/ten"
  "dermint/abci/typesb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tendermint_2fabci_2ftypes_2eproto_deps[6] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_tendermint_2fcrypto_2fkeys_2eproto,
  &::descriptor_table_tendermint_2fcrypto_2fproof_2eproto,
  &::descriptor_table_tendermint_2ftypes_2fparams_2eproto,
  &::descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tendermint_2fabci_2ftypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2fabci_2ftypes_2eproto = {
  false, false, 7786, descriptor_table_protodef_tendermint_2fabci_2ftypes_2eproto, "tendermint/abci/types.proto", 
  &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once, descriptor_table_tendermint_2fabci_2ftypes_2eproto_deps, 6, 44,
  schemas, file_default_instances, TableStruct_tendermint_2fabci_2ftypes_2eproto::offsets,
  file_level_metadata_tendermint_2fabci_2ftypes_2eproto, file_level_enum_descriptors_tendermint_2fabci_2ftypes_2eproto, file_level_service_descriptors_tendermint_2fabci_2ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter() {
  return &descriptor_table_tendermint_2fabci_2ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tendermint_2fabci_2ftypes_2eproto(&descriptor_table_tendermint_2fabci_2ftypes_2eproto);
namespace tendermint {
namespace abci {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseOfferSnapshot_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tendermint_2fabci_2ftypes_2eproto);
  return file_level_enum_descriptors_tendermint_2fabci_2ftypes_2eproto[0];
}
bool ResponseOfferSnapshot_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ResponseOfferSnapshot_Result ResponseOfferSnapshot::UNKNOWN;
constexpr ResponseOfferSnapshot_Result ResponseOfferSnapshot::ACCEPT;
constexpr ResponseOfferSnapshot_Result ResponseOfferSnapshot::ABORT;
constexpr ResponseOfferSnapshot_Result ResponseOfferSnapshot::REJECT;
constexpr ResponseOfferSnapshot_Result ResponseOfferSnapshot::REJECT_FORMAT;
constexpr ResponseOfferSnapshot_Result ResponseOfferSnapshot::REJECT_SENDER;
constexpr ResponseOfferSnapshot_Result ResponseOfferSnapshot::Result_MIN;
constexpr ResponseOfferSnapshot_Result ResponseOfferSnapshot::Result_MAX;
constexpr int ResponseOfferSnapshot::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseApplySnapshotChunk_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tendermint_2fabci_2ftypes_2eproto);
  return file_level_enum_descriptors_tendermint_2fabci_2ftypes_2eproto[1];
}
bool ResponseApplySnapshotChunk_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ResponseApplySnapshotChunk_Result ResponseApplySnapshotChunk::UNKNOWN;
constexpr ResponseApplySnapshotChunk_Result ResponseApplySnapshotChunk::ACCEPT;
constexpr ResponseApplySnapshotChunk_Result ResponseApplySnapshotChunk::ABORT;
constexpr ResponseApplySnapshotChunk_Result ResponseApplySnapshotChunk::RETRY;
constexpr ResponseApplySnapshotChunk_Result ResponseApplySnapshotChunk::RETRY_SNAPSHOT;
constexpr ResponseApplySnapshotChunk_Result ResponseApplySnapshotChunk::REJECT_SNAPSHOT;
constexpr ResponseApplySnapshotChunk_Result ResponseApplySnapshotChunk::Result_MIN;
constexpr ResponseApplySnapshotChunk_Result ResponseApplySnapshotChunk::Result_MAX;
constexpr int ResponseApplySnapshotChunk::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CheckTxType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tendermint_2fabci_2ftypes_2eproto);
  return file_level_enum_descriptors_tendermint_2fabci_2ftypes_2eproto[2];
}
bool CheckTxType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EvidenceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tendermint_2fabci_2ftypes_2eproto);
  return file_level_enum_descriptors_tendermint_2fabci_2ftypes_2eproto[3];
}
bool EvidenceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Request::_Internal {
 public:
  static const ::tendermint::abci::RequestEcho& echo(const Request* msg);
  static const ::tendermint::abci::RequestFlush& flush(const Request* msg);
  static const ::tendermint::abci::RequestInfo& info(const Request* msg);
  static const ::tendermint::abci::RequestSetOption& set_option(const Request* msg);
  static const ::tendermint::abci::RequestInitChain& init_chain(const Request* msg);
  static const ::tendermint::abci::RequestQuery& query(const Request* msg);
  static const ::tendermint::abci::RequestBeginBlock& begin_block(const Request* msg);
  static const ::tendermint::abci::RequestCheckTx& check_tx(const Request* msg);
  static const ::tendermint::abci::RequestDeliverTx& deliver_tx(const Request* msg);
  static const ::tendermint::abci::RequestEndBlock& end_block(const Request* msg);
  static const ::tendermint::abci::RequestCommit& commit(const Request* msg);
  static const ::tendermint::abci::RequestListSnapshots& list_snapshots(const Request* msg);
  static const ::tendermint::abci::RequestOfferSnapshot& offer_snapshot(const Request* msg);
  static const ::tendermint::abci::RequestLoadSnapshotChunk& load_snapshot_chunk(const Request* msg);
  static const ::tendermint::abci::RequestApplySnapshotChunk& apply_snapshot_chunk(const Request* msg);
};

const ::tendermint::abci::RequestEcho&
Request::_Internal::echo(const Request* msg) {
  return *msg->value_.echo_;
}
const ::tendermint::abci::RequestFlush&
Request::_Internal::flush(const Request* msg) {
  return *msg->value_.flush_;
}
const ::tendermint::abci::RequestInfo&
Request::_Internal::info(const Request* msg) {
  return *msg->value_.info_;
}
const ::tendermint::abci::RequestSetOption&
Request::_Internal::set_option(const Request* msg) {
  return *msg->value_.set_option_;
}
const ::tendermint::abci::RequestInitChain&
Request::_Internal::init_chain(const Request* msg) {
  return *msg->value_.init_chain_;
}
const ::tendermint::abci::RequestQuery&
Request::_Internal::query(const Request* msg) {
  return *msg->value_.query_;
}
const ::tendermint::abci::RequestBeginBlock&
Request::_Internal::begin_block(const Request* msg) {
  return *msg->value_.begin_block_;
}
const ::tendermint::abci::RequestCheckTx&
Request::_Internal::check_tx(const Request* msg) {
  return *msg->value_.check_tx_;
}
const ::tendermint::abci::RequestDeliverTx&
Request::_Internal::deliver_tx(const Request* msg) {
  return *msg->value_.deliver_tx_;
}
const ::tendermint::abci::RequestEndBlock&
Request::_Internal::end_block(const Request* msg) {
  return *msg->value_.end_block_;
}
const ::tendermint::abci::RequestCommit&
Request::_Internal::commit(const Request* msg) {
  return *msg->value_.commit_;
}
const ::tendermint::abci::RequestListSnapshots&
Request::_Internal::list_snapshots(const Request* msg) {
  return *msg->value_.list_snapshots_;
}
const ::tendermint::abci::RequestOfferSnapshot&
Request::_Internal::offer_snapshot(const Request* msg) {
  return *msg->value_.offer_snapshot_;
}
const ::tendermint::abci::RequestLoadSnapshotChunk&
Request::_Internal::load_snapshot_chunk(const Request* msg) {
  return *msg->value_.load_snapshot_chunk_;
}
const ::tendermint::abci::RequestApplySnapshotChunk&
Request::_Internal::apply_snapshot_chunk(const Request* msg) {
  return *msg->value_.apply_snapshot_chunk_;
}
void Request::set_allocated_echo(::tendermint::abci::RequestEcho* echo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (echo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::RequestEcho>::GetOwningArena(echo);
    if (message_arena != submessage_arena) {
      echo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, echo, submessage_arena);
    }
    set_has_echo();
    value_.echo_ = echo;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.echo)
}
void Request::set_allocated_flush(::tendermint::abci::RequestFlush* flush) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (flush) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::RequestFlush>::GetOwningArena(flush);
    if (message_arena != submessage_arena) {
      flush = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flush, submessage_arena);
    }
    set_has_flush();
    value_.flush_ = flush;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.flush)
}
void Request::set_allocated_info(::tendermint::abci::RequestInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::RequestInfo>::GetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
    value_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.info)
}
void Request::set_allocated_set_option(::tendermint::abci::RequestSetOption* set_option) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (set_option) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::RequestSetOption>::GetOwningArena(set_option);
    if (message_arena != submessage_arena) {
      set_option = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_option, submessage_arena);
    }
    set_has_set_option();
    value_.set_option_ = set_option;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.set_option)
}
void Request::set_allocated_init_chain(::tendermint::abci::RequestInitChain* init_chain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (init_chain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::RequestInitChain>::GetOwningArena(init_chain);
    if (message_arena != submessage_arena) {
      init_chain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init_chain, submessage_arena);
    }
    set_has_init_chain();
    value_.init_chain_ = init_chain;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.init_chain)
}
void Request::set_allocated_query(::tendermint::abci::RequestQuery* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::RequestQuery>::GetOwningArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
    value_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.query)
}
void Request::set_allocated_begin_block(::tendermint::abci::RequestBeginBlock* begin_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (begin_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::RequestBeginBlock>::GetOwningArena(begin_block);
    if (message_arena != submessage_arena) {
      begin_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, begin_block, submessage_arena);
    }
    set_has_begin_block();
    value_.begin_block_ = begin_block;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.begin_block)
}
void Request::set_allocated_check_tx(::tendermint::abci::RequestCheckTx* check_tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (check_tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::RequestCheckTx>::GetOwningArena(check_tx);
    if (message_arena != submessage_arena) {
      check_tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_tx, submessage_arena);
    }
    set_has_check_tx();
    value_.check_tx_ = check_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.check_tx)
}
void Request::set_allocated_deliver_tx(::tendermint::abci::RequestDeliverTx* deliver_tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (deliver_tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::RequestDeliverTx>::GetOwningArena(deliver_tx);
    if (message_arena != submessage_arena) {
      deliver_tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deliver_tx, submessage_arena);
    }
    set_has_deliver_tx();
    value_.deliver_tx_ = deliver_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.deliver_tx)
}
void Request::set_allocated_end_block(::tendermint::abci::RequestEndBlock* end_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (end_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::RequestEndBlock>::GetOwningArena(end_block);
    if (message_arena != submessage_arena) {
      end_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_block, submessage_arena);
    }
    set_has_end_block();
    value_.end_block_ = end_block;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.end_block)
}
void Request::set_allocated_commit(::tendermint::abci::RequestCommit* commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::RequestCommit>::GetOwningArena(commit);
    if (message_arena != submessage_arena) {
      commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit, submessage_arena);
    }
    set_has_commit();
    value_.commit_ = commit;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.commit)
}
void Request::set_allocated_list_snapshots(::tendermint::abci::RequestListSnapshots* list_snapshots) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (list_snapshots) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::RequestListSnapshots>::GetOwningArena(list_snapshots);
    if (message_arena != submessage_arena) {
      list_snapshots = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_snapshots, submessage_arena);
    }
    set_has_list_snapshots();
    value_.list_snapshots_ = list_snapshots;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.list_snapshots)
}
void Request::set_allocated_offer_snapshot(::tendermint::abci::RequestOfferSnapshot* offer_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (offer_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::RequestOfferSnapshot>::GetOwningArena(offer_snapshot);
    if (message_arena != submessage_arena) {
      offer_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offer_snapshot, submessage_arena);
    }
    set_has_offer_snapshot();
    value_.offer_snapshot_ = offer_snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.offer_snapshot)
}
void Request::set_allocated_load_snapshot_chunk(::tendermint::abci::RequestLoadSnapshotChunk* load_snapshot_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (load_snapshot_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::RequestLoadSnapshotChunk>::GetOwningArena(load_snapshot_chunk);
    if (message_arena != submessage_arena) {
      load_snapshot_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load_snapshot_chunk, submessage_arena);
    }
    set_has_load_snapshot_chunk();
    value_.load_snapshot_chunk_ = load_snapshot_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.load_snapshot_chunk)
}
void Request::set_allocated_apply_snapshot_chunk(::tendermint::abci::RequestApplySnapshotChunk* apply_snapshot_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (apply_snapshot_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::RequestApplySnapshotChunk>::GetOwningArena(apply_snapshot_chunk);
    if (message_arena != submessage_arena) {
      apply_snapshot_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply_snapshot_chunk, submessage_arena);
    }
    set_has_apply_snapshot_chunk();
    value_.apply_snapshot_chunk_ = apply_snapshot_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.apply_snapshot_chunk)
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kEcho: {
      _internal_mutable_echo()->::tendermint::abci::RequestEcho::MergeFrom(from._internal_echo());
      break;
    }
    case kFlush: {
      _internal_mutable_flush()->::tendermint::abci::RequestFlush::MergeFrom(from._internal_flush());
      break;
    }
    case kInfo: {
      _internal_mutable_info()->::tendermint::abci::RequestInfo::MergeFrom(from._internal_info());
      break;
    }
    case kSetOption: {
      _internal_mutable_set_option()->::tendermint::abci::RequestSetOption::MergeFrom(from._internal_set_option());
      break;
    }
    case kInitChain: {
      _internal_mutable_init_chain()->::tendermint::abci::RequestInitChain::MergeFrom(from._internal_init_chain());
      break;
    }
    case kQuery: {
      _internal_mutable_query()->::tendermint::abci::RequestQuery::MergeFrom(from._internal_query());
      break;
    }
    case kBeginBlock: {
      _internal_mutable_begin_block()->::tendermint::abci::RequestBeginBlock::MergeFrom(from._internal_begin_block());
      break;
    }
    case kCheckTx: {
      _internal_mutable_check_tx()->::tendermint::abci::RequestCheckTx::MergeFrom(from._internal_check_tx());
      break;
    }
    case kDeliverTx: {
      _internal_mutable_deliver_tx()->::tendermint::abci::RequestDeliverTx::MergeFrom(from._internal_deliver_tx());
      break;
    }
    case kEndBlock: {
      _internal_mutable_end_block()->::tendermint::abci::RequestEndBlock::MergeFrom(from._internal_end_block());
      break;
    }
    case kCommit: {
      _internal_mutable_commit()->::tendermint::abci::RequestCommit::MergeFrom(from._internal_commit());
      break;
    }
    case kListSnapshots: {
      _internal_mutable_list_snapshots()->::tendermint::abci::RequestListSnapshots::MergeFrom(from._internal_list_snapshots());
      break;
    }
    case kOfferSnapshot: {
      _internal_mutable_offer_snapshot()->::tendermint::abci::RequestOfferSnapshot::MergeFrom(from._internal_offer_snapshot());
      break;
    }
    case kLoadSnapshotChunk: {
      _internal_mutable_load_snapshot_chunk()->::tendermint::abci::RequestLoadSnapshotChunk::MergeFrom(from._internal_load_snapshot_chunk());
      break;
    }
    case kApplySnapshotChunk: {
      _internal_mutable_apply_snapshot_chunk()->::tendermint::abci::RequestApplySnapshotChunk::MergeFrom(from._internal_apply_snapshot_chunk());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.Request)
}

inline void Request::SharedCtor() {
clear_has_value();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:tendermint.abci.Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Request::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:tendermint.abci.Request)
  switch (value_case()) {
    case kEcho: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.echo_;
      }
      break;
    }
    case kFlush: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.flush_;
      }
      break;
    }
    case kInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.info_;
      }
      break;
    }
    case kSetOption: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.set_option_;
      }
      break;
    }
    case kInitChain: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.init_chain_;
      }
      break;
    }
    case kQuery: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.query_;
      }
      break;
    }
    case kBeginBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.begin_block_;
      }
      break;
    }
    case kCheckTx: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.check_tx_;
      }
      break;
    }
    case kDeliverTx: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.deliver_tx_;
      }
      break;
    }
    case kEndBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.end_block_;
      }
      break;
    }
    case kCommit: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.commit_;
      }
      break;
    }
    case kListSnapshots: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.list_snapshots_;
      }
      break;
    }
    case kOfferSnapshot: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.offer_snapshot_;
      }
      break;
    }
    case kLoadSnapshotChunk: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.load_snapshot_chunk_;
      }
      break;
    }
    case kApplySnapshotChunk: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.apply_snapshot_chunk_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.abci.RequestEcho echo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_echo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestFlush flush = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_flush(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestInfo info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestSetOption set_option = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_option(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestInitChain init_chain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_init_chain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestQuery query = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestBeginBlock begin_block = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_begin_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestCheckTx check_tx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_tx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestDeliverTx deliver_tx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_deliver_tx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestEndBlock end_block = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestCommit commit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestListSnapshots list_snapshots = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_snapshots(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestOfferSnapshot offer_snapshot = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_offer_snapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestLoadSnapshotChunk load_snapshot_chunk = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_load_snapshot_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestApplySnapshotChunk apply_snapshot_chunk = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_snapshot_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.abci.RequestEcho echo = 1;
  if (_internal_has_echo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::echo(this), target, stream);
  }

  // .tendermint.abci.RequestFlush flush = 2;
  if (_internal_has_flush()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::flush(this), target, stream);
  }

  // .tendermint.abci.RequestInfo info = 3;
  if (_internal_has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::info(this), target, stream);
  }

  // .tendermint.abci.RequestSetOption set_option = 4;
  if (_internal_has_set_option()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::set_option(this), target, stream);
  }

  // .tendermint.abci.RequestInitChain init_chain = 5;
  if (_internal_has_init_chain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::init_chain(this), target, stream);
  }

  // .tendermint.abci.RequestQuery query = 6;
  if (_internal_has_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::query(this), target, stream);
  }

  // .tendermint.abci.RequestBeginBlock begin_block = 7;
  if (_internal_has_begin_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::begin_block(this), target, stream);
  }

  // .tendermint.abci.RequestCheckTx check_tx = 8;
  if (_internal_has_check_tx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::check_tx(this), target, stream);
  }

  // .tendermint.abci.RequestDeliverTx deliver_tx = 9;
  if (_internal_has_deliver_tx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::deliver_tx(this), target, stream);
  }

  // .tendermint.abci.RequestEndBlock end_block = 10;
  if (_internal_has_end_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::end_block(this), target, stream);
  }

  // .tendermint.abci.RequestCommit commit = 11;
  if (_internal_has_commit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::commit(this), target, stream);
  }

  // .tendermint.abci.RequestListSnapshots list_snapshots = 12;
  if (_internal_has_list_snapshots()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::list_snapshots(this), target, stream);
  }

  // .tendermint.abci.RequestOfferSnapshot offer_snapshot = 13;
  if (_internal_has_offer_snapshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::offer_snapshot(this), target, stream);
  }

  // .tendermint.abci.RequestLoadSnapshotChunk load_snapshot_chunk = 14;
  if (_internal_has_load_snapshot_chunk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::load_snapshot_chunk(this), target, stream);
  }

  // .tendermint.abci.RequestApplySnapshotChunk apply_snapshot_chunk = 15;
  if (_internal_has_apply_snapshot_chunk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::apply_snapshot_chunk(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .tendermint.abci.RequestEcho echo = 1;
    case kEcho: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.echo_);
      break;
    }
    // .tendermint.abci.RequestFlush flush = 2;
    case kFlush: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.flush_);
      break;
    }
    // .tendermint.abci.RequestInfo info = 3;
    case kInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.info_);
      break;
    }
    // .tendermint.abci.RequestSetOption set_option = 4;
    case kSetOption: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.set_option_);
      break;
    }
    // .tendermint.abci.RequestInitChain init_chain = 5;
    case kInitChain: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.init_chain_);
      break;
    }
    // .tendermint.abci.RequestQuery query = 6;
    case kQuery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.query_);
      break;
    }
    // .tendermint.abci.RequestBeginBlock begin_block = 7;
    case kBeginBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.begin_block_);
      break;
    }
    // .tendermint.abci.RequestCheckTx check_tx = 8;
    case kCheckTx: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.check_tx_);
      break;
    }
    // .tendermint.abci.RequestDeliverTx deliver_tx = 9;
    case kDeliverTx: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.deliver_tx_);
      break;
    }
    // .tendermint.abci.RequestEndBlock end_block = 10;
    case kEndBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.end_block_);
      break;
    }
    // .tendermint.abci.RequestCommit commit = 11;
    case kCommit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.commit_);
      break;
    }
    // .tendermint.abci.RequestListSnapshots list_snapshots = 12;
    case kListSnapshots: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.list_snapshots_);
      break;
    }
    // .tendermint.abci.RequestOfferSnapshot offer_snapshot = 13;
    case kOfferSnapshot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.offer_snapshot_);
      break;
    }
    // .tendermint.abci.RequestLoadSnapshotChunk load_snapshot_chunk = 14;
    case kLoadSnapshotChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.load_snapshot_chunk_);
      break;
    }
    // .tendermint.abci.RequestApplySnapshotChunk apply_snapshot_chunk = 15;
    case kApplySnapshotChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.apply_snapshot_chunk_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }

void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Request *>(to)->MergeFrom(
      static_cast<const Request &>(from));
}


void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kEcho: {
      _internal_mutable_echo()->::tendermint::abci::RequestEcho::MergeFrom(from._internal_echo());
      break;
    }
    case kFlush: {
      _internal_mutable_flush()->::tendermint::abci::RequestFlush::MergeFrom(from._internal_flush());
      break;
    }
    case kInfo: {
      _internal_mutable_info()->::tendermint::abci::RequestInfo::MergeFrom(from._internal_info());
      break;
    }
    case kSetOption: {
      _internal_mutable_set_option()->::tendermint::abci::RequestSetOption::MergeFrom(from._internal_set_option());
      break;
    }
    case kInitChain: {
      _internal_mutable_init_chain()->::tendermint::abci::RequestInitChain::MergeFrom(from._internal_init_chain());
      break;
    }
    case kQuery: {
      _internal_mutable_query()->::tendermint::abci::RequestQuery::MergeFrom(from._internal_query());
      break;
    }
    case kBeginBlock: {
      _internal_mutable_begin_block()->::tendermint::abci::RequestBeginBlock::MergeFrom(from._internal_begin_block());
      break;
    }
    case kCheckTx: {
      _internal_mutable_check_tx()->::tendermint::abci::RequestCheckTx::MergeFrom(from._internal_check_tx());
      break;
    }
    case kDeliverTx: {
      _internal_mutable_deliver_tx()->::tendermint::abci::RequestDeliverTx::MergeFrom(from._internal_deliver_tx());
      break;
    }
    case kEndBlock: {
      _internal_mutable_end_block()->::tendermint::abci::RequestEndBlock::MergeFrom(from._internal_end_block());
      break;
    }
    case kCommit: {
      _internal_mutable_commit()->::tendermint::abci::RequestCommit::MergeFrom(from._internal_commit());
      break;
    }
    case kListSnapshots: {
      _internal_mutable_list_snapshots()->::tendermint::abci::RequestListSnapshots::MergeFrom(from._internal_list_snapshots());
      break;
    }
    case kOfferSnapshot: {
      _internal_mutable_offer_snapshot()->::tendermint::abci::RequestOfferSnapshot::MergeFrom(from._internal_offer_snapshot());
      break;
    }
    case kLoadSnapshotChunk: {
      _internal_mutable_load_snapshot_chunk()->::tendermint::abci::RequestLoadSnapshotChunk::MergeFrom(from._internal_load_snapshot_chunk());
      break;
    }
    case kApplySnapshotChunk: {
      _internal_mutable_apply_snapshot_chunk()->::tendermint::abci::RequestApplySnapshotChunk::MergeFrom(from._internal_apply_snapshot_chunk());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[0]);
}

// ===================================================================

class RequestEcho::_Internal {
 public:
};

RequestEcho::RequestEcho(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestEcho)
}
RequestEcho::RequestEcho(const RequestEcho& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestEcho)
}

inline void RequestEcho::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestEcho::~RequestEcho() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestEcho)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestEcho::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestEcho::ArenaDtor(void* object) {
  RequestEcho* _this = reinterpret_cast< RequestEcho* >(object);
  (void)_this;
}
void RequestEcho::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestEcho::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestEcho::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestEcho)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestEcho::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.RequestEcho.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestEcho::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestEcho)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.RequestEcho.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestEcho)
  return target;
}

size_t RequestEcho::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestEcho)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestEcho::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestEcho::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestEcho::GetClassData() const { return &_class_data_; }

void RequestEcho::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestEcho *>(to)->MergeFrom(
      static_cast<const RequestEcho &>(from));
}


void RequestEcho::MergeFrom(const RequestEcho& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestEcho)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestEcho::CopyFrom(const RequestEcho& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestEcho)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEcho::IsInitialized() const {
  return true;
}

void RequestEcho::InternalSwap(RequestEcho* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestEcho::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[1]);
}

// ===================================================================

class RequestFlush::_Internal {
 public:
};

RequestFlush::RequestFlush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestFlush)
}
RequestFlush::RequestFlush(const RequestFlush& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestFlush)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestFlush::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestFlush::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestFlush::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[2]);
}

// ===================================================================

class RequestInfo::_Internal {
 public:
};

RequestInfo::RequestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestInfo)
}
RequestInfo::RequestInfo(const RequestInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  ::memcpy(&block_version_, &from.block_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&p2p_version_) -
    reinterpret_cast<char*>(&block_version_)) + sizeof(p2p_version_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestInfo)
}

inline void RequestInfo::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&p2p_version_) -
    reinterpret_cast<char*>(&block_version_)) + sizeof(p2p_version_));
}

RequestInfo::~RequestInfo() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestInfo::ArenaDtor(void* object) {
  RequestInfo* _this = reinterpret_cast< RequestInfo* >(object);
  (void)_this;
}
void RequestInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty();
  ::memset(&block_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p2p_version_) -
      reinterpret_cast<char*>(&block_version_)) + sizeof(p2p_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.RequestInfo.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          block_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 p2p_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          p2p_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.RequestInfo.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // uint64 block_version = 2;
  if (this->_internal_block_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block_version(), target);
  }

  // uint64 p2p_version = 3;
  if (this->_internal_p2p_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_p2p_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestInfo)
  return target;
}

size_t RequestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // uint64 block_version = 2;
  if (this->_internal_block_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_block_version());
  }

  // uint64 p2p_version = 3;
  if (this->_internal_p2p_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_p2p_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestInfo::GetClassData() const { return &_class_data_; }

void RequestInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestInfo *>(to)->MergeFrom(
      static_cast<const RequestInfo &>(from));
}


void RequestInfo::MergeFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_block_version() != 0) {
    _internal_set_block_version(from._internal_block_version());
  }
  if (from._internal_p2p_version() != 0) {
    _internal_set_p2p_version(from._internal_p2p_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestInfo::CopyFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInfo::IsInitialized() const {
  return true;
}

void RequestInfo::InternalSwap(RequestInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestInfo, p2p_version_)
      + sizeof(RequestInfo::p2p_version_)
      - PROTOBUF_FIELD_OFFSET(RequestInfo, block_version_)>(
          reinterpret_cast<char*>(&block_version_),
          reinterpret_cast<char*>(&other->block_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[3]);
}

// ===================================================================

class RequestSetOption::_Internal {
 public:
};

RequestSetOption::RequestSetOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestSetOption)
}
RequestSetOption::RequestSetOption(const RequestSetOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestSetOption)
}

inline void RequestSetOption::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestSetOption::~RequestSetOption() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestSetOption)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestSetOption::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestSetOption::ArenaDtor(void* object) {
  RequestSetOption* _this = reinterpret_cast< RequestSetOption* >(object);
  (void)_this;
}
void RequestSetOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestSetOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestSetOption::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestSetOption)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestSetOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.RequestSetOption.key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.RequestSetOption.value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestSetOption::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestSetOption)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.RequestSetOption.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.RequestSetOption.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestSetOption)
  return target;
}

size_t RequestSetOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestSetOption)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestSetOption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestSetOption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestSetOption::GetClassData() const { return &_class_data_; }

void RequestSetOption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestSetOption *>(to)->MergeFrom(
      static_cast<const RequestSetOption &>(from));
}


void RequestSetOption::MergeFrom(const RequestSetOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestSetOption)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestSetOption::CopyFrom(const RequestSetOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestSetOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSetOption::IsInitialized() const {
  return true;
}

void RequestSetOption::InternalSwap(RequestSetOption* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestSetOption::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[4]);
}

// ===================================================================

class RequestInitChain::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const RequestInitChain* msg);
  static const ::tendermint::abci::ConsensusParams& consensus_params(const RequestInitChain* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RequestInitChain::_Internal::time(const RequestInitChain* msg) {
  return *msg->time_;
}
const ::tendermint::abci::ConsensusParams&
RequestInitChain::_Internal::consensus_params(const RequestInitChain* msg) {
  return *msg->consensus_params_;
}
void RequestInitChain::clear_time() {
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
RequestInitChain::RequestInitChain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  validators_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestInitChain)
}
RequestInitChain::RequestInitChain(const RequestInitChain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      validators_(from.validators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArenaForAllocation());
  }
  app_state_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_state_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_state_bytes().empty()) {
    app_state_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_state_bytes(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from._internal_has_consensus_params()) {
    consensus_params_ = new ::tendermint::abci::ConsensusParams(*from.consensus_params_);
  } else {
    consensus_params_ = nullptr;
  }
  initial_height_ = from.initial_height_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestInitChain)
}

inline void RequestInitChain::SharedCtor() {
chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_state_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_state_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&initial_height_) -
    reinterpret_cast<char*>(&time_)) + sizeof(initial_height_));
}

RequestInitChain::~RequestInitChain() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestInitChain)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestInitChain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_state_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete consensus_params_;
}

void RequestInitChain::ArenaDtor(void* object) {
  RequestInitChain* _this = reinterpret_cast< RequestInitChain* >(object);
  (void)_this;
}
void RequestInitChain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestInitChain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestInitChain::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestInitChain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validators_.Clear();
  chain_id_.ClearToEmpty();
  app_state_bytes_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && consensus_params_ != nullptr) {
    delete consensus_params_;
  }
  consensus_params_ = nullptr;
  initial_height_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestInitChain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chain_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.RequestInitChain.chain_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ConsensusParams consensus_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tendermint.abci.ValidatorUpdate validators = 4 [(.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes app_state_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_app_state_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 initial_height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          initial_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestInitChain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestInitChain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time(this), target, stream);
  }

  // string chain_id = 2;
  if (!this->_internal_chain_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.RequestInitChain.chain_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chain_id(), target);
  }

  // .tendermint.abci.ConsensusParams consensus_params = 3;
  if (this->_internal_has_consensus_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::consensus_params(this), target, stream);
  }

  // repeated .tendermint.abci.ValidatorUpdate validators = 4 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_validators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_validators(i), target, stream);
  }

  // bytes app_state_bytes = 5;
  if (!this->_internal_app_state_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_app_state_bytes(), target);
  }

  // int64 initial_height = 6;
  if (this->_internal_initial_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_initial_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestInitChain)
  return target;
}

size_t RequestInitChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestInitChain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.ValidatorUpdate validators = 4 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_validators_size();
  for (const auto& msg : this->validators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string chain_id = 2;
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // bytes app_state_bytes = 5;
  if (!this->_internal_app_state_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_app_state_bytes());
  }

  // .google.protobuf.Timestamp time = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .tendermint.abci.ConsensusParams consensus_params = 3;
  if (this->_internal_has_consensus_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consensus_params_);
  }

  // int64 initial_height = 6;
  if (this->_internal_initial_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_initial_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestInitChain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestInitChain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestInitChain::GetClassData() const { return &_class_data_; }

void RequestInitChain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestInitChain *>(to)->MergeFrom(
      static_cast<const RequestInitChain &>(from));
}


void RequestInitChain::MergeFrom(const RequestInitChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestInitChain)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  validators_.MergeFrom(from.validators_);
  if (!from._internal_chain_id().empty()) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (!from._internal_app_state_bytes().empty()) {
    _internal_set_app_state_bytes(from._internal_app_state_bytes());
  }
  if (from._internal_has_time()) {
    _internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from._internal_has_consensus_params()) {
    _internal_mutable_consensus_params()->::tendermint::abci::ConsensusParams::MergeFrom(from._internal_consensus_params());
  }
  if (from._internal_initial_height() != 0) {
    _internal_set_initial_height(from._internal_initial_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestInitChain::CopyFrom(const RequestInitChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInitChain::IsInitialized() const {
  return true;
}

void RequestInitChain::InternalSwap(RequestInitChain* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  validators_.InternalSwap(&other->validators_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chain_id_, lhs_arena,
      &other->chain_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_state_bytes_, lhs_arena,
      &other->app_state_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestInitChain, initial_height_)
      + sizeof(RequestInitChain::initial_height_)
      - PROTOBUF_FIELD_OFFSET(RequestInitChain, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestInitChain::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[5]);
}

// ===================================================================

class RequestQuery::_Internal {
 public:
};

RequestQuery::RequestQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestQuery)
}
RequestQuery::RequestQuery(const RequestQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&prove_) -
    reinterpret_cast<char*>(&height_)) + sizeof(prove_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestQuery)
}

inline void RequestQuery::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prove_) -
    reinterpret_cast<char*>(&height_)) + sizeof(prove_));
}

RequestQuery::~RequestQuery() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestQuery)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestQuery::ArenaDtor(void* object) {
  RequestQuery* _this = reinterpret_cast< RequestQuery* >(object);
  (void)_this;
}
void RequestQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  path_.ClearToEmpty();
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prove_) -
      reinterpret_cast<char*>(&height_)) + sizeof(prove_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.RequestQuery.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool prove = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          prove_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.RequestQuery.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // int64 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_height(), target);
  }

  // bool prove = 4;
  if (this->_internal_prove() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_prove(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestQuery)
  return target;
}

size_t RequestQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int64 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // bool prove = 4;
  if (this->_internal_prove() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestQuery::GetClassData() const { return &_class_data_; }

void RequestQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestQuery *>(to)->MergeFrom(
      static_cast<const RequestQuery &>(from));
}


void RequestQuery::MergeFrom(const RequestQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestQuery)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_prove() != 0) {
    _internal_set_prove(from._internal_prove());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestQuery::CopyFrom(const RequestQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQuery::IsInitialized() const {
  return true;
}

void RequestQuery::InternalSwap(RequestQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestQuery, prove_)
      + sizeof(RequestQuery::prove_)
      - PROTOBUF_FIELD_OFFSET(RequestQuery, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestQuery::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[6]);
}

// ===================================================================

class RequestBeginBlock::_Internal {
 public:
  static const ::tendermint::types::Header& header(const RequestBeginBlock* msg);
  static const ::tendermint::abci::LastCommitInfo& last_commit_info(const RequestBeginBlock* msg);
};

const ::tendermint::types::Header&
RequestBeginBlock::_Internal::header(const RequestBeginBlock* msg) {
  return *msg->header_;
}
const ::tendermint::abci::LastCommitInfo&
RequestBeginBlock::_Internal::last_commit_info(const RequestBeginBlock* msg) {
  return *msg->last_commit_info_;
}
void RequestBeginBlock::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RequestBeginBlock::RequestBeginBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  byzantine_validators_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestBeginBlock)
}
RequestBeginBlock::RequestBeginBlock(const RequestBeginBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      byzantine_validators_(from.byzantine_validators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::tendermint::types::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_last_commit_info()) {
    last_commit_info_ = new ::tendermint::abci::LastCommitInfo(*from.last_commit_info_);
  } else {
    last_commit_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestBeginBlock)
}

inline void RequestBeginBlock::SharedCtor() {
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_commit_info_) -
    reinterpret_cast<char*>(&header_)) + sizeof(last_commit_info_));
}

RequestBeginBlock::~RequestBeginBlock() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestBeginBlock)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestBeginBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete last_commit_info_;
}

void RequestBeginBlock::ArenaDtor(void* object) {
  RequestBeginBlock* _this = reinterpret_cast< RequestBeginBlock* >(object);
  (void)_this;
}
void RequestBeginBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestBeginBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestBeginBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestBeginBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  byzantine_validators_.Clear();
  hash_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_commit_info_ != nullptr) {
    delete last_commit_info_;
  }
  last_commit_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestBeginBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.Header header = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.LastCommitInfo last_commit_info = 3 [(.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_commit_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tendermint.abci.Evidence byzantine_validators = 4 [(.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_byzantine_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestBeginBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestBeginBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // .tendermint.types.Header header = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::header(this), target, stream);
  }

  // .tendermint.abci.LastCommitInfo last_commit_info = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_last_commit_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::last_commit_info(this), target, stream);
  }

  // repeated .tendermint.abci.Evidence byzantine_validators = 4 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_byzantine_validators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_byzantine_validators(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestBeginBlock)
  return target;
}

size_t RequestBeginBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestBeginBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.Evidence byzantine_validators = 4 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_byzantine_validators_size();
  for (const auto& msg : this->byzantine_validators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // .tendermint.types.Header header = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .tendermint.abci.LastCommitInfo last_commit_info = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_last_commit_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_commit_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestBeginBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestBeginBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestBeginBlock::GetClassData() const { return &_class_data_; }

void RequestBeginBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestBeginBlock *>(to)->MergeFrom(
      static_cast<const RequestBeginBlock &>(from));
}


void RequestBeginBlock::MergeFrom(const RequestBeginBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestBeginBlock)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  byzantine_validators_.MergeFrom(from.byzantine_validators_);
  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::tendermint::types::Header::MergeFrom(from._internal_header());
  }
  if (from._internal_has_last_commit_info()) {
    _internal_mutable_last_commit_info()->::tendermint::abci::LastCommitInfo::MergeFrom(from._internal_last_commit_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestBeginBlock::CopyFrom(const RequestBeginBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBeginBlock::IsInitialized() const {
  return true;
}

void RequestBeginBlock::InternalSwap(RequestBeginBlock* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  byzantine_validators_.InternalSwap(&other->byzantine_validators_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, lhs_arena,
      &other->hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestBeginBlock, last_commit_info_)
      + sizeof(RequestBeginBlock::last_commit_info_)
      - PROTOBUF_FIELD_OFFSET(RequestBeginBlock, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestBeginBlock::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[7]);
}

// ===================================================================

class RequestCheckTx::_Internal {
 public:
};

RequestCheckTx::RequestCheckTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestCheckTx)
}
RequestCheckTx::RequestCheckTx(const RequestCheckTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestCheckTx)
}

inline void RequestCheckTx::SharedCtor() {
tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

RequestCheckTx::~RequestCheckTx() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestCheckTx)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestCheckTx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestCheckTx::ArenaDtor(void* object) {
  RequestCheckTx* _this = reinterpret_cast< RequestCheckTx* >(object);
  (void)_this;
}
void RequestCheckTx::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestCheckTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestCheckTx::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestCheckTx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestCheckTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes tx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.CheckTxType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tendermint::abci::CheckTxType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestCheckTx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestCheckTx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx = 1;
  if (!this->_internal_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tx(), target);
  }

  // .tendermint.abci.CheckTxType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestCheckTx)
  return target;
}

size_t RequestCheckTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestCheckTx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx = 1;
  if (!this->_internal_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  // .tendermint.abci.CheckTxType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestCheckTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestCheckTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestCheckTx::GetClassData() const { return &_class_data_; }

void RequestCheckTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestCheckTx *>(to)->MergeFrom(
      static_cast<const RequestCheckTx &>(from));
}


void RequestCheckTx::MergeFrom(const RequestCheckTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestCheckTx)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx().empty()) {
    _internal_set_tx(from._internal_tx());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestCheckTx::CopyFrom(const RequestCheckTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestCheckTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCheckTx::IsInitialized() const {
  return true;
}

void RequestCheckTx::InternalSwap(RequestCheckTx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tx_, lhs_arena,
      &other->tx_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestCheckTx::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[8]);
}

// ===================================================================

class RequestDeliverTx::_Internal {
 public:
};

RequestDeliverTx::RequestDeliverTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestDeliverTx)
}
RequestDeliverTx::RequestDeliverTx(const RequestDeliverTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestDeliverTx)
}

inline void RequestDeliverTx::SharedCtor() {
tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestDeliverTx::~RequestDeliverTx() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestDeliverTx)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestDeliverTx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestDeliverTx::ArenaDtor(void* object) {
  RequestDeliverTx* _this = reinterpret_cast< RequestDeliverTx* >(object);
  (void)_this;
}
void RequestDeliverTx::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestDeliverTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestDeliverTx::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestDeliverTx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestDeliverTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes tx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestDeliverTx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestDeliverTx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx = 1;
  if (!this->_internal_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestDeliverTx)
  return target;
}

size_t RequestDeliverTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestDeliverTx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx = 1;
  if (!this->_internal_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestDeliverTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestDeliverTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestDeliverTx::GetClassData() const { return &_class_data_; }

void RequestDeliverTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestDeliverTx *>(to)->MergeFrom(
      static_cast<const RequestDeliverTx &>(from));
}


void RequestDeliverTx::MergeFrom(const RequestDeliverTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestDeliverTx)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx().empty()) {
    _internal_set_tx(from._internal_tx());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestDeliverTx::CopyFrom(const RequestDeliverTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDeliverTx::IsInitialized() const {
  return true;
}

void RequestDeliverTx::InternalSwap(RequestDeliverTx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tx_, lhs_arena,
      &other->tx_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestDeliverTx::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[9]);
}

// ===================================================================

class RequestEndBlock::_Internal {
 public:
};

RequestEndBlock::RequestEndBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestEndBlock)
}
RequestEndBlock::RequestEndBlock(const RequestEndBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestEndBlock)
}

inline void RequestEndBlock::SharedCtor() {
height_ = int64_t{0};
}

RequestEndBlock::~RequestEndBlock() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestEndBlock)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestEndBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestEndBlock::ArenaDtor(void* object) {
  RequestEndBlock* _this = reinterpret_cast< RequestEndBlock* >(object);
  (void)_this;
}
void RequestEndBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestEndBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestEndBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestEndBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  height_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestEndBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestEndBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestEndBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestEndBlock)
  return target;
}

size_t RequestEndBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestEndBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestEndBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestEndBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestEndBlock::GetClassData() const { return &_class_data_; }

void RequestEndBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestEndBlock *>(to)->MergeFrom(
      static_cast<const RequestEndBlock &>(from));
}


void RequestEndBlock::MergeFrom(const RequestEndBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestEndBlock)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestEndBlock::CopyFrom(const RequestEndBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestEndBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEndBlock::IsInitialized() const {
  return true;
}

void RequestEndBlock::InternalSwap(RequestEndBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestEndBlock::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[10]);
}

// ===================================================================

class RequestCommit::_Internal {
 public:
};

RequestCommit::RequestCommit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestCommit)
}
RequestCommit::RequestCommit(const RequestCommit& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestCommit)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestCommit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestCommit::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestCommit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[11]);
}

// ===================================================================

class RequestListSnapshots::_Internal {
 public:
};

RequestListSnapshots::RequestListSnapshots(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestListSnapshots)
}
RequestListSnapshots::RequestListSnapshots(const RequestListSnapshots& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestListSnapshots)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestListSnapshots::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestListSnapshots::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestListSnapshots::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[12]);
}

// ===================================================================

class RequestOfferSnapshot::_Internal {
 public:
  static const ::tendermint::abci::Snapshot& snapshot(const RequestOfferSnapshot* msg);
};

const ::tendermint::abci::Snapshot&
RequestOfferSnapshot::_Internal::snapshot(const RequestOfferSnapshot* msg) {
  return *msg->snapshot_;
}
RequestOfferSnapshot::RequestOfferSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestOfferSnapshot)
}
RequestOfferSnapshot::RequestOfferSnapshot(const RequestOfferSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_hash().empty()) {
    app_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_hash(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_snapshot()) {
    snapshot_ = new ::tendermint::abci::Snapshot(*from.snapshot_);
  } else {
    snapshot_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestOfferSnapshot)
}

inline void RequestOfferSnapshot::SharedCtor() {
app_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
snapshot_ = nullptr;
}

RequestOfferSnapshot::~RequestOfferSnapshot() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestOfferSnapshot)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestOfferSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete snapshot_;
}

void RequestOfferSnapshot::ArenaDtor(void* object) {
  RequestOfferSnapshot* _this = reinterpret_cast< RequestOfferSnapshot* >(object);
  (void)_this;
}
void RequestOfferSnapshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestOfferSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestOfferSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestOfferSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_hash_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestOfferSnapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.abci.Snapshot snapshot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes app_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestOfferSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestOfferSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.abci.Snapshot snapshot = 1;
  if (this->_internal_has_snapshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::snapshot(this), target, stream);
  }

  // bytes app_hash = 2;
  if (!this->_internal_app_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_app_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestOfferSnapshot)
  return target;
}

size_t RequestOfferSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestOfferSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes app_hash = 2;
  if (!this->_internal_app_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_app_hash());
  }

  // .tendermint.abci.Snapshot snapshot = 1;
  if (this->_internal_has_snapshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *snapshot_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestOfferSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestOfferSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestOfferSnapshot::GetClassData() const { return &_class_data_; }

void RequestOfferSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestOfferSnapshot *>(to)->MergeFrom(
      static_cast<const RequestOfferSnapshot &>(from));
}


void RequestOfferSnapshot::MergeFrom(const RequestOfferSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestOfferSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_hash().empty()) {
    _internal_set_app_hash(from._internal_app_hash());
  }
  if (from._internal_has_snapshot()) {
    _internal_mutable_snapshot()->::tendermint::abci::Snapshot::MergeFrom(from._internal_snapshot());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestOfferSnapshot::CopyFrom(const RequestOfferSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestOfferSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestOfferSnapshot::IsInitialized() const {
  return true;
}

void RequestOfferSnapshot::InternalSwap(RequestOfferSnapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_hash_, lhs_arena,
      &other->app_hash_, rhs_arena
  );
  swap(snapshot_, other->snapshot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestOfferSnapshot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[13]);
}

// ===================================================================

class RequestLoadSnapshotChunk::_Internal {
 public:
};

RequestLoadSnapshotChunk::RequestLoadSnapshotChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestLoadSnapshotChunk)
}
RequestLoadSnapshotChunk::RequestLoadSnapshotChunk(const RequestLoadSnapshotChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&chunk_) -
    reinterpret_cast<char*>(&height_)) + sizeof(chunk_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestLoadSnapshotChunk)
}

inline void RequestLoadSnapshotChunk::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chunk_) -
    reinterpret_cast<char*>(&height_)) + sizeof(chunk_));
}

RequestLoadSnapshotChunk::~RequestLoadSnapshotChunk() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestLoadSnapshotChunk)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestLoadSnapshotChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestLoadSnapshotChunk::ArenaDtor(void* object) {
  RequestLoadSnapshotChunk* _this = reinterpret_cast< RequestLoadSnapshotChunk* >(object);
  (void)_this;
}
void RequestLoadSnapshotChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestLoadSnapshotChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestLoadSnapshotChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestLoadSnapshotChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chunk_) -
      reinterpret_cast<char*>(&height_)) + sizeof(chunk_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestLoadSnapshotChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chunk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestLoadSnapshotChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestLoadSnapshotChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  // uint32 format = 2;
  if (this->_internal_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_format(), target);
  }

  // uint32 chunk = 3;
  if (this->_internal_chunk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestLoadSnapshotChunk)
  return target;
}

size_t RequestLoadSnapshotChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestLoadSnapshotChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_height());
  }

  // uint32 format = 2;
  if (this->_internal_format() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_format());
  }

  // uint32 chunk = 3;
  if (this->_internal_chunk() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_chunk());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestLoadSnapshotChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestLoadSnapshotChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestLoadSnapshotChunk::GetClassData() const { return &_class_data_; }

void RequestLoadSnapshotChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestLoadSnapshotChunk *>(to)->MergeFrom(
      static_cast<const RequestLoadSnapshotChunk &>(from));
}


void RequestLoadSnapshotChunk::MergeFrom(const RequestLoadSnapshotChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestLoadSnapshotChunk)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from._internal_chunk() != 0) {
    _internal_set_chunk(from._internal_chunk());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestLoadSnapshotChunk::CopyFrom(const RequestLoadSnapshotChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestLoadSnapshotChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLoadSnapshotChunk::IsInitialized() const {
  return true;
}

void RequestLoadSnapshotChunk::InternalSwap(RequestLoadSnapshotChunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestLoadSnapshotChunk, chunk_)
      + sizeof(RequestLoadSnapshotChunk::chunk_)
      - PROTOBUF_FIELD_OFFSET(RequestLoadSnapshotChunk, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestLoadSnapshotChunk::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[14]);
}

// ===================================================================

class RequestApplySnapshotChunk::_Internal {
 public:
};

RequestApplySnapshotChunk::RequestApplySnapshotChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestApplySnapshotChunk)
}
RequestApplySnapshotChunk::RequestApplySnapshotChunk(const RequestApplySnapshotChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chunk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chunk().empty()) {
    chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chunk(), 
      GetArenaForAllocation());
  }
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender(), 
      GetArenaForAllocation());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestApplySnapshotChunk)
}

inline void RequestApplySnapshotChunk::SharedCtor() {
chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chunk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
index_ = 0u;
}

RequestApplySnapshotChunk::~RequestApplySnapshotChunk() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestApplySnapshotChunk)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestApplySnapshotChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestApplySnapshotChunk::ArenaDtor(void* object) {
  RequestApplySnapshotChunk* _this = reinterpret_cast< RequestApplySnapshotChunk* >(object);
  (void)_this;
}
void RequestApplySnapshotChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestApplySnapshotChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestApplySnapshotChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestApplySnapshotChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_.ClearToEmpty();
  sender_.ClearToEmpty();
  index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestApplySnapshotChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes chunk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.RequestApplySnapshotChunk.sender"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestApplySnapshotChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestApplySnapshotChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // bytes chunk = 2;
  if (!this->_internal_chunk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chunk(), target);
  }

  // string sender = 3;
  if (!this->_internal_sender().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender().data(), static_cast<int>(this->_internal_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.RequestApplySnapshotChunk.sender");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sender(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestApplySnapshotChunk)
  return target;
}

size_t RequestApplySnapshotChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestApplySnapshotChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chunk = 2;
  if (!this->_internal_chunk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chunk());
  }

  // string sender = 3;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender());
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestApplySnapshotChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestApplySnapshotChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestApplySnapshotChunk::GetClassData() const { return &_class_data_; }

void RequestApplySnapshotChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestApplySnapshotChunk *>(to)->MergeFrom(
      static_cast<const RequestApplySnapshotChunk &>(from));
}


void RequestApplySnapshotChunk::MergeFrom(const RequestApplySnapshotChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestApplySnapshotChunk)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chunk().empty()) {
    _internal_set_chunk(from._internal_chunk());
  }
  if (!from._internal_sender().empty()) {
    _internal_set_sender(from._internal_sender());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestApplySnapshotChunk::CopyFrom(const RequestApplySnapshotChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestApplySnapshotChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestApplySnapshotChunk::IsInitialized() const {
  return true;
}

void RequestApplySnapshotChunk::InternalSwap(RequestApplySnapshotChunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chunk_, lhs_arena,
      &other->chunk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sender_, lhs_arena,
      &other->sender_, rhs_arena
  );
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestApplySnapshotChunk::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[15]);
}

// ===================================================================

class Response::_Internal {
 public:
  static const ::tendermint::abci::ResponseException& exception(const Response* msg);
  static const ::tendermint::abci::ResponseEcho& echo(const Response* msg);
  static const ::tendermint::abci::ResponseFlush& flush(const Response* msg);
  static const ::tendermint::abci::ResponseInfo& info(const Response* msg);
  static const ::tendermint::abci::ResponseSetOption& set_option(const Response* msg);
  static const ::tendermint::abci::ResponseInitChain& init_chain(const Response* msg);
  static const ::tendermint::abci::ResponseQuery& query(const Response* msg);
  static const ::tendermint::abci::ResponseBeginBlock& begin_block(const Response* msg);
  static const ::tendermint::abci::ResponseCheckTx& check_tx(const Response* msg);
  static const ::tendermint::abci::ResponseDeliverTx& deliver_tx(const Response* msg);
  static const ::tendermint::abci::ResponseEndBlock& end_block(const Response* msg);
  static const ::tendermint::abci::ResponseCommit& commit(const Response* msg);
  static const ::tendermint::abci::ResponseListSnapshots& list_snapshots(const Response* msg);
  static const ::tendermint::abci::ResponseOfferSnapshot& offer_snapshot(const Response* msg);
  static const ::tendermint::abci::ResponseLoadSnapshotChunk& load_snapshot_chunk(const Response* msg);
  static const ::tendermint::abci::ResponseApplySnapshotChunk& apply_snapshot_chunk(const Response* msg);
};

const ::tendermint::abci::ResponseException&
Response::_Internal::exception(const Response* msg) {
  return *msg->value_.exception_;
}
const ::tendermint::abci::ResponseEcho&
Response::_Internal::echo(const Response* msg) {
  return *msg->value_.echo_;
}
const ::tendermint::abci::ResponseFlush&
Response::_Internal::flush(const Response* msg) {
  return *msg->value_.flush_;
}
const ::tendermint::abci::ResponseInfo&
Response::_Internal::info(const Response* msg) {
  return *msg->value_.info_;
}
const ::tendermint::abci::ResponseSetOption&
Response::_Internal::set_option(const Response* msg) {
  return *msg->value_.set_option_;
}
const ::tendermint::abci::ResponseInitChain&
Response::_Internal::init_chain(const Response* msg) {
  return *msg->value_.init_chain_;
}
const ::tendermint::abci::ResponseQuery&
Response::_Internal::query(const Response* msg) {
  return *msg->value_.query_;
}
const ::tendermint::abci::ResponseBeginBlock&
Response::_Internal::begin_block(const Response* msg) {
  return *msg->value_.begin_block_;
}
const ::tendermint::abci::ResponseCheckTx&
Response::_Internal::check_tx(const Response* msg) {
  return *msg->value_.check_tx_;
}
const ::tendermint::abci::ResponseDeliverTx&
Response::_Internal::deliver_tx(const Response* msg) {
  return *msg->value_.deliver_tx_;
}
const ::tendermint::abci::ResponseEndBlock&
Response::_Internal::end_block(const Response* msg) {
  return *msg->value_.end_block_;
}
const ::tendermint::abci::ResponseCommit&
Response::_Internal::commit(const Response* msg) {
  return *msg->value_.commit_;
}
const ::tendermint::abci::ResponseListSnapshots&
Response::_Internal::list_snapshots(const Response* msg) {
  return *msg->value_.list_snapshots_;
}
const ::tendermint::abci::ResponseOfferSnapshot&
Response::_Internal::offer_snapshot(const Response* msg) {
  return *msg->value_.offer_snapshot_;
}
const ::tendermint::abci::ResponseLoadSnapshotChunk&
Response::_Internal::load_snapshot_chunk(const Response* msg) {
  return *msg->value_.load_snapshot_chunk_;
}
const ::tendermint::abci::ResponseApplySnapshotChunk&
Response::_Internal::apply_snapshot_chunk(const Response* msg) {
  return *msg->value_.apply_snapshot_chunk_;
}
void Response::set_allocated_exception(::tendermint::abci::ResponseException* exception) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (exception) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::ResponseException>::GetOwningArena(exception);
    if (message_arena != submessage_arena) {
      exception = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exception, submessage_arena);
    }
    set_has_exception();
    value_.exception_ = exception;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.exception)
}
void Response::set_allocated_echo(::tendermint::abci::ResponseEcho* echo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (echo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::ResponseEcho>::GetOwningArena(echo);
    if (message_arena != submessage_arena) {
      echo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, echo, submessage_arena);
    }
    set_has_echo();
    value_.echo_ = echo;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.echo)
}
void Response::set_allocated_flush(::tendermint::abci::ResponseFlush* flush) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (flush) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::ResponseFlush>::GetOwningArena(flush);
    if (message_arena != submessage_arena) {
      flush = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flush, submessage_arena);
    }
    set_has_flush();
    value_.flush_ = flush;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.flush)
}
void Response::set_allocated_info(::tendermint::abci::ResponseInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::ResponseInfo>::GetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
    value_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.info)
}
void Response::set_allocated_set_option(::tendermint::abci::ResponseSetOption* set_option) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (set_option) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::ResponseSetOption>::GetOwningArena(set_option);
    if (message_arena != submessage_arena) {
      set_option = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_option, submessage_arena);
    }
    set_has_set_option();
    value_.set_option_ = set_option;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.set_option)
}
void Response::set_allocated_init_chain(::tendermint::abci::ResponseInitChain* init_chain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (init_chain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::ResponseInitChain>::GetOwningArena(init_chain);
    if (message_arena != submessage_arena) {
      init_chain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init_chain, submessage_arena);
    }
    set_has_init_chain();
    value_.init_chain_ = init_chain;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.init_chain)
}
void Response::set_allocated_query(::tendermint::abci::ResponseQuery* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::ResponseQuery>::GetOwningArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
    value_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.query)
}
void Response::set_allocated_begin_block(::tendermint::abci::ResponseBeginBlock* begin_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (begin_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::ResponseBeginBlock>::GetOwningArena(begin_block);
    if (message_arena != submessage_arena) {
      begin_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, begin_block, submessage_arena);
    }
    set_has_begin_block();
    value_.begin_block_ = begin_block;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.begin_block)
}
void Response::set_allocated_check_tx(::tendermint::abci::ResponseCheckTx* check_tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (check_tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::ResponseCheckTx>::GetOwningArena(check_tx);
    if (message_arena != submessage_arena) {
      check_tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_tx, submessage_arena);
    }
    set_has_check_tx();
    value_.check_tx_ = check_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.check_tx)
}
void Response::set_allocated_deliver_tx(::tendermint::abci::ResponseDeliverTx* deliver_tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (deliver_tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::ResponseDeliverTx>::GetOwningArena(deliver_tx);
    if (message_arena != submessage_arena) {
      deliver_tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deliver_tx, submessage_arena);
    }
    set_has_deliver_tx();
    value_.deliver_tx_ = deliver_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.deliver_tx)
}
void Response::set_allocated_end_block(::tendermint::abci::ResponseEndBlock* end_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (end_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::ResponseEndBlock>::GetOwningArena(end_block);
    if (message_arena != submessage_arena) {
      end_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_block, submessage_arena);
    }
    set_has_end_block();
    value_.end_block_ = end_block;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.end_block)
}
void Response::set_allocated_commit(::tendermint::abci::ResponseCommit* commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::ResponseCommit>::GetOwningArena(commit);
    if (message_arena != submessage_arena) {
      commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit, submessage_arena);
    }
    set_has_commit();
    value_.commit_ = commit;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.commit)
}
void Response::set_allocated_list_snapshots(::tendermint::abci::ResponseListSnapshots* list_snapshots) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (list_snapshots) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::ResponseListSnapshots>::GetOwningArena(list_snapshots);
    if (message_arena != submessage_arena) {
      list_snapshots = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_snapshots, submessage_arena);
    }
    set_has_list_snapshots();
    value_.list_snapshots_ = list_snapshots;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.list_snapshots)
}
void Response::set_allocated_offer_snapshot(::tendermint::abci::ResponseOfferSnapshot* offer_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (offer_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::ResponseOfferSnapshot>::GetOwningArena(offer_snapshot);
    if (message_arena != submessage_arena) {
      offer_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offer_snapshot, submessage_arena);
    }
    set_has_offer_snapshot();
    value_.offer_snapshot_ = offer_snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.offer_snapshot)
}
void Response::set_allocated_load_snapshot_chunk(::tendermint::abci::ResponseLoadSnapshotChunk* load_snapshot_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (load_snapshot_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::ResponseLoadSnapshotChunk>::GetOwningArena(load_snapshot_chunk);
    if (message_arena != submessage_arena) {
      load_snapshot_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load_snapshot_chunk, submessage_arena);
    }
    set_has_load_snapshot_chunk();
    value_.load_snapshot_chunk_ = load_snapshot_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.load_snapshot_chunk)
}
void Response::set_allocated_apply_snapshot_chunk(::tendermint::abci::ResponseApplySnapshotChunk* apply_snapshot_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (apply_snapshot_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::abci::ResponseApplySnapshotChunk>::GetOwningArena(apply_snapshot_chunk);
    if (message_arena != submessage_arena) {
      apply_snapshot_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply_snapshot_chunk, submessage_arena);
    }
    set_has_apply_snapshot_chunk();
    value_.apply_snapshot_chunk_ = apply_snapshot_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.apply_snapshot_chunk)
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kException: {
      _internal_mutable_exception()->::tendermint::abci::ResponseException::MergeFrom(from._internal_exception());
      break;
    }
    case kEcho: {
      _internal_mutable_echo()->::tendermint::abci::ResponseEcho::MergeFrom(from._internal_echo());
      break;
    }
    case kFlush: {
      _internal_mutable_flush()->::tendermint::abci::ResponseFlush::MergeFrom(from._internal_flush());
      break;
    }
    case kInfo: {
      _internal_mutable_info()->::tendermint::abci::ResponseInfo::MergeFrom(from._internal_info());
      break;
    }
    case kSetOption: {
      _internal_mutable_set_option()->::tendermint::abci::ResponseSetOption::MergeFrom(from._internal_set_option());
      break;
    }
    case kInitChain: {
      _internal_mutable_init_chain()->::tendermint::abci::ResponseInitChain::MergeFrom(from._internal_init_chain());
      break;
    }
    case kQuery: {
      _internal_mutable_query()->::tendermint::abci::ResponseQuery::MergeFrom(from._internal_query());
      break;
    }
    case kBeginBlock: {
      _internal_mutable_begin_block()->::tendermint::abci::ResponseBeginBlock::MergeFrom(from._internal_begin_block());
      break;
    }
    case kCheckTx: {
      _internal_mutable_check_tx()->::tendermint::abci::ResponseCheckTx::MergeFrom(from._internal_check_tx());
      break;
    }
    case kDeliverTx: {
      _internal_mutable_deliver_tx()->::tendermint::abci::ResponseDeliverTx::MergeFrom(from._internal_deliver_tx());
      break;
    }
    case kEndBlock: {
      _internal_mutable_end_block()->::tendermint::abci::ResponseEndBlock::MergeFrom(from._internal_end_block());
      break;
    }
    case kCommit: {
      _internal_mutable_commit()->::tendermint::abci::ResponseCommit::MergeFrom(from._internal_commit());
      break;
    }
    case kListSnapshots: {
      _internal_mutable_list_snapshots()->::tendermint::abci::ResponseListSnapshots::MergeFrom(from._internal_list_snapshots());
      break;
    }
    case kOfferSnapshot: {
      _internal_mutable_offer_snapshot()->::tendermint::abci::ResponseOfferSnapshot::MergeFrom(from._internal_offer_snapshot());
      break;
    }
    case kLoadSnapshotChunk: {
      _internal_mutable_load_snapshot_chunk()->::tendermint::abci::ResponseLoadSnapshotChunk::MergeFrom(from._internal_load_snapshot_chunk());
      break;
    }
    case kApplySnapshotChunk: {
      _internal_mutable_apply_snapshot_chunk()->::tendermint::abci::ResponseApplySnapshotChunk::MergeFrom(from._internal_apply_snapshot_chunk());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.Response)
}

inline void Response::SharedCtor() {
clear_has_value();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:tendermint.abci.Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Response::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:tendermint.abci.Response)
  switch (value_case()) {
    case kException: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.exception_;
      }
      break;
    }
    case kEcho: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.echo_;
      }
      break;
    }
    case kFlush: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.flush_;
      }
      break;
    }
    case kInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.info_;
      }
      break;
    }
    case kSetOption: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.set_option_;
      }
      break;
    }
    case kInitChain: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.init_chain_;
      }
      break;
    }
    case kQuery: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.query_;
      }
      break;
    }
    case kBeginBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.begin_block_;
      }
      break;
    }
    case kCheckTx: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.check_tx_;
      }
      break;
    }
    case kDeliverTx: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.deliver_tx_;
      }
      break;
    }
    case kEndBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.end_block_;
      }
      break;
    }
    case kCommit: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.commit_;
      }
      break;
    }
    case kListSnapshots: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.list_snapshots_;
      }
      break;
    }
    case kOfferSnapshot: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.offer_snapshot_;
      }
      break;
    }
    case kLoadSnapshotChunk: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.load_snapshot_chunk_;
      }
      break;
    }
    case kApplySnapshotChunk: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.apply_snapshot_chunk_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.abci.ResponseException exception = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_exception(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseEcho echo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_echo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseFlush flush = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_flush(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseInfo info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseSetOption set_option = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_option(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseInitChain init_chain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_init_chain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseQuery query = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseBeginBlock begin_block = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_begin_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseCheckTx check_tx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_tx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseDeliverTx deliver_tx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_deliver_tx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseEndBlock end_block = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseCommit commit = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseListSnapshots list_snapshots = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_snapshots(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseOfferSnapshot offer_snapshot = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_offer_snapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseLoadSnapshotChunk load_snapshot_chunk = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_load_snapshot_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseApplySnapshotChunk apply_snapshot_chunk = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_snapshot_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.abci.ResponseException exception = 1;
  if (_internal_has_exception()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::exception(this), target, stream);
  }

  // .tendermint.abci.ResponseEcho echo = 2;
  if (_internal_has_echo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::echo(this), target, stream);
  }

  // .tendermint.abci.ResponseFlush flush = 3;
  if (_internal_has_flush()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::flush(this), target, stream);
  }

  // .tendermint.abci.ResponseInfo info = 4;
  if (_internal_has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::info(this), target, stream);
  }

  // .tendermint.abci.ResponseSetOption set_option = 5;
  if (_internal_has_set_option()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::set_option(this), target, stream);
  }

  // .tendermint.abci.ResponseInitChain init_chain = 6;
  if (_internal_has_init_chain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::init_chain(this), target, stream);
  }

  // .tendermint.abci.ResponseQuery query = 7;
  if (_internal_has_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::query(this), target, stream);
  }

  // .tendermint.abci.ResponseBeginBlock begin_block = 8;
  if (_internal_has_begin_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::begin_block(this), target, stream);
  }

  // .tendermint.abci.ResponseCheckTx check_tx = 9;
  if (_internal_has_check_tx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::check_tx(this), target, stream);
  }

  // .tendermint.abci.ResponseDeliverTx deliver_tx = 10;
  if (_internal_has_deliver_tx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::deliver_tx(this), target, stream);
  }

  // .tendermint.abci.ResponseEndBlock end_block = 11;
  if (_internal_has_end_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::end_block(this), target, stream);
  }

  // .tendermint.abci.ResponseCommit commit = 12;
  if (_internal_has_commit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::commit(this), target, stream);
  }

  // .tendermint.abci.ResponseListSnapshots list_snapshots = 13;
  if (_internal_has_list_snapshots()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::list_snapshots(this), target, stream);
  }

  // .tendermint.abci.ResponseOfferSnapshot offer_snapshot = 14;
  if (_internal_has_offer_snapshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::offer_snapshot(this), target, stream);
  }

  // .tendermint.abci.ResponseLoadSnapshotChunk load_snapshot_chunk = 15;
  if (_internal_has_load_snapshot_chunk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::load_snapshot_chunk(this), target, stream);
  }

  // .tendermint.abci.ResponseApplySnapshotChunk apply_snapshot_chunk = 16;
  if (_internal_has_apply_snapshot_chunk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::apply_snapshot_chunk(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .tendermint.abci.ResponseException exception = 1;
    case kException: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.exception_);
      break;
    }
    // .tendermint.abci.ResponseEcho echo = 2;
    case kEcho: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.echo_);
      break;
    }
    // .tendermint.abci.ResponseFlush flush = 3;
    case kFlush: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.flush_);
      break;
    }
    // .tendermint.abci.ResponseInfo info = 4;
    case kInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.info_);
      break;
    }
    // .tendermint.abci.ResponseSetOption set_option = 5;
    case kSetOption: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.set_option_);
      break;
    }
    // .tendermint.abci.ResponseInitChain init_chain = 6;
    case kInitChain: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.init_chain_);
      break;
    }
    // .tendermint.abci.ResponseQuery query = 7;
    case kQuery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.query_);
      break;
    }
    // .tendermint.abci.ResponseBeginBlock begin_block = 8;
    case kBeginBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.begin_block_);
      break;
    }
    // .tendermint.abci.ResponseCheckTx check_tx = 9;
    case kCheckTx: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.check_tx_);
      break;
    }
    // .tendermint.abci.ResponseDeliverTx deliver_tx = 10;
    case kDeliverTx: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.deliver_tx_);
      break;
    }
    // .tendermint.abci.ResponseEndBlock end_block = 11;
    case kEndBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.end_block_);
      break;
    }
    // .tendermint.abci.ResponseCommit commit = 12;
    case kCommit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.commit_);
      break;
    }
    // .tendermint.abci.ResponseListSnapshots list_snapshots = 13;
    case kListSnapshots: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.list_snapshots_);
      break;
    }
    // .tendermint.abci.ResponseOfferSnapshot offer_snapshot = 14;
    case kOfferSnapshot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.offer_snapshot_);
      break;
    }
    // .tendermint.abci.ResponseLoadSnapshotChunk load_snapshot_chunk = 15;
    case kLoadSnapshotChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.load_snapshot_chunk_);
      break;
    }
    // .tendermint.abci.ResponseApplySnapshotChunk apply_snapshot_chunk = 16;
    case kApplySnapshotChunk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.apply_snapshot_chunk_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }

void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Response *>(to)->MergeFrom(
      static_cast<const Response &>(from));
}


void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kException: {
      _internal_mutable_exception()->::tendermint::abci::ResponseException::MergeFrom(from._internal_exception());
      break;
    }
    case kEcho: {
      _internal_mutable_echo()->::tendermint::abci::ResponseEcho::MergeFrom(from._internal_echo());
      break;
    }
    case kFlush: {
      _internal_mutable_flush()->::tendermint::abci::ResponseFlush::MergeFrom(from._internal_flush());
      break;
    }
    case kInfo: {
      _internal_mutable_info()->::tendermint::abci::ResponseInfo::MergeFrom(from._internal_info());
      break;
    }
    case kSetOption: {
      _internal_mutable_set_option()->::tendermint::abci::ResponseSetOption::MergeFrom(from._internal_set_option());
      break;
    }
    case kInitChain: {
      _internal_mutable_init_chain()->::tendermint::abci::ResponseInitChain::MergeFrom(from._internal_init_chain());
      break;
    }
    case kQuery: {
      _internal_mutable_query()->::tendermint::abci::ResponseQuery::MergeFrom(from._internal_query());
      break;
    }
    case kBeginBlock: {
      _internal_mutable_begin_block()->::tendermint::abci::ResponseBeginBlock::MergeFrom(from._internal_begin_block());
      break;
    }
    case kCheckTx: {
      _internal_mutable_check_tx()->::tendermint::abci::ResponseCheckTx::MergeFrom(from._internal_check_tx());
      break;
    }
    case kDeliverTx: {
      _internal_mutable_deliver_tx()->::tendermint::abci::ResponseDeliverTx::MergeFrom(from._internal_deliver_tx());
      break;
    }
    case kEndBlock: {
      _internal_mutable_end_block()->::tendermint::abci::ResponseEndBlock::MergeFrom(from._internal_end_block());
      break;
    }
    case kCommit: {
      _internal_mutable_commit()->::tendermint::abci::ResponseCommit::MergeFrom(from._internal_commit());
      break;
    }
    case kListSnapshots: {
      _internal_mutable_list_snapshots()->::tendermint::abci::ResponseListSnapshots::MergeFrom(from._internal_list_snapshots());
      break;
    }
    case kOfferSnapshot: {
      _internal_mutable_offer_snapshot()->::tendermint::abci::ResponseOfferSnapshot::MergeFrom(from._internal_offer_snapshot());
      break;
    }
    case kLoadSnapshotChunk: {
      _internal_mutable_load_snapshot_chunk()->::tendermint::abci::ResponseLoadSnapshotChunk::MergeFrom(from._internal_load_snapshot_chunk());
      break;
    }
    case kApplySnapshotChunk: {
      _internal_mutable_apply_snapshot_chunk()->::tendermint::abci::ResponseApplySnapshotChunk::MergeFrom(from._internal_apply_snapshot_chunk());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[16]);
}

// ===================================================================

class ResponseException::_Internal {
 public:
};

ResponseException::ResponseException(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseException)
}
ResponseException::ResponseException(const ResponseException& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseException)
}

inline void ResponseException::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseException::~ResponseException() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseException)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseException::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseException::ArenaDtor(void* object) {
  ResponseException* _this = reinterpret_cast< ResponseException* >(object);
  (void)_this;
}
void ResponseException::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseException::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseException::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseException)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseException::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.ResponseException.error"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseException::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseException)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseException.error");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseException)
  return target;
}

size_t ResponseException::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseException)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 1;
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseException::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseException::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseException::GetClassData() const { return &_class_data_; }

void ResponseException::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseException *>(to)->MergeFrom(
      static_cast<const ResponseException &>(from));
}


void ResponseException::MergeFrom(const ResponseException& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseException)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseException::CopyFrom(const ResponseException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseException::IsInitialized() const {
  return true;
}

void ResponseException::InternalSwap(ResponseException* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, lhs_arena,
      &other->error_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseException::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[17]);
}

// ===================================================================

class ResponseEcho::_Internal {
 public:
};

ResponseEcho::ResponseEcho(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseEcho)
}
ResponseEcho::ResponseEcho(const ResponseEcho& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseEcho)
}

inline void ResponseEcho::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseEcho::~ResponseEcho() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseEcho)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseEcho::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseEcho::ArenaDtor(void* object) {
  ResponseEcho* _this = reinterpret_cast< ResponseEcho* >(object);
  (void)_this;
}
void ResponseEcho::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseEcho::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseEcho::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseEcho)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseEcho::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.ResponseEcho.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseEcho::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseEcho)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseEcho.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseEcho)
  return target;
}

size_t ResponseEcho::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseEcho)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseEcho::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseEcho::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseEcho::GetClassData() const { return &_class_data_; }

void ResponseEcho::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseEcho *>(to)->MergeFrom(
      static_cast<const ResponseEcho &>(from));
}


void ResponseEcho::MergeFrom(const ResponseEcho& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseEcho)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseEcho::CopyFrom(const ResponseEcho& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseEcho)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEcho::IsInitialized() const {
  return true;
}

void ResponseEcho::InternalSwap(ResponseEcho* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseEcho::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[18]);
}

// ===================================================================

class ResponseFlush::_Internal {
 public:
};

ResponseFlush::ResponseFlush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseFlush)
}
ResponseFlush::ResponseFlush(const ResponseFlush& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseFlush)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseFlush::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseFlush::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResponseFlush::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[19]);
}

// ===================================================================

class ResponseInfo::_Internal {
 public:
};

ResponseInfo::ResponseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseInfo)
}
ResponseInfo::ResponseInfo(const ResponseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  last_block_app_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_block_app_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_block_app_hash().empty()) {
    last_block_app_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_block_app_hash(), 
      GetArenaForAllocation());
  }
  ::memcpy(&app_version_, &from.app_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_block_height_) -
    reinterpret_cast<char*>(&app_version_)) + sizeof(last_block_height_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseInfo)
}

inline void ResponseInfo::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_block_app_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_block_app_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_block_height_) -
    reinterpret_cast<char*>(&app_version_)) + sizeof(last_block_height_));
}

ResponseInfo::~ResponseInfo() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_block_app_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseInfo::ArenaDtor(void* object) {
  ResponseInfo* _this = reinterpret_cast< ResponseInfo* >(object);
  (void)_this;
}
void ResponseInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  version_.ClearToEmpty();
  last_block_app_hash_.ClearToEmpty();
  ::memset(&app_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_block_height_) -
      reinterpret_cast<char*>(&app_version_)) + sizeof(last_block_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.ResponseInfo.data"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.ResponseInfo.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 app_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          app_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_block_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          last_block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes last_block_app_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_last_block_app_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseInfo.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseInfo.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // uint64 app_version = 3;
  if (this->_internal_app_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_app_version(), target);
  }

  // int64 last_block_height = 4;
  if (this->_internal_last_block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_last_block_height(), target);
  }

  // bytes last_block_app_hash = 5;
  if (!this->_internal_last_block_app_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_last_block_app_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseInfo)
  return target;
}

size_t ResponseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // bytes last_block_app_hash = 5;
  if (!this->_internal_last_block_app_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_last_block_app_hash());
  }

  // uint64 app_version = 3;
  if (this->_internal_app_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_app_version());
  }

  // int64 last_block_height = 4;
  if (this->_internal_last_block_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_last_block_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseInfo::GetClassData() const { return &_class_data_; }

void ResponseInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseInfo *>(to)->MergeFrom(
      static_cast<const ResponseInfo &>(from));
}


void ResponseInfo::MergeFrom(const ResponseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from._internal_last_block_app_hash().empty()) {
    _internal_set_last_block_app_hash(from._internal_last_block_app_hash());
  }
  if (from._internal_app_version() != 0) {
    _internal_set_app_version(from._internal_app_version());
  }
  if (from._internal_last_block_height() != 0) {
    _internal_set_last_block_height(from._internal_last_block_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseInfo::CopyFrom(const ResponseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseInfo::IsInitialized() const {
  return true;
}

void ResponseInfo::InternalSwap(ResponseInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_block_app_hash_, lhs_arena,
      &other->last_block_app_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseInfo, last_block_height_)
      + sizeof(ResponseInfo::last_block_height_)
      - PROTOBUF_FIELD_OFFSET(ResponseInfo, app_version_)>(
          reinterpret_cast<char*>(&app_version_),
          reinterpret_cast<char*>(&other->app_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[20]);
}

// ===================================================================

class ResponseSetOption::_Internal {
 public:
};

ResponseSetOption::ResponseSetOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseSetOption)
}
ResponseSetOption::ResponseSetOption(const ResponseSetOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_log().empty()) {
    log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_log(), 
      GetArenaForAllocation());
  }
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info(), 
      GetArenaForAllocation());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseSetOption)
}

inline void ResponseSetOption::SharedCtor() {
log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
code_ = 0u;
}

ResponseSetOption::~ResponseSetOption() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseSetOption)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseSetOption::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseSetOption::ArenaDtor(void* object) {
  ResponseSetOption* _this = reinterpret_cast< ResponseSetOption* >(object);
  (void)_this;
}
void ResponseSetOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseSetOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseSetOption::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseSetOption)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_.ClearToEmpty();
  info_.ClearToEmpty();
  code_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseSetOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string log = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_log();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.ResponseSetOption.log"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.ResponseSetOption.info"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseSetOption::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseSetOption)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  // string log = 3;
  if (!this->_internal_log().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log().data(), static_cast<int>(this->_internal_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseSetOption.log");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_log(), target);
  }

  // string info = 4;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseSetOption.info");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseSetOption)
  return target;
}

size_t ResponseSetOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseSetOption)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string log = 3;
  if (!this->_internal_log().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log());
  }

  // string info = 4;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseSetOption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseSetOption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseSetOption::GetClassData() const { return &_class_data_; }

void ResponseSetOption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseSetOption *>(to)->MergeFrom(
      static_cast<const ResponseSetOption &>(from));
}


void ResponseSetOption::MergeFrom(const ResponseSetOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseSetOption)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_log().empty()) {
    _internal_set_log(from._internal_log());
  }
  if (!from._internal_info().empty()) {
    _internal_set_info(from._internal_info());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseSetOption::CopyFrom(const ResponseSetOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseSetOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSetOption::IsInitialized() const {
  return true;
}

void ResponseSetOption::InternalSwap(ResponseSetOption* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &log_, lhs_arena,
      &other->log_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &info_, lhs_arena,
      &other->info_, rhs_arena
  );
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseSetOption::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[21]);
}

// ===================================================================

class ResponseInitChain::_Internal {
 public:
  static const ::tendermint::abci::ConsensusParams& consensus_params(const ResponseInitChain* msg);
};

const ::tendermint::abci::ConsensusParams&
ResponseInitChain::_Internal::consensus_params(const ResponseInitChain* msg) {
  return *msg->consensus_params_;
}
ResponseInitChain::ResponseInitChain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  validators_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseInitChain)
}
ResponseInitChain::ResponseInitChain(const ResponseInitChain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      validators_(from.validators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_hash().empty()) {
    app_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_hash(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_consensus_params()) {
    consensus_params_ = new ::tendermint::abci::ConsensusParams(*from.consensus_params_);
  } else {
    consensus_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseInitChain)
}

inline void ResponseInitChain::SharedCtor() {
app_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
consensus_params_ = nullptr;
}

ResponseInitChain::~ResponseInitChain() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseInitChain)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseInitChain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete consensus_params_;
}

void ResponseInitChain::ArenaDtor(void* object) {
  ResponseInitChain* _this = reinterpret_cast< ResponseInitChain* >(object);
  (void)_this;
}
void ResponseInitChain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseInitChain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseInitChain::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseInitChain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validators_.Clear();
  app_hash_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && consensus_params_ != nullptr) {
    delete consensus_params_;
  }
  consensus_params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseInitChain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.abci.ConsensusParams consensus_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tendermint.abci.ValidatorUpdate validators = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes app_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_app_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseInitChain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseInitChain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.abci.ConsensusParams consensus_params = 1;
  if (this->_internal_has_consensus_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::consensus_params(this), target, stream);
  }

  // repeated .tendermint.abci.ValidatorUpdate validators = 2 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_validators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_validators(i), target, stream);
  }

  // bytes app_hash = 3;
  if (!this->_internal_app_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_app_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseInitChain)
  return target;
}

size_t ResponseInitChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseInitChain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.ValidatorUpdate validators = 2 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_validators_size();
  for (const auto& msg : this->validators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes app_hash = 3;
  if (!this->_internal_app_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_app_hash());
  }

  // .tendermint.abci.ConsensusParams consensus_params = 1;
  if (this->_internal_has_consensus_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consensus_params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseInitChain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseInitChain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseInitChain::GetClassData() const { return &_class_data_; }

void ResponseInitChain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseInitChain *>(to)->MergeFrom(
      static_cast<const ResponseInitChain &>(from));
}


void ResponseInitChain::MergeFrom(const ResponseInitChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseInitChain)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  validators_.MergeFrom(from.validators_);
  if (!from._internal_app_hash().empty()) {
    _internal_set_app_hash(from._internal_app_hash());
  }
  if (from._internal_has_consensus_params()) {
    _internal_mutable_consensus_params()->::tendermint::abci::ConsensusParams::MergeFrom(from._internal_consensus_params());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseInitChain::CopyFrom(const ResponseInitChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseInitChain::IsInitialized() const {
  return true;
}

void ResponseInitChain::InternalSwap(ResponseInitChain* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  validators_.InternalSwap(&other->validators_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_hash_, lhs_arena,
      &other->app_hash_, rhs_arena
  );
  swap(consensus_params_, other->consensus_params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseInitChain::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[22]);
}

// ===================================================================

class ResponseQuery::_Internal {
 public:
  static const ::tendermint::crypto::ProofOps& proof_ops(const ResponseQuery* msg);
};

const ::tendermint::crypto::ProofOps&
ResponseQuery::_Internal::proof_ops(const ResponseQuery* msg) {
  return *msg->proof_ops_;
}
void ResponseQuery::clear_proof_ops() {
  if (GetArenaForAllocation() == nullptr && proof_ops_ != nullptr) {
    delete proof_ops_;
  }
  proof_ops_ = nullptr;
}
ResponseQuery::ResponseQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseQuery)
}
ResponseQuery::ResponseQuery(const ResponseQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_log().empty()) {
    log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_log(), 
      GetArenaForAllocation());
  }
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info(), 
      GetArenaForAllocation());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  codespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    codespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codespace().empty()) {
    codespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_codespace(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_proof_ops()) {
    proof_ops_ = new ::tendermint::crypto::ProofOps(*from.proof_ops_);
  } else {
    proof_ops_ = nullptr;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&index_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseQuery)
}

inline void ResponseQuery::SharedCtor() {
log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
codespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  codespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&proof_ops_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&proof_ops_)) + sizeof(code_));
}

ResponseQuery::~ResponseQuery() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseQuery)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete proof_ops_;
}

void ResponseQuery::ArenaDtor(void* object) {
  ResponseQuery* _this = reinterpret_cast< ResponseQuery* >(object);
  (void)_this;
}
void ResponseQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_.ClearToEmpty();
  info_.ClearToEmpty();
  key_.ClearToEmpty();
  value_.ClearToEmpty();
  codespace_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && proof_ops_ != nullptr) {
    delete proof_ops_;
  }
  proof_ops_ = nullptr;
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&index_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string log = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_log();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.ResponseQuery.log"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.ResponseQuery.info"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.crypto.ProofOps proof_ops = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_ops(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string codespace = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_codespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.ResponseQuery.codespace"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  // string log = 3;
  if (!this->_internal_log().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log().data(), static_cast<int>(this->_internal_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseQuery.log");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_log(), target);
  }

  // string info = 4;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseQuery.info");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_info(), target);
  }

  // int64 index = 5;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_index(), target);
  }

  // bytes key = 6;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_key(), target);
  }

  // bytes value = 7;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_value(), target);
  }

  // .tendermint.crypto.ProofOps proof_ops = 8;
  if (this->_internal_has_proof_ops()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::proof_ops(this), target, stream);
  }

  // int64 height = 9;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_height(), target);
  }

  // string codespace = 10;
  if (!this->_internal_codespace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codespace().data(), static_cast<int>(this->_internal_codespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseQuery.codespace");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_codespace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseQuery)
  return target;
}

size_t ResponseQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string log = 3;
  if (!this->_internal_log().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log());
  }

  // string info = 4;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // bytes key = 6;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 7;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // string codespace = 10;
  if (!this->_internal_codespace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codespace());
  }

  // .tendermint.crypto.ProofOps proof_ops = 8;
  if (this->_internal_has_proof_ops()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proof_ops_);
  }

  // int64 index = 5;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_index());
  }

  // int64 height = 9;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseQuery::GetClassData() const { return &_class_data_; }

void ResponseQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseQuery *>(to)->MergeFrom(
      static_cast<const ResponseQuery &>(from));
}


void ResponseQuery::MergeFrom(const ResponseQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseQuery)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_log().empty()) {
    _internal_set_log(from._internal_log());
  }
  if (!from._internal_info().empty()) {
    _internal_set_info(from._internal_info());
  }
  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (!from._internal_codespace().empty()) {
    _internal_set_codespace(from._internal_codespace());
  }
  if (from._internal_has_proof_ops()) {
    _internal_mutable_proof_ops()->::tendermint::crypto::ProofOps::MergeFrom(from._internal_proof_ops());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseQuery::CopyFrom(const ResponseQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQuery::IsInitialized() const {
  return true;
}

void ResponseQuery::InternalSwap(ResponseQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &log_, lhs_arena,
      &other->log_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &info_, lhs_arena,
      &other->info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &codespace_, lhs_arena,
      &other->codespace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseQuery, code_)
      + sizeof(ResponseQuery::code_)
      - PROTOBUF_FIELD_OFFSET(ResponseQuery, proof_ops_)>(
          reinterpret_cast<char*>(&proof_ops_),
          reinterpret_cast<char*>(&other->proof_ops_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseQuery::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[23]);
}

// ===================================================================

class ResponseBeginBlock::_Internal {
 public:
};

ResponseBeginBlock::ResponseBeginBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseBeginBlock)
}
ResponseBeginBlock::ResponseBeginBlock(const ResponseBeginBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseBeginBlock)
}

inline void ResponseBeginBlock::SharedCtor() {
}

ResponseBeginBlock::~ResponseBeginBlock() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseBeginBlock)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseBeginBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponseBeginBlock::ArenaDtor(void* object) {
  ResponseBeginBlock* _this = reinterpret_cast< ResponseBeginBlock* >(object);
  (void)_this;
}
void ResponseBeginBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseBeginBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseBeginBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseBeginBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseBeginBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tendermint.abci.Event events = 1 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseBeginBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseBeginBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tendermint.abci.Event events = 1 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseBeginBlock)
  return target;
}

size_t ResponseBeginBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseBeginBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.Event events = 1 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseBeginBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseBeginBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseBeginBlock::GetClassData() const { return &_class_data_; }

void ResponseBeginBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseBeginBlock *>(to)->MergeFrom(
      static_cast<const ResponseBeginBlock &>(from));
}


void ResponseBeginBlock::MergeFrom(const ResponseBeginBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseBeginBlock)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseBeginBlock::CopyFrom(const ResponseBeginBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBeginBlock::IsInitialized() const {
  return true;
}

void ResponseBeginBlock::InternalSwap(ResponseBeginBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseBeginBlock::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[24]);
}

// ===================================================================

class ResponseCheckTx::_Internal {
 public:
};

ResponseCheckTx::ResponseCheckTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseCheckTx)
}
ResponseCheckTx::ResponseCheckTx(const ResponseCheckTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_log().empty()) {
    log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_log(), 
      GetArenaForAllocation());
  }
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info(), 
      GetArenaForAllocation());
  }
  codespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    codespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codespace().empty()) {
    codespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_codespace(), 
      GetArenaForAllocation());
  }
  ::memcpy(&gas_wanted_, &from.gas_wanted_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&gas_wanted_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseCheckTx)
}

inline void ResponseCheckTx::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
codespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  codespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gas_wanted_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&gas_wanted_)) + sizeof(code_));
}

ResponseCheckTx::~ResponseCheckTx() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseCheckTx)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseCheckTx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseCheckTx::ArenaDtor(void* object) {
  ResponseCheckTx* _this = reinterpret_cast< ResponseCheckTx* >(object);
  (void)_this;
}
void ResponseCheckTx::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseCheckTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseCheckTx::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseCheckTx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  data_.ClearToEmpty();
  log_.ClearToEmpty();
  info_.ClearToEmpty();
  codespace_.ClearToEmpty();
  ::memset(&gas_wanted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&gas_wanted_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseCheckTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string log = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_log();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.ResponseCheckTx.log"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.ResponseCheckTx.info"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gas_wanted = 5 [json_name = "gas_wanted"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          gas_wanted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gas_used = 6 [json_name = "gas_used"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tendermint.abci.Event events = 7 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string codespace = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_codespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.ResponseCheckTx.codespace"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseCheckTx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseCheckTx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // string log = 3;
  if (!this->_internal_log().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log().data(), static_cast<int>(this->_internal_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseCheckTx.log");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_log(), target);
  }

  // string info = 4;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseCheckTx.info");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_info(), target);
  }

  // int64 gas_wanted = 5 [json_name = "gas_wanted"];
  if (this->_internal_gas_wanted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_gas_wanted(), target);
  }

  // int64 gas_used = 6 [json_name = "gas_used"];
  if (this->_internal_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_gas_used(), target);
  }

  // repeated .tendermint.abci.Event events = 7 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_events(i), target, stream);
  }

  // string codespace = 8;
  if (!this->_internal_codespace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codespace().data(), static_cast<int>(this->_internal_codespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseCheckTx.codespace");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_codespace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseCheckTx)
  return target;
}

size_t ResponseCheckTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseCheckTx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.Event events = 7 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string log = 3;
  if (!this->_internal_log().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log());
  }

  // string info = 4;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // string codespace = 8;
  if (!this->_internal_codespace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codespace());
  }

  // int64 gas_wanted = 5 [json_name = "gas_wanted"];
  if (this->_internal_gas_wanted() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_gas_wanted());
  }

  // int64 gas_used = 6 [json_name = "gas_used"];
  if (this->_internal_gas_used() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_gas_used());
  }

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseCheckTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseCheckTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseCheckTx::GetClassData() const { return &_class_data_; }

void ResponseCheckTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseCheckTx *>(to)->MergeFrom(
      static_cast<const ResponseCheckTx &>(from));
}


void ResponseCheckTx::MergeFrom(const ResponseCheckTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseCheckTx)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (!from._internal_log().empty()) {
    _internal_set_log(from._internal_log());
  }
  if (!from._internal_info().empty()) {
    _internal_set_info(from._internal_info());
  }
  if (!from._internal_codespace().empty()) {
    _internal_set_codespace(from._internal_codespace());
  }
  if (from._internal_gas_wanted() != 0) {
    _internal_set_gas_wanted(from._internal_gas_wanted());
  }
  if (from._internal_gas_used() != 0) {
    _internal_set_gas_used(from._internal_gas_used());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseCheckTx::CopyFrom(const ResponseCheckTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseCheckTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCheckTx::IsInitialized() const {
  return true;
}

void ResponseCheckTx::InternalSwap(ResponseCheckTx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &log_, lhs_arena,
      &other->log_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &info_, lhs_arena,
      &other->info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &codespace_, lhs_arena,
      &other->codespace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseCheckTx, code_)
      + sizeof(ResponseCheckTx::code_)
      - PROTOBUF_FIELD_OFFSET(ResponseCheckTx, gas_wanted_)>(
          reinterpret_cast<char*>(&gas_wanted_),
          reinterpret_cast<char*>(&other->gas_wanted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseCheckTx::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[25]);
}

// ===================================================================

class ResponseDeliverTx::_Internal {
 public:
};

ResponseDeliverTx::ResponseDeliverTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseDeliverTx)
}
ResponseDeliverTx::ResponseDeliverTx(const ResponseDeliverTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_log().empty()) {
    log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_log(), 
      GetArenaForAllocation());
  }
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info(), 
      GetArenaForAllocation());
  }
  codespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    codespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codespace().empty()) {
    codespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_codespace(), 
      GetArenaForAllocation());
  }
  ::memcpy(&gas_wanted_, &from.gas_wanted_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&gas_wanted_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseDeliverTx)
}

inline void ResponseDeliverTx::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
codespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  codespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gas_wanted_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&gas_wanted_)) + sizeof(code_));
}

ResponseDeliverTx::~ResponseDeliverTx() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseDeliverTx)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseDeliverTx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseDeliverTx::ArenaDtor(void* object) {
  ResponseDeliverTx* _this = reinterpret_cast< ResponseDeliverTx* >(object);
  (void)_this;
}
void ResponseDeliverTx::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseDeliverTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseDeliverTx::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseDeliverTx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  data_.ClearToEmpty();
  log_.ClearToEmpty();
  info_.ClearToEmpty();
  codespace_.ClearToEmpty();
  ::memset(&gas_wanted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&gas_wanted_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseDeliverTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string log = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_log();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.ResponseDeliverTx.log"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.ResponseDeliverTx.info"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gas_wanted = 5 [json_name = "gas_wanted"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          gas_wanted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gas_used = 6 [json_name = "gas_used"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tendermint.abci.Event events = 7 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string codespace = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_codespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.ResponseDeliverTx.codespace"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseDeliverTx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseDeliverTx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // string log = 3;
  if (!this->_internal_log().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log().data(), static_cast<int>(this->_internal_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseDeliverTx.log");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_log(), target);
  }

  // string info = 4;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseDeliverTx.info");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_info(), target);
  }

  // int64 gas_wanted = 5 [json_name = "gas_wanted"];
  if (this->_internal_gas_wanted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_gas_wanted(), target);
  }

  // int64 gas_used = 6 [json_name = "gas_used"];
  if (this->_internal_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_gas_used(), target);
  }

  // repeated .tendermint.abci.Event events = 7 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_events(i), target, stream);
  }

  // string codespace = 8;
  if (!this->_internal_codespace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codespace().data(), static_cast<int>(this->_internal_codespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseDeliverTx.codespace");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_codespace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseDeliverTx)
  return target;
}

size_t ResponseDeliverTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseDeliverTx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.Event events = 7 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string log = 3;
  if (!this->_internal_log().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log());
  }

  // string info = 4;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // string codespace = 8;
  if (!this->_internal_codespace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codespace());
  }

  // int64 gas_wanted = 5 [json_name = "gas_wanted"];
  if (this->_internal_gas_wanted() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_gas_wanted());
  }

  // int64 gas_used = 6 [json_name = "gas_used"];
  if (this->_internal_gas_used() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_gas_used());
  }

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseDeliverTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseDeliverTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseDeliverTx::GetClassData() const { return &_class_data_; }

void ResponseDeliverTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseDeliverTx *>(to)->MergeFrom(
      static_cast<const ResponseDeliverTx &>(from));
}


void ResponseDeliverTx::MergeFrom(const ResponseDeliverTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseDeliverTx)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (!from._internal_log().empty()) {
    _internal_set_log(from._internal_log());
  }
  if (!from._internal_info().empty()) {
    _internal_set_info(from._internal_info());
  }
  if (!from._internal_codespace().empty()) {
    _internal_set_codespace(from._internal_codespace());
  }
  if (from._internal_gas_wanted() != 0) {
    _internal_set_gas_wanted(from._internal_gas_wanted());
  }
  if (from._internal_gas_used() != 0) {
    _internal_set_gas_used(from._internal_gas_used());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseDeliverTx::CopyFrom(const ResponseDeliverTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDeliverTx::IsInitialized() const {
  return true;
}

void ResponseDeliverTx::InternalSwap(ResponseDeliverTx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &log_, lhs_arena,
      &other->log_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &info_, lhs_arena,
      &other->info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &codespace_, lhs_arena,
      &other->codespace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseDeliverTx, code_)
      + sizeof(ResponseDeliverTx::code_)
      - PROTOBUF_FIELD_OFFSET(ResponseDeliverTx, gas_wanted_)>(
          reinterpret_cast<char*>(&gas_wanted_),
          reinterpret_cast<char*>(&other->gas_wanted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseDeliverTx::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[26]);
}

// ===================================================================

class ResponseEndBlock::_Internal {
 public:
  static const ::tendermint::abci::ConsensusParams& consensus_param_updates(const ResponseEndBlock* msg);
};

const ::tendermint::abci::ConsensusParams&
ResponseEndBlock::_Internal::consensus_param_updates(const ResponseEndBlock* msg) {
  return *msg->consensus_param_updates_;
}
ResponseEndBlock::ResponseEndBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  validator_updates_(arena),
  events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseEndBlock)
}
ResponseEndBlock::ResponseEndBlock(const ResponseEndBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      validator_updates_(from.validator_updates_),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_consensus_param_updates()) {
    consensus_param_updates_ = new ::tendermint::abci::ConsensusParams(*from.consensus_param_updates_);
  } else {
    consensus_param_updates_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseEndBlock)
}

inline void ResponseEndBlock::SharedCtor() {
consensus_param_updates_ = nullptr;
}

ResponseEndBlock::~ResponseEndBlock() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseEndBlock)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseEndBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete consensus_param_updates_;
}

void ResponseEndBlock::ArenaDtor(void* object) {
  ResponseEndBlock* _this = reinterpret_cast< ResponseEndBlock* >(object);
  (void)_this;
}
void ResponseEndBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseEndBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseEndBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseEndBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validator_updates_.Clear();
  events_.Clear();
  if (GetArenaForAllocation() == nullptr && consensus_param_updates_ != nullptr) {
    delete consensus_param_updates_;
  }
  consensus_param_updates_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseEndBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tendermint.abci.ValidatorUpdate validator_updates = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validator_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ConsensusParams consensus_param_updates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_param_updates(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tendermint.abci.Event events = 3 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseEndBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseEndBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tendermint.abci.ValidatorUpdate validator_updates = 1 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_validator_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_validator_updates(i), target, stream);
  }

  // .tendermint.abci.ConsensusParams consensus_param_updates = 2;
  if (this->_internal_has_consensus_param_updates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::consensus_param_updates(this), target, stream);
  }

  // repeated .tendermint.abci.Event events = 3 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseEndBlock)
  return target;
}

size_t ResponseEndBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseEndBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.ValidatorUpdate validator_updates = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_validator_updates_size();
  for (const auto& msg : this->validator_updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tendermint.abci.Event events = 3 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tendermint.abci.ConsensusParams consensus_param_updates = 2;
  if (this->_internal_has_consensus_param_updates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consensus_param_updates_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseEndBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseEndBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseEndBlock::GetClassData() const { return &_class_data_; }

void ResponseEndBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseEndBlock *>(to)->MergeFrom(
      static_cast<const ResponseEndBlock &>(from));
}


void ResponseEndBlock::MergeFrom(const ResponseEndBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseEndBlock)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  validator_updates_.MergeFrom(from.validator_updates_);
  events_.MergeFrom(from.events_);
  if (from._internal_has_consensus_param_updates()) {
    _internal_mutable_consensus_param_updates()->::tendermint::abci::ConsensusParams::MergeFrom(from._internal_consensus_param_updates());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseEndBlock::CopyFrom(const ResponseEndBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseEndBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEndBlock::IsInitialized() const {
  return true;
}

void ResponseEndBlock::InternalSwap(ResponseEndBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  validator_updates_.InternalSwap(&other->validator_updates_);
  events_.InternalSwap(&other->events_);
  swap(consensus_param_updates_, other->consensus_param_updates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseEndBlock::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[27]);
}

// ===================================================================

class ResponseCommit::_Internal {
 public:
};

ResponseCommit::ResponseCommit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseCommit)
}
ResponseCommit::ResponseCommit(const ResponseCommit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  retain_height_ = from.retain_height_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseCommit)
}

inline void ResponseCommit::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
retain_height_ = int64_t{0};
}

ResponseCommit::~ResponseCommit() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseCommit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseCommit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseCommit::ArenaDtor(void* object) {
  ResponseCommit* _this = reinterpret_cast< ResponseCommit* >(object);
  (void)_this;
}
void ResponseCommit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseCommit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseCommit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  retain_height_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseCommit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 retain_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          retain_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseCommit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseCommit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // int64 retain_height = 3;
  if (this->_internal_retain_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_retain_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseCommit)
  return target;
}

size_t ResponseCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseCommit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 retain_height = 3;
  if (this->_internal_retain_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_retain_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseCommit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseCommit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseCommit::GetClassData() const { return &_class_data_; }

void ResponseCommit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseCommit *>(to)->MergeFrom(
      static_cast<const ResponseCommit &>(from));
}


void ResponseCommit::MergeFrom(const ResponseCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseCommit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_retain_height() != 0) {
    _internal_set_retain_height(from._internal_retain_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseCommit::CopyFrom(const ResponseCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCommit::IsInitialized() const {
  return true;
}

void ResponseCommit::InternalSwap(ResponseCommit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(retain_height_, other->retain_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseCommit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[28]);
}

// ===================================================================

class ResponseListSnapshots::_Internal {
 public:
};

ResponseListSnapshots::ResponseListSnapshots(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  snapshots_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseListSnapshots)
}
ResponseListSnapshots::ResponseListSnapshots(const ResponseListSnapshots& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      snapshots_(from.snapshots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseListSnapshots)
}

inline void ResponseListSnapshots::SharedCtor() {
}

ResponseListSnapshots::~ResponseListSnapshots() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseListSnapshots)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseListSnapshots::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponseListSnapshots::ArenaDtor(void* object) {
  ResponseListSnapshots* _this = reinterpret_cast< ResponseListSnapshots* >(object);
  (void)_this;
}
void ResponseListSnapshots::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseListSnapshots::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseListSnapshots::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseListSnapshots)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshots_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseListSnapshots::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tendermint.abci.Snapshot snapshots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_snapshots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseListSnapshots::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseListSnapshots)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tendermint.abci.Snapshot snapshots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_snapshots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_snapshots(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseListSnapshots)
  return target;
}

size_t ResponseListSnapshots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseListSnapshots)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.Snapshot snapshots = 1;
  total_size += 1UL * this->_internal_snapshots_size();
  for (const auto& msg : this->snapshots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseListSnapshots::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseListSnapshots::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseListSnapshots::GetClassData() const { return &_class_data_; }

void ResponseListSnapshots::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseListSnapshots *>(to)->MergeFrom(
      static_cast<const ResponseListSnapshots &>(from));
}


void ResponseListSnapshots::MergeFrom(const ResponseListSnapshots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseListSnapshots)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  snapshots_.MergeFrom(from.snapshots_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseListSnapshots::CopyFrom(const ResponseListSnapshots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseListSnapshots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseListSnapshots::IsInitialized() const {
  return true;
}

void ResponseListSnapshots::InternalSwap(ResponseListSnapshots* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  snapshots_.InternalSwap(&other->snapshots_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseListSnapshots::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[29]);
}

// ===================================================================

class ResponseOfferSnapshot::_Internal {
 public:
};

ResponseOfferSnapshot::ResponseOfferSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseOfferSnapshot)
}
ResponseOfferSnapshot::ResponseOfferSnapshot(const ResponseOfferSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseOfferSnapshot)
}

inline void ResponseOfferSnapshot::SharedCtor() {
result_ = 0;
}

ResponseOfferSnapshot::~ResponseOfferSnapshot() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseOfferSnapshot)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseOfferSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponseOfferSnapshot::ArenaDtor(void* object) {
  ResponseOfferSnapshot* _this = reinterpret_cast< ResponseOfferSnapshot* >(object);
  (void)_this;
}
void ResponseOfferSnapshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseOfferSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseOfferSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseOfferSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseOfferSnapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.abci.ResponseOfferSnapshot.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::tendermint::abci::ResponseOfferSnapshot_Result>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseOfferSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseOfferSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.abci.ResponseOfferSnapshot.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseOfferSnapshot)
  return target;
}

size_t ResponseOfferSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseOfferSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.abci.ResponseOfferSnapshot.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseOfferSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseOfferSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseOfferSnapshot::GetClassData() const { return &_class_data_; }

void ResponseOfferSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseOfferSnapshot *>(to)->MergeFrom(
      static_cast<const ResponseOfferSnapshot &>(from));
}


void ResponseOfferSnapshot::MergeFrom(const ResponseOfferSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseOfferSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseOfferSnapshot::CopyFrom(const ResponseOfferSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseOfferSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseOfferSnapshot::IsInitialized() const {
  return true;
}

void ResponseOfferSnapshot::InternalSwap(ResponseOfferSnapshot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseOfferSnapshot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[30]);
}

// ===================================================================

class ResponseLoadSnapshotChunk::_Internal {
 public:
};

ResponseLoadSnapshotChunk::ResponseLoadSnapshotChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseLoadSnapshotChunk)
}
ResponseLoadSnapshotChunk::ResponseLoadSnapshotChunk(const ResponseLoadSnapshotChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chunk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chunk().empty()) {
    chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chunk(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseLoadSnapshotChunk)
}

inline void ResponseLoadSnapshotChunk::SharedCtor() {
chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chunk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseLoadSnapshotChunk::~ResponseLoadSnapshotChunk() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseLoadSnapshotChunk)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseLoadSnapshotChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseLoadSnapshotChunk::ArenaDtor(void* object) {
  ResponseLoadSnapshotChunk* _this = reinterpret_cast< ResponseLoadSnapshotChunk* >(object);
  (void)_this;
}
void ResponseLoadSnapshotChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseLoadSnapshotChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseLoadSnapshotChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseLoadSnapshotChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseLoadSnapshotChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseLoadSnapshotChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseLoadSnapshotChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (!this->_internal_chunk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseLoadSnapshotChunk)
  return target;
}

size_t ResponseLoadSnapshotChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseLoadSnapshotChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (!this->_internal_chunk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chunk());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseLoadSnapshotChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseLoadSnapshotChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseLoadSnapshotChunk::GetClassData() const { return &_class_data_; }

void ResponseLoadSnapshotChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseLoadSnapshotChunk *>(to)->MergeFrom(
      static_cast<const ResponseLoadSnapshotChunk &>(from));
}


void ResponseLoadSnapshotChunk::MergeFrom(const ResponseLoadSnapshotChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseLoadSnapshotChunk)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chunk().empty()) {
    _internal_set_chunk(from._internal_chunk());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseLoadSnapshotChunk::CopyFrom(const ResponseLoadSnapshotChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseLoadSnapshotChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLoadSnapshotChunk::IsInitialized() const {
  return true;
}

void ResponseLoadSnapshotChunk::InternalSwap(ResponseLoadSnapshotChunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chunk_, lhs_arena,
      &other->chunk_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseLoadSnapshotChunk::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[31]);
}

// ===================================================================

class ResponseApplySnapshotChunk::_Internal {
 public:
};

ResponseApplySnapshotChunk::ResponseApplySnapshotChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  refetch_chunks_(arena),
  reject_senders_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseApplySnapshotChunk)
}
ResponseApplySnapshotChunk::ResponseApplySnapshotChunk(const ResponseApplySnapshotChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      refetch_chunks_(from.refetch_chunks_),
      reject_senders_(from.reject_senders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseApplySnapshotChunk)
}

inline void ResponseApplySnapshotChunk::SharedCtor() {
result_ = 0;
}

ResponseApplySnapshotChunk::~ResponseApplySnapshotChunk() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseApplySnapshotChunk)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseApplySnapshotChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponseApplySnapshotChunk::ArenaDtor(void* object) {
  ResponseApplySnapshotChunk* _this = reinterpret_cast< ResponseApplySnapshotChunk* >(object);
  (void)_this;
}
void ResponseApplySnapshotChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseApplySnapshotChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseApplySnapshotChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseApplySnapshotChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  refetch_chunks_.Clear();
  reject_senders_.Clear();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseApplySnapshotChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.abci.ResponseApplySnapshotChunk.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::tendermint::abci::ResponseApplySnapshotChunk_Result>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 refetch_chunks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_refetch_chunks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_refetch_chunks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string reject_senders = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_reject_senders();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.ResponseApplySnapshotChunk.reject_senders"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseApplySnapshotChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseApplySnapshotChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.abci.ResponseApplySnapshotChunk.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated uint32 refetch_chunks = 2;
  {
    int byte_size = _refetch_chunks_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_refetch_chunks(), byte_size, target);
    }
  }

  // repeated string reject_senders = 3;
  for (int i = 0, n = this->_internal_reject_senders_size(); i < n; i++) {
    const auto& s = this->_internal_reject_senders(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseApplySnapshotChunk.reject_senders");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseApplySnapshotChunk)
  return target;
}

size_t ResponseApplySnapshotChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseApplySnapshotChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 refetch_chunks = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->refetch_chunks_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _refetch_chunks_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string reject_senders = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(reject_senders_.size());
  for (int i = 0, n = reject_senders_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      reject_senders_.Get(i));
  }

  // .tendermint.abci.ResponseApplySnapshotChunk.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseApplySnapshotChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseApplySnapshotChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseApplySnapshotChunk::GetClassData() const { return &_class_data_; }

void ResponseApplySnapshotChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseApplySnapshotChunk *>(to)->MergeFrom(
      static_cast<const ResponseApplySnapshotChunk &>(from));
}


void ResponseApplySnapshotChunk::MergeFrom(const ResponseApplySnapshotChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseApplySnapshotChunk)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  refetch_chunks_.MergeFrom(from.refetch_chunks_);
  reject_senders_.MergeFrom(from.reject_senders_);
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseApplySnapshotChunk::CopyFrom(const ResponseApplySnapshotChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseApplySnapshotChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseApplySnapshotChunk::IsInitialized() const {
  return true;
}

void ResponseApplySnapshotChunk::InternalSwap(ResponseApplySnapshotChunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  refetch_chunks_.InternalSwap(&other->refetch_chunks_);
  reject_senders_.InternalSwap(&other->reject_senders_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseApplySnapshotChunk::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[32]);
}

// ===================================================================

class ConsensusParams::_Internal {
 public:
  static const ::tendermint::abci::BlockParams& block(const ConsensusParams* msg);
  static const ::tendermint::types::EvidenceParams& evidence(const ConsensusParams* msg);
  static const ::tendermint::types::ValidatorParams& validator(const ConsensusParams* msg);
  static const ::tendermint::types::VersionParams& version(const ConsensusParams* msg);
};

const ::tendermint::abci::BlockParams&
ConsensusParams::_Internal::block(const ConsensusParams* msg) {
  return *msg->block_;
}
const ::tendermint::types::EvidenceParams&
ConsensusParams::_Internal::evidence(const ConsensusParams* msg) {
  return *msg->evidence_;
}
const ::tendermint::types::ValidatorParams&
ConsensusParams::_Internal::validator(const ConsensusParams* msg) {
  return *msg->validator_;
}
const ::tendermint::types::VersionParams&
ConsensusParams::_Internal::version(const ConsensusParams* msg) {
  return *msg->version_;
}
void ConsensusParams::clear_evidence() {
  if (GetArenaForAllocation() == nullptr && evidence_ != nullptr) {
    delete evidence_;
  }
  evidence_ = nullptr;
}
void ConsensusParams::clear_validator() {
  if (GetArenaForAllocation() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
}
void ConsensusParams::clear_version() {
  if (GetArenaForAllocation() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
ConsensusParams::ConsensusParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ConsensusParams)
}
ConsensusParams::ConsensusParams(const ConsensusParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::tendermint::abci::BlockParams(*from.block_);
  } else {
    block_ = nullptr;
  }
  if (from._internal_has_evidence()) {
    evidence_ = new ::tendermint::types::EvidenceParams(*from.evidence_);
  } else {
    evidence_ = nullptr;
  }
  if (from._internal_has_validator()) {
    validator_ = new ::tendermint::types::ValidatorParams(*from.validator_);
  } else {
    validator_ = nullptr;
  }
  if (from._internal_has_version()) {
    version_ = new ::tendermint::types::VersionParams(*from.version_);
  } else {
    version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ConsensusParams)
}

inline void ConsensusParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&block_)) + sizeof(version_));
}

ConsensusParams::~ConsensusParams() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ConsensusParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConsensusParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_;
  if (this != internal_default_instance()) delete evidence_;
  if (this != internal_default_instance()) delete validator_;
  if (this != internal_default_instance()) delete version_;
}

void ConsensusParams::ArenaDtor(void* object) {
  ConsensusParams* _this = reinterpret_cast< ConsensusParams* >(object);
  (void)_this;
}
void ConsensusParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConsensusParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConsensusParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ConsensusParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  if (GetArenaForAllocation() == nullptr && evidence_ != nullptr) {
    delete evidence_;
  }
  evidence_ = nullptr;
  if (GetArenaForAllocation() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
  if (GetArenaForAllocation() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsensusParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.abci.BlockParams block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.EvidenceParams evidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_evidence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.ValidatorParams validator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.VersionParams version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConsensusParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ConsensusParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.abci.BlockParams block = 1;
  if (this->_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  // .tendermint.types.EvidenceParams evidence = 2;
  if (this->_internal_has_evidence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::evidence(this), target, stream);
  }

  // .tendermint.types.ValidatorParams validator = 3;
  if (this->_internal_has_validator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::validator(this), target, stream);
  }

  // .tendermint.types.VersionParams version = 4;
  if (this->_internal_has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ConsensusParams)
  return target;
}

size_t ConsensusParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ConsensusParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.abci.BlockParams block = 1;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  // .tendermint.types.EvidenceParams evidence = 2;
  if (this->_internal_has_evidence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *evidence_);
  }

  // .tendermint.types.ValidatorParams validator = 3;
  if (this->_internal_has_validator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validator_);
  }

  // .tendermint.types.VersionParams version = 4;
  if (this->_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConsensusParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConsensusParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConsensusParams::GetClassData() const { return &_class_data_; }

void ConsensusParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConsensusParams *>(to)->MergeFrom(
      static_cast<const ConsensusParams &>(from));
}


void ConsensusParams::MergeFrom(const ConsensusParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ConsensusParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _internal_mutable_block()->::tendermint::abci::BlockParams::MergeFrom(from._internal_block());
  }
  if (from._internal_has_evidence()) {
    _internal_mutable_evidence()->::tendermint::types::EvidenceParams::MergeFrom(from._internal_evidence());
  }
  if (from._internal_has_validator()) {
    _internal_mutable_validator()->::tendermint::types::ValidatorParams::MergeFrom(from._internal_validator());
  }
  if (from._internal_has_version()) {
    _internal_mutable_version()->::tendermint::types::VersionParams::MergeFrom(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConsensusParams::CopyFrom(const ConsensusParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ConsensusParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusParams::IsInitialized() const {
  return true;
}

void ConsensusParams::InternalSwap(ConsensusParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsensusParams, version_)
      + sizeof(ConsensusParams::version_)
      - PROTOBUF_FIELD_OFFSET(ConsensusParams, block_)>(
          reinterpret_cast<char*>(&block_),
          reinterpret_cast<char*>(&other->block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[33]);
}

// ===================================================================

class BlockParams::_Internal {
 public:
};

BlockParams::BlockParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.BlockParams)
}
BlockParams::BlockParams(const BlockParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_bytes_, &from.max_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_gas_) -
    reinterpret_cast<char*>(&max_bytes_)) + sizeof(max_gas_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.BlockParams)
}

inline void BlockParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_bytes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_gas_) -
    reinterpret_cast<char*>(&max_bytes_)) + sizeof(max_gas_));
}

BlockParams::~BlockParams() {
  // @@protoc_insertion_point(destructor:tendermint.abci.BlockParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockParams::ArenaDtor(void* object) {
  BlockParams* _this = reinterpret_cast< BlockParams* >(object);
  (void)_this;
}
void BlockParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.BlockParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_gas_) -
      reinterpret_cast<char*>(&max_bytes_)) + sizeof(max_gas_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 max_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          max_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 max_gas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          max_gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.BlockParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_bytes = 1;
  if (this->_internal_max_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_bytes(), target);
  }

  // int64 max_gas = 2;
  if (this->_internal_max_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_max_gas(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.BlockParams)
  return target;
}

size_t BlockParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.BlockParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 max_bytes = 1;
  if (this->_internal_max_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_bytes());
  }

  // int64 max_gas = 2;
  if (this->_internal_max_gas() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_gas());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockParams::GetClassData() const { return &_class_data_; }

void BlockParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockParams *>(to)->MergeFrom(
      static_cast<const BlockParams &>(from));
}


void BlockParams::MergeFrom(const BlockParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.BlockParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_bytes() != 0) {
    _internal_set_max_bytes(from._internal_max_bytes());
  }
  if (from._internal_max_gas() != 0) {
    _internal_set_max_gas(from._internal_max_gas());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockParams::CopyFrom(const BlockParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.BlockParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockParams::IsInitialized() const {
  return true;
}

void BlockParams::InternalSwap(BlockParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockParams, max_gas_)
      + sizeof(BlockParams::max_gas_)
      - PROTOBUF_FIELD_OFFSET(BlockParams, max_bytes_)>(
          reinterpret_cast<char*>(&max_bytes_),
          reinterpret_cast<char*>(&other->max_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[34]);
}

// ===================================================================

class LastCommitInfo::_Internal {
 public:
};

LastCommitInfo::LastCommitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  votes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.LastCommitInfo)
}
LastCommitInfo::LastCommitInfo(const LastCommitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      votes_(from.votes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  round_ = from.round_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.LastCommitInfo)
}

inline void LastCommitInfo::SharedCtor() {
round_ = 0;
}

LastCommitInfo::~LastCommitInfo() {
  // @@protoc_insertion_point(destructor:tendermint.abci.LastCommitInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LastCommitInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LastCommitInfo::ArenaDtor(void* object) {
  LastCommitInfo* _this = reinterpret_cast< LastCommitInfo* >(object);
  (void)_this;
}
void LastCommitInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LastCommitInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LastCommitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.LastCommitInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  round_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LastCommitInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 round = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tendermint.abci.VoteInfo votes = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LastCommitInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.LastCommitInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 round = 1;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_round(), target);
  }

  // repeated .tendermint.abci.VoteInfo votes = 2 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_votes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.LastCommitInfo)
  return target;
}

size_t LastCommitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.LastCommitInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.VoteInfo votes = 2 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 round = 1;
  if (this->_internal_round() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LastCommitInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LastCommitInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LastCommitInfo::GetClassData() const { return &_class_data_; }

void LastCommitInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LastCommitInfo *>(to)->MergeFrom(
      static_cast<const LastCommitInfo &>(from));
}


void LastCommitInfo::MergeFrom(const LastCommitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.LastCommitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
  if (from._internal_round() != 0) {
    _internal_set_round(from._internal_round());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LastCommitInfo::CopyFrom(const LastCommitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.LastCommitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastCommitInfo::IsInitialized() const {
  return true;
}

void LastCommitInfo::InternalSwap(LastCommitInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  votes_.InternalSwap(&other->votes_);
  swap(round_, other->round_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LastCommitInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[35]);
}

// ===================================================================

class Event::_Internal {
 public:
};

Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  attributes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.Event)
}

inline void Event::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:tendermint.abci.Event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Event::ArenaDtor(void* object) {
  Event* _this = reinterpret_cast< Event* >(object);
  (void)_this;
}
void Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.Event)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.abci.Event.type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tendermint.abci.EventAttribute attributes = 2 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "attributes,omitempty"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Event::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.Event)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.Event.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // repeated .tendermint.abci.EventAttribute attributes = 2 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "attributes,omitempty"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_attributes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.Event)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.EventAttribute attributes = 2 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "attributes,omitempty"];
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Event::GetClassData() const { return &_class_data_; }

void Event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Event *>(to)->MergeFrom(
      static_cast<const Event &>(from));
}


void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.Event)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  attributes_.InternalSwap(&other->attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[36]);
}

// ===================================================================

class EventAttribute::_Internal {
 public:
};

EventAttribute::EventAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.EventAttribute)
}
EventAttribute::EventAttribute(const EventAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.EventAttribute)
}

inline void EventAttribute::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
index_ = false;
}

EventAttribute::~EventAttribute() {
  // @@protoc_insertion_point(destructor:tendermint.abci.EventAttribute)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EventAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EventAttribute::ArenaDtor(void* object) {
  EventAttribute* _this = reinterpret_cast< EventAttribute* >(object);
  (void)_this;
}
void EventAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.EventAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  index_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.EventAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // bool index = 3;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.EventAttribute)
  return target;
}

size_t EventAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.EventAttribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // bool index = 3;
  if (this->_internal_index() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EventAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventAttribute::GetClassData() const { return &_class_data_; }

void EventAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EventAttribute *>(to)->MergeFrom(
      static_cast<const EventAttribute &>(from));
}


void EventAttribute::MergeFrom(const EventAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.EventAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventAttribute::CopyFrom(const EventAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.EventAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventAttribute::IsInitialized() const {
  return true;
}

void EventAttribute::InternalSwap(EventAttribute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventAttribute::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[37]);
}

// ===================================================================

class TxResult::_Internal {
 public:
  static const ::tendermint::abci::ResponseDeliverTx& result(const TxResult* msg);
};

const ::tendermint::abci::ResponseDeliverTx&
TxResult::_Internal::result(const TxResult* msg) {
  return *msg->result_;
}
TxResult::TxResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.TxResult)
}
TxResult::TxResult(const TxResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_result()) {
    result_ = new ::tendermint::abci::ResponseDeliverTx(*from.result_);
  } else {
    result_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&height_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.TxResult)
}

inline void TxResult::SharedCtor() {
tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&result_)) + sizeof(index_));
}

TxResult::~TxResult() {
  // @@protoc_insertion_point(destructor:tendermint.abci.TxResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TxResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_;
}

void TxResult::ArenaDtor(void* object) {
  TxResult* _this = reinterpret_cast< TxResult* >(object);
  (void)_this;
}
void TxResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TxResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TxResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.TxResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&height_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes tx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseDeliverTx result = 4 [(.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.TxResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_height(), target);
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // bytes tx = 3;
  if (!this->_internal_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_tx(), target);
  }

  // .tendermint.abci.ResponseDeliverTx result = 4 [(.gogoproto.nullable) = false];
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.TxResult)
  return target;
}

size_t TxResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.TxResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx = 3;
  if (!this->_internal_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  // .tendermint.abci.ResponseDeliverTx result = 4 [(.gogoproto.nullable) = false];
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TxResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxResult::GetClassData() const { return &_class_data_; }

void TxResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TxResult *>(to)->MergeFrom(
      static_cast<const TxResult &>(from));
}


void TxResult::MergeFrom(const TxResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.TxResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx().empty()) {
    _internal_set_tx(from._internal_tx());
  }
  if (from._internal_has_result()) {
    _internal_mutable_result()->::tendermint::abci::ResponseDeliverTx::MergeFrom(from._internal_result());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxResult::CopyFrom(const TxResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.TxResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxResult::IsInitialized() const {
  return true;
}

void TxResult::InternalSwap(TxResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tx_, lhs_arena,
      &other->tx_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxResult, index_)
      + sizeof(TxResult::index_)
      - PROTOBUF_FIELD_OFFSET(TxResult, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[38]);
}

// ===================================================================

class Validator::_Internal {
 public:
};

Validator::Validator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.Validator)
}
Validator::Validator(const Validator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  power_ = from.power_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.Validator)
}

inline void Validator::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
power_ = int64_t{0};
}

Validator::~Validator() {
  // @@protoc_insertion_point(destructor:tendermint.abci.Validator)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Validator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Validator::ArenaDtor(void* object) {
  Validator* _this = reinterpret_cast< Validator* >(object);
  (void)_this;
}
void Validator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Validator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Validator::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.Validator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  power_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Validator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 power = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Validator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.Validator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // int64 power = 3;
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.Validator)
  return target;
}

size_t Validator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.Validator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // int64 power = 3;
  if (this->_internal_power() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Validator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Validator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Validator::GetClassData() const { return &_class_data_; }

void Validator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Validator *>(to)->MergeFrom(
      static_cast<const Validator &>(from));
}


void Validator::MergeFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.Validator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_power() != 0) {
    _internal_set_power(from._internal_power());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Validator::CopyFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Validator::IsInitialized() const {
  return true;
}

void Validator::InternalSwap(Validator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  swap(power_, other->power_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Validator::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[39]);
}

// ===================================================================

class ValidatorUpdate::_Internal {
 public:
  static const ::tendermint::crypto::PublicKey& pub_key(const ValidatorUpdate* msg);
};

const ::tendermint::crypto::PublicKey&
ValidatorUpdate::_Internal::pub_key(const ValidatorUpdate* msg) {
  return *msg->pub_key_;
}
void ValidatorUpdate::clear_pub_key() {
  if (GetArenaForAllocation() == nullptr && pub_key_ != nullptr) {
    delete pub_key_;
  }
  pub_key_ = nullptr;
}
ValidatorUpdate::ValidatorUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ValidatorUpdate)
}
ValidatorUpdate::ValidatorUpdate(const ValidatorUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pub_key()) {
    pub_key_ = new ::tendermint::crypto::PublicKey(*from.pub_key_);
  } else {
    pub_key_ = nullptr;
  }
  power_ = from.power_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ValidatorUpdate)
}

inline void ValidatorUpdate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pub_key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&power_) -
    reinterpret_cast<char*>(&pub_key_)) + sizeof(power_));
}

ValidatorUpdate::~ValidatorUpdate() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ValidatorUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValidatorUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pub_key_;
}

void ValidatorUpdate::ArenaDtor(void* object) {
  ValidatorUpdate* _this = reinterpret_cast< ValidatorUpdate* >(object);
  (void)_this;
}
void ValidatorUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatorUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidatorUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ValidatorUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pub_key_ != nullptr) {
    delete pub_key_;
  }
  pub_key_ = nullptr;
  power_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.crypto.PublicKey pub_key = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 power = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValidatorUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ValidatorUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.crypto.PublicKey pub_key = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_pub_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pub_key(this), target, stream);
  }

  // int64 power = 2;
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ValidatorUpdate)
  return target;
}

size_t ValidatorUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ValidatorUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.crypto.PublicKey pub_key = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_pub_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pub_key_);
  }

  // int64 power = 2;
  if (this->_internal_power() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValidatorUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorUpdate::GetClassData() const { return &_class_data_; }

void ValidatorUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ValidatorUpdate *>(to)->MergeFrom(
      static_cast<const ValidatorUpdate &>(from));
}


void ValidatorUpdate::MergeFrom(const ValidatorUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ValidatorUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pub_key()) {
    _internal_mutable_pub_key()->::tendermint::crypto::PublicKey::MergeFrom(from._internal_pub_key());
  }
  if (from._internal_power() != 0) {
    _internal_set_power(from._internal_power());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorUpdate::CopyFrom(const ValidatorUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ValidatorUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorUpdate::IsInitialized() const {
  return true;
}

void ValidatorUpdate::InternalSwap(ValidatorUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidatorUpdate, power_)
      + sizeof(ValidatorUpdate::power_)
      - PROTOBUF_FIELD_OFFSET(ValidatorUpdate, pub_key_)>(
          reinterpret_cast<char*>(&pub_key_),
          reinterpret_cast<char*>(&other->pub_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[40]);
}

// ===================================================================

class VoteInfo::_Internal {
 public:
  static const ::tendermint::abci::Validator& validator(const VoteInfo* msg);
};

const ::tendermint::abci::Validator&
VoteInfo::_Internal::validator(const VoteInfo* msg) {
  return *msg->validator_;
}
VoteInfo::VoteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.VoteInfo)
}
VoteInfo::VoteInfo(const VoteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_validator()) {
    validator_ = new ::tendermint::abci::Validator(*from.validator_);
  } else {
    validator_ = nullptr;
  }
  signed_last_block_ = from.signed_last_block_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.VoteInfo)
}

inline void VoteInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&validator_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signed_last_block_) -
    reinterpret_cast<char*>(&validator_)) + sizeof(signed_last_block_));
}

VoteInfo::~VoteInfo() {
  // @@protoc_insertion_point(destructor:tendermint.abci.VoteInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VoteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete validator_;
}

void VoteInfo::ArenaDtor(void* object) {
  VoteInfo* _this = reinterpret_cast< VoteInfo* >(object);
  (void)_this;
}
void VoteInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VoteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.VoteInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
  signed_last_block_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.abci.Validator validator = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool signed_last_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          signed_last_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoteInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.VoteInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.abci.Validator validator = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_validator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::validator(this), target, stream);
  }

  // bool signed_last_block = 2;
  if (this->_internal_signed_last_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_signed_last_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.VoteInfo)
  return target;
}

size_t VoteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.VoteInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.abci.Validator validator = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_validator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validator_);
  }

  // bool signed_last_block = 2;
  if (this->_internal_signed_last_block() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VoteInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteInfo::GetClassData() const { return &_class_data_; }

void VoteInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VoteInfo *>(to)->MergeFrom(
      static_cast<const VoteInfo &>(from));
}


void VoteInfo::MergeFrom(const VoteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.VoteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_validator()) {
    _internal_mutable_validator()->::tendermint::abci::Validator::MergeFrom(from._internal_validator());
  }
  if (from._internal_signed_last_block() != 0) {
    _internal_set_signed_last_block(from._internal_signed_last_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteInfo::CopyFrom(const VoteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.VoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteInfo::IsInitialized() const {
  return true;
}

void VoteInfo::InternalSwap(VoteInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteInfo, signed_last_block_)
      + sizeof(VoteInfo::signed_last_block_)
      - PROTOBUF_FIELD_OFFSET(VoteInfo, validator_)>(
          reinterpret_cast<char*>(&validator_),
          reinterpret_cast<char*>(&other->validator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[41]);
}

// ===================================================================

class Evidence::_Internal {
 public:
  static const ::tendermint::abci::Validator& validator(const Evidence* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const Evidence* msg);
};

const ::tendermint::abci::Validator&
Evidence::_Internal::validator(const Evidence* msg) {
  return *msg->validator_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Evidence::_Internal::time(const Evidence* msg) {
  return *msg->time_;
}
void Evidence::clear_time() {
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
Evidence::Evidence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.Evidence)
}
Evidence::Evidence(const Evidence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_validator()) {
    validator_ = new ::tendermint::abci::Validator(*from.validator_);
  } else {
    validator_ = nullptr;
  }
  if (from._internal_has_time()) {
    time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&height_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.Evidence)
}

inline void Evidence::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&validator_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&validator_)) + sizeof(type_));
}

Evidence::~Evidence() {
  // @@protoc_insertion_point(destructor:tendermint.abci.Evidence)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Evidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete validator_;
  if (this != internal_default_instance()) delete time_;
}

void Evidence::ArenaDtor(void* object) {
  Evidence* _this = reinterpret_cast< Evidence* >(object);
  (void)_this;
}
void Evidence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Evidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Evidence::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.Evidence)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&height_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Evidence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.abci.EvidenceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tendermint::abci::EvidenceType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.Validator validator = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_voting_power = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          total_voting_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Evidence::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.Evidence)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.abci.EvidenceType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .tendermint.abci.Validator validator = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_validator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::validator(this), target, stream);
  }

  // int64 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_height(), target);
  }

  // .google.protobuf.Timestamp time = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::time(this), target, stream);
  }

  // int64 total_voting_power = 5;
  if (this->_internal_total_voting_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_total_voting_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.Evidence)
  return target;
}

size_t Evidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.Evidence)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.abci.Validator validator = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_validator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validator_);
  }

  // .google.protobuf.Timestamp time = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // int64 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // int64 total_voting_power = 5;
  if (this->_internal_total_voting_power() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_total_voting_power());
  }

  // .tendermint.abci.EvidenceType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Evidence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Evidence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Evidence::GetClassData() const { return &_class_data_; }

void Evidence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Evidence *>(to)->MergeFrom(
      static_cast<const Evidence &>(from));
}


void Evidence::MergeFrom(const Evidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.Evidence)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_validator()) {
    _internal_mutable_validator()->::tendermint::abci::Validator::MergeFrom(from._internal_validator());
  }
  if (from._internal_has_time()) {
    _internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_total_voting_power() != 0) {
    _internal_set_total_voting_power(from._internal_total_voting_power());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Evidence::CopyFrom(const Evidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.Evidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Evidence::IsInitialized() const {
  return true;
}

void Evidence::InternalSwap(Evidence* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Evidence, type_)
      + sizeof(Evidence::type_)
      - PROTOBUF_FIELD_OFFSET(Evidence, validator_)>(
          reinterpret_cast<char*>(&validator_),
          reinterpret_cast<char*>(&other->validator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Evidence::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[42]);
}

// ===================================================================

class Snapshot::_Internal {
 public:
};

Snapshot::Snapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.Snapshot)
}
Snapshot::Snapshot(const Snapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArenaForAllocation());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&chunks_) -
    reinterpret_cast<char*>(&height_)) + sizeof(chunks_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.Snapshot)
}

inline void Snapshot::SharedCtor() {
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chunks_) -
    reinterpret_cast<char*>(&height_)) + sizeof(chunks_));
}

Snapshot::~Snapshot() {
  // @@protoc_insertion_point(destructor:tendermint.abci.Snapshot)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Snapshot::ArenaDtor(void* object) {
  Snapshot* _this = reinterpret_cast< Snapshot* >(object);
  (void)_this;
}
void Snapshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.Snapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty();
  metadata_.ClearToEmpty();
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chunks_) -
      reinterpret_cast<char*>(&height_)) + sizeof(chunks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chunks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          chunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.Snapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  // uint32 format = 2;
  if (this->_internal_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_format(), target);
  }

  // uint32 chunks = 3;
  if (this->_internal_chunks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chunks(), target);
  }

  // bytes hash = 4;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_hash(), target);
  }

  // bytes metadata = 5;
  if (!this->_internal_metadata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.Snapshot)
  return target;
}

size_t Snapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.Snapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 4;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // bytes metadata = 5;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_metadata());
  }

  // uint64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_height());
  }

  // uint32 format = 2;
  if (this->_internal_format() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_format());
  }

  // uint32 chunks = 3;
  if (this->_internal_chunks() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_chunks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snapshot::GetClassData() const { return &_class_data_; }

void Snapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snapshot *>(to)->MergeFrom(
      static_cast<const Snapshot &>(from));
}


void Snapshot::MergeFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (!from._internal_metadata().empty()) {
    _internal_set_metadata(from._internal_metadata());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from._internal_chunks() != 0) {
    _internal_set_chunks(from._internal_chunks());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snapshot::CopyFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snapshot::IsInitialized() const {
  return true;
}

void Snapshot::InternalSwap(Snapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, lhs_arena,
      &other->hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &metadata_, lhs_arena,
      &other->metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Snapshot, chunks_)
      + sizeof(Snapshot::chunks_)
      - PROTOBUF_FIELD_OFFSET(Snapshot, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Snapshot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[43]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace abci
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::abci::Request* Arena::CreateMaybeMessage< ::tendermint::abci::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestEcho* Arena::CreateMaybeMessage< ::tendermint::abci::RequestEcho >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestEcho >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestFlush* Arena::CreateMaybeMessage< ::tendermint::abci::RequestFlush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestFlush >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestInfo* Arena::CreateMaybeMessage< ::tendermint::abci::RequestInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestSetOption* Arena::CreateMaybeMessage< ::tendermint::abci::RequestSetOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestSetOption >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestInitChain* Arena::CreateMaybeMessage< ::tendermint::abci::RequestInitChain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestInitChain >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestQuery* Arena::CreateMaybeMessage< ::tendermint::abci::RequestQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestBeginBlock* Arena::CreateMaybeMessage< ::tendermint::abci::RequestBeginBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestBeginBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestCheckTx* Arena::CreateMaybeMessage< ::tendermint::abci::RequestCheckTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestCheckTx >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestDeliverTx* Arena::CreateMaybeMessage< ::tendermint::abci::RequestDeliverTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestDeliverTx >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestEndBlock* Arena::CreateMaybeMessage< ::tendermint::abci::RequestEndBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestEndBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestCommit* Arena::CreateMaybeMessage< ::tendermint::abci::RequestCommit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestCommit >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestListSnapshots* Arena::CreateMaybeMessage< ::tendermint::abci::RequestListSnapshots >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestListSnapshots >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestOfferSnapshot* Arena::CreateMaybeMessage< ::tendermint::abci::RequestOfferSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestOfferSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestLoadSnapshotChunk* Arena::CreateMaybeMessage< ::tendermint::abci::RequestLoadSnapshotChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestLoadSnapshotChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestApplySnapshotChunk* Arena::CreateMaybeMessage< ::tendermint::abci::RequestApplySnapshotChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestApplySnapshotChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::Response* Arena::CreateMaybeMessage< ::tendermint::abci::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseException* Arena::CreateMaybeMessage< ::tendermint::abci::ResponseException >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseException >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseEcho* Arena::CreateMaybeMessage< ::tendermint::abci::ResponseEcho >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseEcho >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseFlush* Arena::CreateMaybeMessage< ::tendermint::abci::ResponseFlush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseFlush >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseInfo* Arena::CreateMaybeMessage< ::tendermint::abci::ResponseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseSetOption* Arena::CreateMaybeMessage< ::tendermint::abci::ResponseSetOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseSetOption >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseInitChain* Arena::CreateMaybeMessage< ::tendermint::abci::ResponseInitChain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseInitChain >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseQuery* Arena::CreateMaybeMessage< ::tendermint::abci::ResponseQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseBeginBlock* Arena::CreateMaybeMessage< ::tendermint::abci::ResponseBeginBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseBeginBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseCheckTx* Arena::CreateMaybeMessage< ::tendermint::abci::ResponseCheckTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseCheckTx >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseDeliverTx* Arena::CreateMaybeMessage< ::tendermint::abci::ResponseDeliverTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseDeliverTx >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseEndBlock* Arena::CreateMaybeMessage< ::tendermint::abci::ResponseEndBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseEndBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseCommit* Arena::CreateMaybeMessage< ::tendermint::abci::ResponseCommit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseCommit >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseListSnapshots* Arena::CreateMaybeMessage< ::tendermint::abci::ResponseListSnapshots >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseListSnapshots >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseOfferSnapshot* Arena::CreateMaybeMessage< ::tendermint::abci::ResponseOfferSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseOfferSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseLoadSnapshotChunk* Arena::CreateMaybeMessage< ::tendermint::abci::ResponseLoadSnapshotChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseLoadSnapshotChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseApplySnapshotChunk* Arena::CreateMaybeMessage< ::tendermint::abci::ResponseApplySnapshotChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseApplySnapshotChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ConsensusParams* Arena::CreateMaybeMessage< ::tendermint::abci::ConsensusParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ConsensusParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::BlockParams* Arena::CreateMaybeMessage< ::tendermint::abci::BlockParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::BlockParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::LastCommitInfo* Arena::CreateMaybeMessage< ::tendermint::abci::LastCommitInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::LastCommitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::Event* Arena::CreateMaybeMessage< ::tendermint::abci::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::EventAttribute* Arena::CreateMaybeMessage< ::tendermint::abci::EventAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::EventAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::TxResult* Arena::CreateMaybeMessage< ::tendermint::abci::TxResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::TxResult >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::Validator* Arena::CreateMaybeMessage< ::tendermint::abci::Validator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::Validator >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ValidatorUpdate* Arena::CreateMaybeMessage< ::tendermint::abci::ValidatorUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ValidatorUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::VoteInfo* Arena::CreateMaybeMessage< ::tendermint::abci::VoteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::VoteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::Evidence* Arena::CreateMaybeMessage< ::tendermint::abci::Evidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::Evidence >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::Snapshot* Arena::CreateMaybeMessage< ::tendermint::abci::Snapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::Snapshot >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
