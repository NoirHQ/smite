// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/state/types.proto

#include "tendermint/state/types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tendermint {
namespace state {
constexpr ABCIResponses::ABCIResponses(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deliver_txs_()
  , end_block_(nullptr)
  , begin_block_(nullptr){}
struct ABCIResponsesDefaultTypeInternal {
  constexpr ABCIResponsesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ABCIResponsesDefaultTypeInternal() {}
  union {
    ABCIResponses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ABCIResponsesDefaultTypeInternal _ABCIResponses_default_instance_;
constexpr ValidatorsInfo::ValidatorsInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : validator_set_(nullptr)
  , last_height_changed_(int64_t{0}){}
struct ValidatorsInfoDefaultTypeInternal {
  constexpr ValidatorsInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidatorsInfoDefaultTypeInternal() {}
  union {
    ValidatorsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidatorsInfoDefaultTypeInternal _ValidatorsInfo_default_instance_;
constexpr ConsensusParamsInfo::ConsensusParamsInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : consensus_params_(nullptr)
  , last_height_changed_(int64_t{0}){}
struct ConsensusParamsInfoDefaultTypeInternal {
  constexpr ConsensusParamsInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConsensusParamsInfoDefaultTypeInternal() {}
  union {
    ConsensusParamsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConsensusParamsInfoDefaultTypeInternal _ConsensusParamsInfo_default_instance_;
constexpr Version::Version(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : software_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , consensus_(nullptr){}
struct VersionDefaultTypeInternal {
  constexpr VersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VersionDefaultTypeInternal() {}
  union {
    Version _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VersionDefaultTypeInternal _Version_default_instance_;
constexpr State::State(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_results_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(nullptr)
  , last_block_id_(nullptr)
  , last_block_time_(nullptr)
  , next_validators_(nullptr)
  , validators_(nullptr)
  , last_validators_(nullptr)
  , consensus_params_(nullptr)
  , last_block_height_(int64_t{0})
  , last_height_validators_changed_(int64_t{0})
  , last_height_consensus_params_changed_(int64_t{0})
  , initial_height_(int64_t{0}){}
struct StateDefaultTypeInternal {
  constexpr StateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StateDefaultTypeInternal() {}
  union {
    State _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StateDefaultTypeInternal _State_default_instance_;
}  // namespace state
}  // namespace tendermint
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tendermint_2fstate_2ftypes_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tendermint_2fstate_2ftypes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tendermint_2fstate_2ftypes_2eproto = nullptr;

const uint32_t TableStruct_tendermint_2fstate_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::state::ABCIResponses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::state::ABCIResponses, deliver_txs_),
  PROTOBUF_FIELD_OFFSET(::tendermint::state::ABCIResponses, end_block_),
  PROTOBUF_FIELD_OFFSET(::tendermint::state::ABCIResponses, begin_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::state::ValidatorsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::state::ValidatorsInfo, validator_set_),
  PROTOBUF_FIELD_OFFSET(::tendermint::state::ValidatorsInfo, last_height_changed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::state::ConsensusParamsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::state::ConsensusParamsInfo, consensus_params_),
  PROTOBUF_FIELD_OFFSET(::tendermint::state::ConsensusParamsInfo, last_height_changed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::state::Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::state::Version, consensus_),
  PROTOBUF_FIELD_OFFSET(::tendermint::state::Version, software_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::state::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::state::State, version_),
  PROTOBUF_FIELD_OFFSET(::tendermint::state::State, chain_id_),
  PROTOBUF_FIELD_OFFSET(::tendermint::state::State, initial_height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::state::State, last_block_height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::state::State, last_block_id_),
  PROTOBUF_FIELD_OFFSET(::tendermint::state::State, last_block_time_),
  PROTOBUF_FIELD_OFFSET(::tendermint::state::State, next_validators_),
  PROTOBUF_FIELD_OFFSET(::tendermint::state::State, validators_),
  PROTOBUF_FIELD_OFFSET(::tendermint::state::State, last_validators_),
  PROTOBUF_FIELD_OFFSET(::tendermint::state::State, last_height_validators_changed_),
  PROTOBUF_FIELD_OFFSET(::tendermint::state::State, consensus_params_),
  PROTOBUF_FIELD_OFFSET(::tendermint::state::State, last_height_consensus_params_changed_),
  PROTOBUF_FIELD_OFFSET(::tendermint::state::State, last_results_hash_),
  PROTOBUF_FIELD_OFFSET(::tendermint::state::State, app_hash_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tendermint::state::ABCIResponses)},
  { 9, -1, -1, sizeof(::tendermint::state::ValidatorsInfo)},
  { 17, -1, -1, sizeof(::tendermint::state::ConsensusParamsInfo)},
  { 25, -1, -1, sizeof(::tendermint::state::Version)},
  { 33, -1, -1, sizeof(::tendermint::state::State)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::state::_ABCIResponses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::state::_ValidatorsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::state::_ConsensusParamsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::state::_Version_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::state::_State_default_instance_),
};

const char descriptor_table_protodef_tendermint_2fstate_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034tendermint/state/types.proto\022\020tendermi"
  "nt.state\032\024gogoproto/gogo.proto\032\033tendermi"
  "nt/abci/types.proto\032\034tendermint/types/ty"
  "pes.proto\032 tendermint/types/validator.pr"
  "oto\032\035tendermint/types/params.proto\032\036tend"
  "ermint/version/types.proto\032\037google/proto"
  "buf/timestamp.proto\"\270\001\n\rABCIResponses\0227\n"
  "\013deliver_txs\030\001 \003(\0132\".tendermint.abci.Res"
  "ponseDeliverTx\0224\n\tend_block\030\002 \001(\0132!.tend"
  "ermint.abci.ResponseEndBlock\0228\n\013begin_bl"
  "ock\030\003 \001(\0132#.tendermint.abci.ResponseBegi"
  "nBlock\"d\n\016ValidatorsInfo\0225\n\rvalidator_se"
  "t\030\001 \001(\0132\036.tendermint.types.ValidatorSet\022"
  "\033\n\023last_height_changed\030\002 \001(\003\"u\n\023Consensu"
  "sParamsInfo\022A\n\020consensus_params\030\001 \001(\0132!."
  "tendermint.types.ConsensusParamsB\004\310\336\037\000\022\033"
  "\n\023last_height_changed\030\002 \001(\003\"S\n\007Version\0226"
  "\n\tconsensus\030\001 \001(\0132\035.tendermint.version.C"
  "onsensusB\004\310\336\037\000\022\020\n\010software\030\002 \001(\t\"\375\004\n\005Sta"
  "te\0220\n\007version\030\001 \001(\0132\031.tendermint.state.V"
  "ersionB\004\310\336\037\000\022\035\n\010chain_id\030\002 \001(\tB\013\342\336\037\007Chai"
  "nID\022\026\n\016initial_height\030\016 \001(\003\022\031\n\021last_bloc"
  "k_height\030\003 \001(\003\022E\n\rlast_block_id\030\004 \001(\0132\031."
  "tendermint.types.BlockIDB\023\310\336\037\000\342\336\037\013LastBl"
  "ockID\022=\n\017last_block_time\030\005 \001(\0132\032.google."
  "protobuf.TimestampB\010\310\336\037\000\220\337\037\001\0227\n\017next_val"
  "idators\030\006 \001(\0132\036.tendermint.types.Validat"
  "orSet\0222\n\nvalidators\030\007 \001(\0132\036.tendermint.t"
  "ypes.ValidatorSet\0227\n\017last_validators\030\010 \001"
  "(\0132\036.tendermint.types.ValidatorSet\022&\n\036la"
  "st_height_validators_changed\030\t \001(\003\022A\n\020co"
  "nsensus_params\030\n \001(\0132!.tendermint.types."
  "ConsensusParamsB\004\310\336\037\000\022,\n$last_height_con"
  "sensus_params_changed\030\013 \001(\003\022\031\n\021last_resu"
  "lts_hash\030\014 \001(\014\022\020\n\010app_hash\030\r \001(\014B9Z7gith"
  "ub.com/tendermint/tendermint/proto/tende"
  "rmint/stateb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tendermint_2fstate_2ftypes_2eproto_deps[7] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_tendermint_2fabci_2ftypes_2eproto,
  &::descriptor_table_tendermint_2ftypes_2fparams_2eproto,
  &::descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
  &::descriptor_table_tendermint_2ftypes_2fvalidator_2eproto,
  &::descriptor_table_tendermint_2fversion_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tendermint_2fstate_2ftypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2fstate_2ftypes_2eproto = {
  false, false, 1459, descriptor_table_protodef_tendermint_2fstate_2ftypes_2eproto, "tendermint/state/types.proto", 
  &descriptor_table_tendermint_2fstate_2ftypes_2eproto_once, descriptor_table_tendermint_2fstate_2ftypes_2eproto_deps, 7, 5,
  schemas, file_default_instances, TableStruct_tendermint_2fstate_2ftypes_2eproto::offsets,
  file_level_metadata_tendermint_2fstate_2ftypes_2eproto, file_level_enum_descriptors_tendermint_2fstate_2ftypes_2eproto, file_level_service_descriptors_tendermint_2fstate_2ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tendermint_2fstate_2ftypes_2eproto_getter() {
  return &descriptor_table_tendermint_2fstate_2ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tendermint_2fstate_2ftypes_2eproto(&descriptor_table_tendermint_2fstate_2ftypes_2eproto);
namespace tendermint {
namespace state {

// ===================================================================

class ABCIResponses::_Internal {
 public:
  static const ::tendermint::abci::ResponseEndBlock& end_block(const ABCIResponses* msg);
  static const ::tendermint::abci::ResponseBeginBlock& begin_block(const ABCIResponses* msg);
};

const ::tendermint::abci::ResponseEndBlock&
ABCIResponses::_Internal::end_block(const ABCIResponses* msg) {
  return *msg->end_block_;
}
const ::tendermint::abci::ResponseBeginBlock&
ABCIResponses::_Internal::begin_block(const ABCIResponses* msg) {
  return *msg->begin_block_;
}
void ABCIResponses::clear_deliver_txs() {
  deliver_txs_.Clear();
}
void ABCIResponses::clear_end_block() {
  if (GetArenaForAllocation() == nullptr && end_block_ != nullptr) {
    delete end_block_;
  }
  end_block_ = nullptr;
}
void ABCIResponses::clear_begin_block() {
  if (GetArenaForAllocation() == nullptr && begin_block_ != nullptr) {
    delete begin_block_;
  }
  begin_block_ = nullptr;
}
ABCIResponses::ABCIResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  deliver_txs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.state.ABCIResponses)
}
ABCIResponses::ABCIResponses(const ABCIResponses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deliver_txs_(from.deliver_txs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_end_block()) {
    end_block_ = new ::tendermint::abci::ResponseEndBlock(*from.end_block_);
  } else {
    end_block_ = nullptr;
  }
  if (from._internal_has_begin_block()) {
    begin_block_ = new ::tendermint::abci::ResponseBeginBlock(*from.begin_block_);
  } else {
    begin_block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.state.ABCIResponses)
}

inline void ABCIResponses::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&end_block_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&begin_block_) -
    reinterpret_cast<char*>(&end_block_)) + sizeof(begin_block_));
}

ABCIResponses::~ABCIResponses() {
  // @@protoc_insertion_point(destructor:tendermint.state.ABCIResponses)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ABCIResponses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete end_block_;
  if (this != internal_default_instance()) delete begin_block_;
}

void ABCIResponses::ArenaDtor(void* object) {
  ABCIResponses* _this = reinterpret_cast< ABCIResponses* >(object);
  (void)_this;
}
void ABCIResponses::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ABCIResponses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ABCIResponses::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.state.ABCIResponses)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deliver_txs_.Clear();
  if (GetArenaForAllocation() == nullptr && end_block_ != nullptr) {
    delete end_block_;
  }
  end_block_ = nullptr;
  if (GetArenaForAllocation() == nullptr && begin_block_ != nullptr) {
    delete begin_block_;
  }
  begin_block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ABCIResponses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tendermint.abci.ResponseDeliverTx deliver_txs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deliver_txs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseEndBlock end_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseBeginBlock begin_block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_begin_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ABCIResponses::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.state.ABCIResponses)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tendermint.abci.ResponseDeliverTx deliver_txs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deliver_txs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_deliver_txs(i), target, stream);
  }

  // .tendermint.abci.ResponseEndBlock end_block = 2;
  if (this->_internal_has_end_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end_block(this), target, stream);
  }

  // .tendermint.abci.ResponseBeginBlock begin_block = 3;
  if (this->_internal_has_begin_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::begin_block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.state.ABCIResponses)
  return target;
}

size_t ABCIResponses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.state.ABCIResponses)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.ResponseDeliverTx deliver_txs = 1;
  total_size += 1UL * this->_internal_deliver_txs_size();
  for (const auto& msg : this->deliver_txs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tendermint.abci.ResponseEndBlock end_block = 2;
  if (this->_internal_has_end_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_block_);
  }

  // .tendermint.abci.ResponseBeginBlock begin_block = 3;
  if (this->_internal_has_begin_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *begin_block_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ABCIResponses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ABCIResponses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ABCIResponses::GetClassData() const { return &_class_data_; }

void ABCIResponses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ABCIResponses *>(to)->MergeFrom(
      static_cast<const ABCIResponses &>(from));
}


void ABCIResponses::MergeFrom(const ABCIResponses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.state.ABCIResponses)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  deliver_txs_.MergeFrom(from.deliver_txs_);
  if (from._internal_has_end_block()) {
    _internal_mutable_end_block()->::tendermint::abci::ResponseEndBlock::MergeFrom(from._internal_end_block());
  }
  if (from._internal_has_begin_block()) {
    _internal_mutable_begin_block()->::tendermint::abci::ResponseBeginBlock::MergeFrom(from._internal_begin_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ABCIResponses::CopyFrom(const ABCIResponses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.state.ABCIResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ABCIResponses::IsInitialized() const {
  return true;
}

void ABCIResponses::InternalSwap(ABCIResponses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  deliver_txs_.InternalSwap(&other->deliver_txs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ABCIResponses, begin_block_)
      + sizeof(ABCIResponses::begin_block_)
      - PROTOBUF_FIELD_OFFSET(ABCIResponses, end_block_)>(
          reinterpret_cast<char*>(&end_block_),
          reinterpret_cast<char*>(&other->end_block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ABCIResponses::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fstate_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fstate_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fstate_2ftypes_2eproto[0]);
}

// ===================================================================

class ValidatorsInfo::_Internal {
 public:
  static const ::tendermint::types::ValidatorSet& validator_set(const ValidatorsInfo* msg);
};

const ::tendermint::types::ValidatorSet&
ValidatorsInfo::_Internal::validator_set(const ValidatorsInfo* msg) {
  return *msg->validator_set_;
}
void ValidatorsInfo::clear_validator_set() {
  if (GetArenaForAllocation() == nullptr && validator_set_ != nullptr) {
    delete validator_set_;
  }
  validator_set_ = nullptr;
}
ValidatorsInfo::ValidatorsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.state.ValidatorsInfo)
}
ValidatorsInfo::ValidatorsInfo(const ValidatorsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_validator_set()) {
    validator_set_ = new ::tendermint::types::ValidatorSet(*from.validator_set_);
  } else {
    validator_set_ = nullptr;
  }
  last_height_changed_ = from.last_height_changed_;
  // @@protoc_insertion_point(copy_constructor:tendermint.state.ValidatorsInfo)
}

inline void ValidatorsInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&validator_set_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_height_changed_) -
    reinterpret_cast<char*>(&validator_set_)) + sizeof(last_height_changed_));
}

ValidatorsInfo::~ValidatorsInfo() {
  // @@protoc_insertion_point(destructor:tendermint.state.ValidatorsInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValidatorsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete validator_set_;
}

void ValidatorsInfo::ArenaDtor(void* object) {
  ValidatorsInfo* _this = reinterpret_cast< ValidatorsInfo* >(object);
  (void)_this;
}
void ValidatorsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatorsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidatorsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.state.ValidatorsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && validator_set_ != nullptr) {
    delete validator_set_;
  }
  validator_set_ = nullptr;
  last_height_changed_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.ValidatorSet validator_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_height_changed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          last_height_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValidatorsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.state.ValidatorsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.ValidatorSet validator_set = 1;
  if (this->_internal_has_validator_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::validator_set(this), target, stream);
  }

  // int64 last_height_changed = 2;
  if (this->_internal_last_height_changed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_last_height_changed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.state.ValidatorsInfo)
  return target;
}

size_t ValidatorsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.state.ValidatorsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.ValidatorSet validator_set = 1;
  if (this->_internal_has_validator_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validator_set_);
  }

  // int64 last_height_changed = 2;
  if (this->_internal_last_height_changed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_last_height_changed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValidatorsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorsInfo::GetClassData() const { return &_class_data_; }

void ValidatorsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ValidatorsInfo *>(to)->MergeFrom(
      static_cast<const ValidatorsInfo &>(from));
}


void ValidatorsInfo::MergeFrom(const ValidatorsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.state.ValidatorsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_validator_set()) {
    _internal_mutable_validator_set()->::tendermint::types::ValidatorSet::MergeFrom(from._internal_validator_set());
  }
  if (from._internal_last_height_changed() != 0) {
    _internal_set_last_height_changed(from._internal_last_height_changed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorsInfo::CopyFrom(const ValidatorsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.state.ValidatorsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorsInfo::IsInitialized() const {
  return true;
}

void ValidatorsInfo::InternalSwap(ValidatorsInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidatorsInfo, last_height_changed_)
      + sizeof(ValidatorsInfo::last_height_changed_)
      - PROTOBUF_FIELD_OFFSET(ValidatorsInfo, validator_set_)>(
          reinterpret_cast<char*>(&validator_set_),
          reinterpret_cast<char*>(&other->validator_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorsInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fstate_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fstate_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fstate_2ftypes_2eproto[1]);
}

// ===================================================================

class ConsensusParamsInfo::_Internal {
 public:
  static const ::tendermint::types::ConsensusParams& consensus_params(const ConsensusParamsInfo* msg);
};

const ::tendermint::types::ConsensusParams&
ConsensusParamsInfo::_Internal::consensus_params(const ConsensusParamsInfo* msg) {
  return *msg->consensus_params_;
}
void ConsensusParamsInfo::clear_consensus_params() {
  if (GetArenaForAllocation() == nullptr && consensus_params_ != nullptr) {
    delete consensus_params_;
  }
  consensus_params_ = nullptr;
}
ConsensusParamsInfo::ConsensusParamsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.state.ConsensusParamsInfo)
}
ConsensusParamsInfo::ConsensusParamsInfo(const ConsensusParamsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_consensus_params()) {
    consensus_params_ = new ::tendermint::types::ConsensusParams(*from.consensus_params_);
  } else {
    consensus_params_ = nullptr;
  }
  last_height_changed_ = from.last_height_changed_;
  // @@protoc_insertion_point(copy_constructor:tendermint.state.ConsensusParamsInfo)
}

inline void ConsensusParamsInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&consensus_params_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_height_changed_) -
    reinterpret_cast<char*>(&consensus_params_)) + sizeof(last_height_changed_));
}

ConsensusParamsInfo::~ConsensusParamsInfo() {
  // @@protoc_insertion_point(destructor:tendermint.state.ConsensusParamsInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConsensusParamsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete consensus_params_;
}

void ConsensusParamsInfo::ArenaDtor(void* object) {
  ConsensusParamsInfo* _this = reinterpret_cast< ConsensusParamsInfo* >(object);
  (void)_this;
}
void ConsensusParamsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConsensusParamsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConsensusParamsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.state.ConsensusParamsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && consensus_params_ != nullptr) {
    delete consensus_params_;
  }
  consensus_params_ = nullptr;
  last_height_changed_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsensusParamsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.ConsensusParams consensus_params = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_height_changed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          last_height_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConsensusParamsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.state.ConsensusParamsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.ConsensusParams consensus_params = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_consensus_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::consensus_params(this), target, stream);
  }

  // int64 last_height_changed = 2;
  if (this->_internal_last_height_changed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_last_height_changed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.state.ConsensusParamsInfo)
  return target;
}

size_t ConsensusParamsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.state.ConsensusParamsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.ConsensusParams consensus_params = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_consensus_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consensus_params_);
  }

  // int64 last_height_changed = 2;
  if (this->_internal_last_height_changed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_last_height_changed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConsensusParamsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConsensusParamsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConsensusParamsInfo::GetClassData() const { return &_class_data_; }

void ConsensusParamsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConsensusParamsInfo *>(to)->MergeFrom(
      static_cast<const ConsensusParamsInfo &>(from));
}


void ConsensusParamsInfo::MergeFrom(const ConsensusParamsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.state.ConsensusParamsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_consensus_params()) {
    _internal_mutable_consensus_params()->::tendermint::types::ConsensusParams::MergeFrom(from._internal_consensus_params());
  }
  if (from._internal_last_height_changed() != 0) {
    _internal_set_last_height_changed(from._internal_last_height_changed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConsensusParamsInfo::CopyFrom(const ConsensusParamsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.state.ConsensusParamsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusParamsInfo::IsInitialized() const {
  return true;
}

void ConsensusParamsInfo::InternalSwap(ConsensusParamsInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsensusParamsInfo, last_height_changed_)
      + sizeof(ConsensusParamsInfo::last_height_changed_)
      - PROTOBUF_FIELD_OFFSET(ConsensusParamsInfo, consensus_params_)>(
          reinterpret_cast<char*>(&consensus_params_),
          reinterpret_cast<char*>(&other->consensus_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusParamsInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fstate_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fstate_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fstate_2ftypes_2eproto[2]);
}

// ===================================================================

class Version::_Internal {
 public:
  static const ::tendermint::version::Consensus& consensus(const Version* msg);
};

const ::tendermint::version::Consensus&
Version::_Internal::consensus(const Version* msg) {
  return *msg->consensus_;
}
void Version::clear_consensus() {
  if (GetArenaForAllocation() == nullptr && consensus_ != nullptr) {
    delete consensus_;
  }
  consensus_ = nullptr;
}
Version::Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.state.Version)
}
Version::Version(const Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  software_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    software_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_software().empty()) {
    software_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_software(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_consensus()) {
    consensus_ = new ::tendermint::version::Consensus(*from.consensus_);
  } else {
    consensus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.state.Version)
}

inline void Version::SharedCtor() {
software_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  software_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
consensus_ = nullptr;
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:tendermint.state.Version)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Version::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  software_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete consensus_;
}

void Version::ArenaDtor(void* object) {
  Version* _this = reinterpret_cast< Version* >(object);
  (void)_this;
}
void Version::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.state.Version)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  software_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && consensus_ != nullptr) {
    delete consensus_;
  }
  consensus_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Version::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.version.Consensus consensus = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string software = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_software();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.state.Version.software"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Version::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.state.Version)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.version.Consensus consensus = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_consensus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::consensus(this), target, stream);
  }

  // string software = 2;
  if (!this->_internal_software().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_software().data(), static_cast<int>(this->_internal_software().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.state.Version.software");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_software(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.state.Version)
  return target;
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.state.Version)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string software = 2;
  if (!this->_internal_software().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_software());
  }

  // .tendermint.version.Consensus consensus = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_consensus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consensus_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Version::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Version::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Version::GetClassData() const { return &_class_data_; }

void Version::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Version *>(to)->MergeFrom(
      static_cast<const Version &>(from));
}


void Version::MergeFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.state.Version)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_software().empty()) {
    _internal_set_software(from._internal_software());
  }
  if (from._internal_has_consensus()) {
    _internal_mutable_consensus()->::tendermint::version::Consensus::MergeFrom(from._internal_consensus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.state.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::InternalSwap(Version* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &software_, lhs_arena,
      &other->software_, rhs_arena
  );
  swap(consensus_, other->consensus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Version::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fstate_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fstate_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fstate_2ftypes_2eproto[3]);
}

// ===================================================================

class State::_Internal {
 public:
  static const ::tendermint::state::Version& version(const State* msg);
  static const ::tendermint::types::BlockID& last_block_id(const State* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_block_time(const State* msg);
  static const ::tendermint::types::ValidatorSet& next_validators(const State* msg);
  static const ::tendermint::types::ValidatorSet& validators(const State* msg);
  static const ::tendermint::types::ValidatorSet& last_validators(const State* msg);
  static const ::tendermint::types::ConsensusParams& consensus_params(const State* msg);
};

const ::tendermint::state::Version&
State::_Internal::version(const State* msg) {
  return *msg->version_;
}
const ::tendermint::types::BlockID&
State::_Internal::last_block_id(const State* msg) {
  return *msg->last_block_id_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
State::_Internal::last_block_time(const State* msg) {
  return *msg->last_block_time_;
}
const ::tendermint::types::ValidatorSet&
State::_Internal::next_validators(const State* msg) {
  return *msg->next_validators_;
}
const ::tendermint::types::ValidatorSet&
State::_Internal::validators(const State* msg) {
  return *msg->validators_;
}
const ::tendermint::types::ValidatorSet&
State::_Internal::last_validators(const State* msg) {
  return *msg->last_validators_;
}
const ::tendermint::types::ConsensusParams&
State::_Internal::consensus_params(const State* msg) {
  return *msg->consensus_params_;
}
void State::clear_last_block_id() {
  if (GetArenaForAllocation() == nullptr && last_block_id_ != nullptr) {
    delete last_block_id_;
  }
  last_block_id_ = nullptr;
}
void State::clear_last_block_time() {
  if (GetArenaForAllocation() == nullptr && last_block_time_ != nullptr) {
    delete last_block_time_;
  }
  last_block_time_ = nullptr;
}
void State::clear_next_validators() {
  if (GetArenaForAllocation() == nullptr && next_validators_ != nullptr) {
    delete next_validators_;
  }
  next_validators_ = nullptr;
}
void State::clear_validators() {
  if (GetArenaForAllocation() == nullptr && validators_ != nullptr) {
    delete validators_;
  }
  validators_ = nullptr;
}
void State::clear_last_validators() {
  if (GetArenaForAllocation() == nullptr && last_validators_ != nullptr) {
    delete last_validators_;
  }
  last_validators_ = nullptr;
}
void State::clear_consensus_params() {
  if (GetArenaForAllocation() == nullptr && consensus_params_ != nullptr) {
    delete consensus_params_;
  }
  consensus_params_ = nullptr;
}
State::State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.state.State)
}
State::State(const State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArenaForAllocation());
  }
  last_results_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_results_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_results_hash().empty()) {
    last_results_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_results_hash(), 
      GetArenaForAllocation());
  }
  app_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_hash().empty()) {
    app_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_hash(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_version()) {
    version_ = new ::tendermint::state::Version(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from._internal_has_last_block_id()) {
    last_block_id_ = new ::tendermint::types::BlockID(*from.last_block_id_);
  } else {
    last_block_id_ = nullptr;
  }
  if (from._internal_has_last_block_time()) {
    last_block_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_block_time_);
  } else {
    last_block_time_ = nullptr;
  }
  if (from._internal_has_next_validators()) {
    next_validators_ = new ::tendermint::types::ValidatorSet(*from.next_validators_);
  } else {
    next_validators_ = nullptr;
  }
  if (from._internal_has_validators()) {
    validators_ = new ::tendermint::types::ValidatorSet(*from.validators_);
  } else {
    validators_ = nullptr;
  }
  if (from._internal_has_last_validators()) {
    last_validators_ = new ::tendermint::types::ValidatorSet(*from.last_validators_);
  } else {
    last_validators_ = nullptr;
  }
  if (from._internal_has_consensus_params()) {
    consensus_params_ = new ::tendermint::types::ConsensusParams(*from.consensus_params_);
  } else {
    consensus_params_ = nullptr;
  }
  ::memcpy(&last_block_height_, &from.last_block_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&initial_height_) -
    reinterpret_cast<char*>(&last_block_height_)) + sizeof(initial_height_));
  // @@protoc_insertion_point(copy_constructor:tendermint.state.State)
}

inline void State::SharedCtor() {
chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_results_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_results_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&initial_height_) -
    reinterpret_cast<char*>(&version_)) + sizeof(initial_height_));
}

State::~State() {
  // @@protoc_insertion_point(destructor:tendermint.state.State)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void State::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_results_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete last_block_id_;
  if (this != internal_default_instance()) delete last_block_time_;
  if (this != internal_default_instance()) delete next_validators_;
  if (this != internal_default_instance()) delete validators_;
  if (this != internal_default_instance()) delete last_validators_;
  if (this != internal_default_instance()) delete consensus_params_;
}

void State::ArenaDtor(void* object) {
  State* _this = reinterpret_cast< State* >(object);
  (void)_this;
}
void State::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void State::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.state.State)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmpty();
  last_results_hash_.ClearToEmpty();
  app_hash_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_block_id_ != nullptr) {
    delete last_block_id_;
  }
  last_block_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_block_time_ != nullptr) {
    delete last_block_time_;
  }
  last_block_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && next_validators_ != nullptr) {
    delete next_validators_;
  }
  next_validators_ = nullptr;
  if (GetArenaForAllocation() == nullptr && validators_ != nullptr) {
    delete validators_;
  }
  validators_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_validators_ != nullptr) {
    delete last_validators_;
  }
  last_validators_ = nullptr;
  if (GetArenaForAllocation() == nullptr && consensus_params_ != nullptr) {
    delete consensus_params_;
  }
  consensus_params_ = nullptr;
  ::memset(&last_block_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initial_height_) -
      reinterpret_cast<char*>(&last_block_height_)) + sizeof(initial_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.state.Version version = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chain_id = 2 [(.gogoproto.customname) = "ChainID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.state.State.chain_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_block_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          last_block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.BlockID last_block_id = 4 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "LastBlockID"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_block_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_block_time = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_block_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.ValidatorSet next_validators = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_validators(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.ValidatorSet validators = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_validators(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.ValidatorSet last_validators = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_validators(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_height_validators_changed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          last_height_validators_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.ConsensusParams consensus_params = 10 [(.gogoproto.nullable) = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_height_consensus_params_changed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          last_height_consensus_params_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes last_results_hash = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_last_results_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes app_hash = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_app_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 initial_height = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          initial_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* State::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.state.State)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.state.Version version = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::version(this), target, stream);
  }

  // string chain_id = 2 [(.gogoproto.customname) = "ChainID"];
  if (!this->_internal_chain_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.state.State.chain_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chain_id(), target);
  }

  // int64 last_block_height = 3;
  if (this->_internal_last_block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_last_block_height(), target);
  }

  // .tendermint.types.BlockID last_block_id = 4 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "LastBlockID"];
  if (this->_internal_has_last_block_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::last_block_id(this), target, stream);
  }

  // .google.protobuf.Timestamp last_block_time = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_last_block_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::last_block_time(this), target, stream);
  }

  // .tendermint.types.ValidatorSet next_validators = 6;
  if (this->_internal_has_next_validators()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::next_validators(this), target, stream);
  }

  // .tendermint.types.ValidatorSet validators = 7;
  if (this->_internal_has_validators()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::validators(this), target, stream);
  }

  // .tendermint.types.ValidatorSet last_validators = 8;
  if (this->_internal_has_last_validators()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::last_validators(this), target, stream);
  }

  // int64 last_height_validators_changed = 9;
  if (this->_internal_last_height_validators_changed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_last_height_validators_changed(), target);
  }

  // .tendermint.types.ConsensusParams consensus_params = 10 [(.gogoproto.nullable) = false];
  if (this->_internal_has_consensus_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::consensus_params(this), target, stream);
  }

  // int64 last_height_consensus_params_changed = 11;
  if (this->_internal_last_height_consensus_params_changed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_last_height_consensus_params_changed(), target);
  }

  // bytes last_results_hash = 12;
  if (!this->_internal_last_results_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_last_results_hash(), target);
  }

  // bytes app_hash = 13;
  if (!this->_internal_app_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_app_hash(), target);
  }

  // int64 initial_height = 14;
  if (this->_internal_initial_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_initial_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.state.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.state.State)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain_id = 2 [(.gogoproto.customname) = "ChainID"];
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // bytes last_results_hash = 12;
  if (!this->_internal_last_results_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_last_results_hash());
  }

  // bytes app_hash = 13;
  if (!this->_internal_app_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_app_hash());
  }

  // .tendermint.state.Version version = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .tendermint.types.BlockID last_block_id = 4 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "LastBlockID"];
  if (this->_internal_has_last_block_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_block_id_);
  }

  // .google.protobuf.Timestamp last_block_time = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_last_block_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_block_time_);
  }

  // .tendermint.types.ValidatorSet next_validators = 6;
  if (this->_internal_has_next_validators()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_validators_);
  }

  // .tendermint.types.ValidatorSet validators = 7;
  if (this->_internal_has_validators()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validators_);
  }

  // .tendermint.types.ValidatorSet last_validators = 8;
  if (this->_internal_has_last_validators()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_validators_);
  }

  // .tendermint.types.ConsensusParams consensus_params = 10 [(.gogoproto.nullable) = false];
  if (this->_internal_has_consensus_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consensus_params_);
  }

  // int64 last_block_height = 3;
  if (this->_internal_last_block_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_last_block_height());
  }

  // int64 last_height_validators_changed = 9;
  if (this->_internal_last_height_validators_changed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_last_height_validators_changed());
  }

  // int64 last_height_consensus_params_changed = 11;
  if (this->_internal_last_height_consensus_params_changed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_last_height_consensus_params_changed());
  }

  // int64 initial_height = 14;
  if (this->_internal_initial_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_initial_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData State::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    State::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*State::GetClassData() const { return &_class_data_; }

void State::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<State *>(to)->MergeFrom(
      static_cast<const State &>(from));
}


void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.state.State)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (!from._internal_last_results_hash().empty()) {
    _internal_set_last_results_hash(from._internal_last_results_hash());
  }
  if (!from._internal_app_hash().empty()) {
    _internal_set_app_hash(from._internal_app_hash());
  }
  if (from._internal_has_version()) {
    _internal_mutable_version()->::tendermint::state::Version::MergeFrom(from._internal_version());
  }
  if (from._internal_has_last_block_id()) {
    _internal_mutable_last_block_id()->::tendermint::types::BlockID::MergeFrom(from._internal_last_block_id());
  }
  if (from._internal_has_last_block_time()) {
    _internal_mutable_last_block_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_block_time());
  }
  if (from._internal_has_next_validators()) {
    _internal_mutable_next_validators()->::tendermint::types::ValidatorSet::MergeFrom(from._internal_next_validators());
  }
  if (from._internal_has_validators()) {
    _internal_mutable_validators()->::tendermint::types::ValidatorSet::MergeFrom(from._internal_validators());
  }
  if (from._internal_has_last_validators()) {
    _internal_mutable_last_validators()->::tendermint::types::ValidatorSet::MergeFrom(from._internal_last_validators());
  }
  if (from._internal_has_consensus_params()) {
    _internal_mutable_consensus_params()->::tendermint::types::ConsensusParams::MergeFrom(from._internal_consensus_params());
  }
  if (from._internal_last_block_height() != 0) {
    _internal_set_last_block_height(from._internal_last_block_height());
  }
  if (from._internal_last_height_validators_changed() != 0) {
    _internal_set_last_height_validators_changed(from._internal_last_height_validators_changed());
  }
  if (from._internal_last_height_consensus_params_changed() != 0) {
    _internal_set_last_height_consensus_params_changed(from._internal_last_height_consensus_params_changed());
  }
  if (from._internal_initial_height() != 0) {
    _internal_set_initial_height(from._internal_initial_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.state.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::InternalSwap(State* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chain_id_, lhs_arena,
      &other->chain_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_results_hash_, lhs_arena,
      &other->last_results_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_hash_, lhs_arena,
      &other->app_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(State, initial_height_)
      + sizeof(State::initial_height_)
      - PROTOBUF_FIELD_OFFSET(State, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata State::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fstate_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fstate_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fstate_2ftypes_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace state
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::state::ABCIResponses* Arena::CreateMaybeMessage< ::tendermint::state::ABCIResponses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::state::ABCIResponses >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::state::ValidatorsInfo* Arena::CreateMaybeMessage< ::tendermint::state::ValidatorsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::state::ValidatorsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::state::ConsensusParamsInfo* Arena::CreateMaybeMessage< ::tendermint::state::ConsensusParamsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::state::ConsensusParamsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::state::Version* Arena::CreateMaybeMessage< ::tendermint::state::Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::state::Version >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::state::State* Arena::CreateMaybeMessage< ::tendermint::state::State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::state::State >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
