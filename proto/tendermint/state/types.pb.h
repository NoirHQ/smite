// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/state/types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tendermint_2fstate_2ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tendermint_2fstate_2ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include "tendermint/abci/types.pb.h"
#include "tendermint/types/types.pb.h"
#include "tendermint/types/validator.pb.h"
#include "tendermint/types/params.pb.h"
#include "tendermint/version/types.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tendermint_2fstate_2ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2fstate_2ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2fstate_2ftypes_2eproto;
namespace tendermint {
namespace state {
class ABCIResponses;
struct ABCIResponsesDefaultTypeInternal;
extern ABCIResponsesDefaultTypeInternal _ABCIResponses_default_instance_;
class ConsensusParamsInfo;
struct ConsensusParamsInfoDefaultTypeInternal;
extern ConsensusParamsInfoDefaultTypeInternal _ConsensusParamsInfo_default_instance_;
class State;
struct StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class ValidatorsInfo;
struct ValidatorsInfoDefaultTypeInternal;
extern ValidatorsInfoDefaultTypeInternal _ValidatorsInfo_default_instance_;
class Version;
struct VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
}  // namespace state
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> ::tendermint::state::ABCIResponses* Arena::CreateMaybeMessage<::tendermint::state::ABCIResponses>(Arena*);
template<> ::tendermint::state::ConsensusParamsInfo* Arena::CreateMaybeMessage<::tendermint::state::ConsensusParamsInfo>(Arena*);
template<> ::tendermint::state::State* Arena::CreateMaybeMessage<::tendermint::state::State>(Arena*);
template<> ::tendermint::state::ValidatorsInfo* Arena::CreateMaybeMessage<::tendermint::state::ValidatorsInfo>(Arena*);
template<> ::tendermint::state::Version* Arena::CreateMaybeMessage<::tendermint::state::Version>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tendermint {
namespace state {

// ===================================================================

class ABCIResponses final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.state.ABCIResponses) */ {
 public:
  inline ABCIResponses() : ABCIResponses(nullptr) {}
  ~ABCIResponses() override;
  explicit constexpr ABCIResponses(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ABCIResponses(const ABCIResponses& from);
  ABCIResponses(ABCIResponses&& from) noexcept
    : ABCIResponses() {
    *this = ::std::move(from);
  }

  inline ABCIResponses& operator=(const ABCIResponses& from) {
    CopyFrom(from);
    return *this;
  }
  inline ABCIResponses& operator=(ABCIResponses&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ABCIResponses& default_instance() {
    return *internal_default_instance();
  }
  static inline const ABCIResponses* internal_default_instance() {
    return reinterpret_cast<const ABCIResponses*>(
               &_ABCIResponses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ABCIResponses& a, ABCIResponses& b) {
    a.Swap(&b);
  }
  inline void Swap(ABCIResponses* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ABCIResponses* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ABCIResponses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ABCIResponses>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ABCIResponses& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ABCIResponses& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ABCIResponses* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.state.ABCIResponses";
  }
  protected:
  explicit ABCIResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeliverTxsFieldNumber = 1,
    kEndBlockFieldNumber = 2,
    kBeginBlockFieldNumber = 3,
  };
  // repeated .tendermint.abci.ResponseDeliverTx deliver_txs = 1;
  int deliver_txs_size() const;
  private:
  int _internal_deliver_txs_size() const;
  public:
  void clear_deliver_txs();
  ::tendermint::abci::ResponseDeliverTx* mutable_deliver_txs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::abci::ResponseDeliverTx >*
      mutable_deliver_txs();
  private:
  const ::tendermint::abci::ResponseDeliverTx& _internal_deliver_txs(int index) const;
  ::tendermint::abci::ResponseDeliverTx* _internal_add_deliver_txs();
  public:
  const ::tendermint::abci::ResponseDeliverTx& deliver_txs(int index) const;
  ::tendermint::abci::ResponseDeliverTx* add_deliver_txs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::abci::ResponseDeliverTx >&
      deliver_txs() const;

  // .tendermint.abci.ResponseEndBlock end_block = 2;
  bool has_end_block() const;
  private:
  bool _internal_has_end_block() const;
  public:
  void clear_end_block();
  const ::tendermint::abci::ResponseEndBlock& end_block() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseEndBlock* release_end_block();
  ::tendermint::abci::ResponseEndBlock* mutable_end_block();
  void set_allocated_end_block(::tendermint::abci::ResponseEndBlock* end_block);
  private:
  const ::tendermint::abci::ResponseEndBlock& _internal_end_block() const;
  ::tendermint::abci::ResponseEndBlock* _internal_mutable_end_block();
  public:
  void unsafe_arena_set_allocated_end_block(
      ::tendermint::abci::ResponseEndBlock* end_block);
  ::tendermint::abci::ResponseEndBlock* unsafe_arena_release_end_block();

  // .tendermint.abci.ResponseBeginBlock begin_block = 3;
  bool has_begin_block() const;
  private:
  bool _internal_has_begin_block() const;
  public:
  void clear_begin_block();
  const ::tendermint::abci::ResponseBeginBlock& begin_block() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseBeginBlock* release_begin_block();
  ::tendermint::abci::ResponseBeginBlock* mutable_begin_block();
  void set_allocated_begin_block(::tendermint::abci::ResponseBeginBlock* begin_block);
  private:
  const ::tendermint::abci::ResponseBeginBlock& _internal_begin_block() const;
  ::tendermint::abci::ResponseBeginBlock* _internal_mutable_begin_block();
  public:
  void unsafe_arena_set_allocated_begin_block(
      ::tendermint::abci::ResponseBeginBlock* begin_block);
  ::tendermint::abci::ResponseBeginBlock* unsafe_arena_release_begin_block();

  // @@protoc_insertion_point(class_scope:tendermint.state.ABCIResponses)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::abci::ResponseDeliverTx > deliver_txs_;
  ::tendermint::abci::ResponseEndBlock* end_block_;
  ::tendermint::abci::ResponseBeginBlock* begin_block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fstate_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ValidatorsInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.state.ValidatorsInfo) */ {
 public:
  inline ValidatorsInfo() : ValidatorsInfo(nullptr) {}
  ~ValidatorsInfo() override;
  explicit constexpr ValidatorsInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidatorsInfo(const ValidatorsInfo& from);
  ValidatorsInfo(ValidatorsInfo&& from) noexcept
    : ValidatorsInfo() {
    *this = ::std::move(from);
  }

  inline ValidatorsInfo& operator=(const ValidatorsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorsInfo& operator=(ValidatorsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidatorsInfo* internal_default_instance() {
    return reinterpret_cast<const ValidatorsInfo*>(
               &_ValidatorsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ValidatorsInfo& a, ValidatorsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatorsInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidatorsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidatorsInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidatorsInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ValidatorsInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatorsInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.state.ValidatorsInfo";
  }
  protected:
  explicit ValidatorsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatorSetFieldNumber = 1,
    kLastHeightChangedFieldNumber = 2,
  };
  // .tendermint.types.ValidatorSet validator_set = 1;
  bool has_validator_set() const;
  private:
  bool _internal_has_validator_set() const;
  public:
  void clear_validator_set();
  const ::tendermint::types::ValidatorSet& validator_set() const;
  PROTOBUF_NODISCARD ::tendermint::types::ValidatorSet* release_validator_set();
  ::tendermint::types::ValidatorSet* mutable_validator_set();
  void set_allocated_validator_set(::tendermint::types::ValidatorSet* validator_set);
  private:
  const ::tendermint::types::ValidatorSet& _internal_validator_set() const;
  ::tendermint::types::ValidatorSet* _internal_mutable_validator_set();
  public:
  void unsafe_arena_set_allocated_validator_set(
      ::tendermint::types::ValidatorSet* validator_set);
  ::tendermint::types::ValidatorSet* unsafe_arena_release_validator_set();

  // int64 last_height_changed = 2;
  void clear_last_height_changed();
  int64_t last_height_changed() const;
  void set_last_height_changed(int64_t value);
  private:
  int64_t _internal_last_height_changed() const;
  void _internal_set_last_height_changed(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.state.ValidatorsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tendermint::types::ValidatorSet* validator_set_;
  int64_t last_height_changed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fstate_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ConsensusParamsInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.state.ConsensusParamsInfo) */ {
 public:
  inline ConsensusParamsInfo() : ConsensusParamsInfo(nullptr) {}
  ~ConsensusParamsInfo() override;
  explicit constexpr ConsensusParamsInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConsensusParamsInfo(const ConsensusParamsInfo& from);
  ConsensusParamsInfo(ConsensusParamsInfo&& from) noexcept
    : ConsensusParamsInfo() {
    *this = ::std::move(from);
  }

  inline ConsensusParamsInfo& operator=(const ConsensusParamsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusParamsInfo& operator=(ConsensusParamsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsensusParamsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsensusParamsInfo* internal_default_instance() {
    return reinterpret_cast<const ConsensusParamsInfo*>(
               &_ConsensusParamsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConsensusParamsInfo& a, ConsensusParamsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsensusParamsInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsensusParamsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConsensusParamsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConsensusParamsInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConsensusParamsInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConsensusParamsInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusParamsInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.state.ConsensusParamsInfo";
  }
  protected:
  explicit ConsensusParamsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsensusParamsFieldNumber = 1,
    kLastHeightChangedFieldNumber = 2,
  };
  // .tendermint.types.ConsensusParams consensus_params = 1 [(.gogoproto.nullable) = false];
  bool has_consensus_params() const;
  private:
  bool _internal_has_consensus_params() const;
  public:
  void clear_consensus_params();
  const ::tendermint::types::ConsensusParams& consensus_params() const;
  PROTOBUF_NODISCARD ::tendermint::types::ConsensusParams* release_consensus_params();
  ::tendermint::types::ConsensusParams* mutable_consensus_params();
  void set_allocated_consensus_params(::tendermint::types::ConsensusParams* consensus_params);
  private:
  const ::tendermint::types::ConsensusParams& _internal_consensus_params() const;
  ::tendermint::types::ConsensusParams* _internal_mutable_consensus_params();
  public:
  void unsafe_arena_set_allocated_consensus_params(
      ::tendermint::types::ConsensusParams* consensus_params);
  ::tendermint::types::ConsensusParams* unsafe_arena_release_consensus_params();

  // int64 last_height_changed = 2;
  void clear_last_height_changed();
  int64_t last_height_changed() const;
  void set_last_height_changed(int64_t value);
  private:
  int64_t _internal_last_height_changed() const;
  void _internal_set_last_height_changed(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.state.ConsensusParamsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tendermint::types::ConsensusParams* consensus_params_;
  int64_t last_height_changed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fstate_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Version final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.state.Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  ~Version() override;
  explicit constexpr Version(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Version(const Version& from);
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Version& default_instance() {
    return *internal_default_instance();
  }
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  inline void Swap(Version* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Version& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Version& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Version* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.state.Version";
  }
  protected:
  explicit Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSoftwareFieldNumber = 2,
    kConsensusFieldNumber = 1,
  };
  // string software = 2;
  void clear_software();
  const std::string& software() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_software(ArgT0&& arg0, ArgT... args);
  std::string* mutable_software();
  PROTOBUF_NODISCARD std::string* release_software();
  void set_allocated_software(std::string* software);
  private:
  const std::string& _internal_software() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_software(const std::string& value);
  std::string* _internal_mutable_software();
  public:

  // .tendermint.version.Consensus consensus = 1 [(.gogoproto.nullable) = false];
  bool has_consensus() const;
  private:
  bool _internal_has_consensus() const;
  public:
  void clear_consensus();
  const ::tendermint::version::Consensus& consensus() const;
  PROTOBUF_NODISCARD ::tendermint::version::Consensus* release_consensus();
  ::tendermint::version::Consensus* mutable_consensus();
  void set_allocated_consensus(::tendermint::version::Consensus* consensus);
  private:
  const ::tendermint::version::Consensus& _internal_consensus() const;
  ::tendermint::version::Consensus* _internal_mutable_consensus();
  public:
  void unsafe_arena_set_allocated_consensus(
      ::tendermint::version::Consensus* consensus);
  ::tendermint::version::Consensus* unsafe_arena_release_consensus();

  // @@protoc_insertion_point(class_scope:tendermint.state.Version)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr software_;
  ::tendermint::version::Consensus* consensus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fstate_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.state.State) */ {
 public:
  inline State() : State(nullptr) {}
  ~State() override;
  explicit constexpr State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const State& default_instance() {
    return *internal_default_instance();
  }
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<State>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const State& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const State& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.state.State";
  }
  protected:
  explicit State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainIdFieldNumber = 2,
    kLastResultsHashFieldNumber = 12,
    kAppHashFieldNumber = 13,
    kVersionFieldNumber = 1,
    kLastBlockIdFieldNumber = 4,
    kLastBlockTimeFieldNumber = 5,
    kNextValidatorsFieldNumber = 6,
    kValidatorsFieldNumber = 7,
    kLastValidatorsFieldNumber = 8,
    kConsensusParamsFieldNumber = 10,
    kLastBlockHeightFieldNumber = 3,
    kLastHeightValidatorsChangedFieldNumber = 9,
    kLastHeightConsensusParamsChangedFieldNumber = 11,
    kInitialHeightFieldNumber = 14,
  };
  // string chain_id = 2 [(.gogoproto.customname) = "ChainID"];
  void clear_chain_id();
  const std::string& chain_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chain_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chain_id();
  PROTOBUF_NODISCARD std::string* release_chain_id();
  void set_allocated_chain_id(std::string* chain_id);
  private:
  const std::string& _internal_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_id(const std::string& value);
  std::string* _internal_mutable_chain_id();
  public:

  // bytes last_results_hash = 12;
  void clear_last_results_hash();
  const std::string& last_results_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_results_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_results_hash();
  PROTOBUF_NODISCARD std::string* release_last_results_hash();
  void set_allocated_last_results_hash(std::string* last_results_hash);
  private:
  const std::string& _internal_last_results_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_results_hash(const std::string& value);
  std::string* _internal_mutable_last_results_hash();
  public:

  // bytes app_hash = 13;
  void clear_app_hash();
  const std::string& app_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_hash();
  PROTOBUF_NODISCARD std::string* release_app_hash();
  void set_allocated_app_hash(std::string* app_hash);
  private:
  const std::string& _internal_app_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_hash(const std::string& value);
  std::string* _internal_mutable_app_hash();
  public:

  // .tendermint.state.Version version = 1 [(.gogoproto.nullable) = false];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::tendermint::state::Version& version() const;
  PROTOBUF_NODISCARD ::tendermint::state::Version* release_version();
  ::tendermint::state::Version* mutable_version();
  void set_allocated_version(::tendermint::state::Version* version);
  private:
  const ::tendermint::state::Version& _internal_version() const;
  ::tendermint::state::Version* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::tendermint::state::Version* version);
  ::tendermint::state::Version* unsafe_arena_release_version();

  // .tendermint.types.BlockID last_block_id = 4 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "LastBlockID"];
  bool has_last_block_id() const;
  private:
  bool _internal_has_last_block_id() const;
  public:
  void clear_last_block_id();
  const ::tendermint::types::BlockID& last_block_id() const;
  PROTOBUF_NODISCARD ::tendermint::types::BlockID* release_last_block_id();
  ::tendermint::types::BlockID* mutable_last_block_id();
  void set_allocated_last_block_id(::tendermint::types::BlockID* last_block_id);
  private:
  const ::tendermint::types::BlockID& _internal_last_block_id() const;
  ::tendermint::types::BlockID* _internal_mutable_last_block_id();
  public:
  void unsafe_arena_set_allocated_last_block_id(
      ::tendermint::types::BlockID* last_block_id);
  ::tendermint::types::BlockID* unsafe_arena_release_last_block_id();

  // .google.protobuf.Timestamp last_block_time = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_last_block_time() const;
  private:
  bool _internal_has_last_block_time() const;
  public:
  void clear_last_block_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_block_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_block_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_block_time();
  void set_allocated_last_block_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_block_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_block_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_block_time();
  public:
  void unsafe_arena_set_allocated_last_block_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_block_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_block_time();

  // .tendermint.types.ValidatorSet next_validators = 6;
  bool has_next_validators() const;
  private:
  bool _internal_has_next_validators() const;
  public:
  void clear_next_validators();
  const ::tendermint::types::ValidatorSet& next_validators() const;
  PROTOBUF_NODISCARD ::tendermint::types::ValidatorSet* release_next_validators();
  ::tendermint::types::ValidatorSet* mutable_next_validators();
  void set_allocated_next_validators(::tendermint::types::ValidatorSet* next_validators);
  private:
  const ::tendermint::types::ValidatorSet& _internal_next_validators() const;
  ::tendermint::types::ValidatorSet* _internal_mutable_next_validators();
  public:
  void unsafe_arena_set_allocated_next_validators(
      ::tendermint::types::ValidatorSet* next_validators);
  ::tendermint::types::ValidatorSet* unsafe_arena_release_next_validators();

  // .tendermint.types.ValidatorSet validators = 7;
  bool has_validators() const;
  private:
  bool _internal_has_validators() const;
  public:
  void clear_validators();
  const ::tendermint::types::ValidatorSet& validators() const;
  PROTOBUF_NODISCARD ::tendermint::types::ValidatorSet* release_validators();
  ::tendermint::types::ValidatorSet* mutable_validators();
  void set_allocated_validators(::tendermint::types::ValidatorSet* validators);
  private:
  const ::tendermint::types::ValidatorSet& _internal_validators() const;
  ::tendermint::types::ValidatorSet* _internal_mutable_validators();
  public:
  void unsafe_arena_set_allocated_validators(
      ::tendermint::types::ValidatorSet* validators);
  ::tendermint::types::ValidatorSet* unsafe_arena_release_validators();

  // .tendermint.types.ValidatorSet last_validators = 8;
  bool has_last_validators() const;
  private:
  bool _internal_has_last_validators() const;
  public:
  void clear_last_validators();
  const ::tendermint::types::ValidatorSet& last_validators() const;
  PROTOBUF_NODISCARD ::tendermint::types::ValidatorSet* release_last_validators();
  ::tendermint::types::ValidatorSet* mutable_last_validators();
  void set_allocated_last_validators(::tendermint::types::ValidatorSet* last_validators);
  private:
  const ::tendermint::types::ValidatorSet& _internal_last_validators() const;
  ::tendermint::types::ValidatorSet* _internal_mutable_last_validators();
  public:
  void unsafe_arena_set_allocated_last_validators(
      ::tendermint::types::ValidatorSet* last_validators);
  ::tendermint::types::ValidatorSet* unsafe_arena_release_last_validators();

  // .tendermint.types.ConsensusParams consensus_params = 10 [(.gogoproto.nullable) = false];
  bool has_consensus_params() const;
  private:
  bool _internal_has_consensus_params() const;
  public:
  void clear_consensus_params();
  const ::tendermint::types::ConsensusParams& consensus_params() const;
  PROTOBUF_NODISCARD ::tendermint::types::ConsensusParams* release_consensus_params();
  ::tendermint::types::ConsensusParams* mutable_consensus_params();
  void set_allocated_consensus_params(::tendermint::types::ConsensusParams* consensus_params);
  private:
  const ::tendermint::types::ConsensusParams& _internal_consensus_params() const;
  ::tendermint::types::ConsensusParams* _internal_mutable_consensus_params();
  public:
  void unsafe_arena_set_allocated_consensus_params(
      ::tendermint::types::ConsensusParams* consensus_params);
  ::tendermint::types::ConsensusParams* unsafe_arena_release_consensus_params();

  // int64 last_block_height = 3;
  void clear_last_block_height();
  int64_t last_block_height() const;
  void set_last_block_height(int64_t value);
  private:
  int64_t _internal_last_block_height() const;
  void _internal_set_last_block_height(int64_t value);
  public:

  // int64 last_height_validators_changed = 9;
  void clear_last_height_validators_changed();
  int64_t last_height_validators_changed() const;
  void set_last_height_validators_changed(int64_t value);
  private:
  int64_t _internal_last_height_validators_changed() const;
  void _internal_set_last_height_validators_changed(int64_t value);
  public:

  // int64 last_height_consensus_params_changed = 11;
  void clear_last_height_consensus_params_changed();
  int64_t last_height_consensus_params_changed() const;
  void set_last_height_consensus_params_changed(int64_t value);
  private:
  int64_t _internal_last_height_consensus_params_changed() const;
  void _internal_set_last_height_consensus_params_changed(int64_t value);
  public:

  // int64 initial_height = 14;
  void clear_initial_height();
  int64_t initial_height() const;
  void set_initial_height(int64_t value);
  private:
  int64_t _internal_initial_height() const;
  void _internal_set_initial_height(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.state.State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_results_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_hash_;
  ::tendermint::state::Version* version_;
  ::tendermint::types::BlockID* last_block_id_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* last_block_time_;
  ::tendermint::types::ValidatorSet* next_validators_;
  ::tendermint::types::ValidatorSet* validators_;
  ::tendermint::types::ValidatorSet* last_validators_;
  ::tendermint::types::ConsensusParams* consensus_params_;
  int64_t last_block_height_;
  int64_t last_height_validators_changed_;
  int64_t last_height_consensus_params_changed_;
  int64_t initial_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fstate_2ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ABCIResponses

// repeated .tendermint.abci.ResponseDeliverTx deliver_txs = 1;
inline int ABCIResponses::_internal_deliver_txs_size() const {
  return deliver_txs_.size();
}
inline int ABCIResponses::deliver_txs_size() const {
  return _internal_deliver_txs_size();
}
inline ::tendermint::abci::ResponseDeliverTx* ABCIResponses::mutable_deliver_txs(int index) {
  // @@protoc_insertion_point(field_mutable:tendermint.state.ABCIResponses.deliver_txs)
  return deliver_txs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::abci::ResponseDeliverTx >*
ABCIResponses::mutable_deliver_txs() {
  // @@protoc_insertion_point(field_mutable_list:tendermint.state.ABCIResponses.deliver_txs)
  return &deliver_txs_;
}
inline const ::tendermint::abci::ResponseDeliverTx& ABCIResponses::_internal_deliver_txs(int index) const {
  return deliver_txs_.Get(index);
}
inline const ::tendermint::abci::ResponseDeliverTx& ABCIResponses::deliver_txs(int index) const {
  // @@protoc_insertion_point(field_get:tendermint.state.ABCIResponses.deliver_txs)
  return _internal_deliver_txs(index);
}
inline ::tendermint::abci::ResponseDeliverTx* ABCIResponses::_internal_add_deliver_txs() {
  return deliver_txs_.Add();
}
inline ::tendermint::abci::ResponseDeliverTx* ABCIResponses::add_deliver_txs() {
  ::tendermint::abci::ResponseDeliverTx* _add = _internal_add_deliver_txs();
  // @@protoc_insertion_point(field_add:tendermint.state.ABCIResponses.deliver_txs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::abci::ResponseDeliverTx >&
ABCIResponses::deliver_txs() const {
  // @@protoc_insertion_point(field_list:tendermint.state.ABCIResponses.deliver_txs)
  return deliver_txs_;
}

// .tendermint.abci.ResponseEndBlock end_block = 2;
inline bool ABCIResponses::_internal_has_end_block() const {
  return this != internal_default_instance() && end_block_ != nullptr;
}
inline bool ABCIResponses::has_end_block() const {
  return _internal_has_end_block();
}
inline const ::tendermint::abci::ResponseEndBlock& ABCIResponses::_internal_end_block() const {
  const ::tendermint::abci::ResponseEndBlock* p = end_block_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::abci::ResponseEndBlock&>(
      ::tendermint::abci::_ResponseEndBlock_default_instance_);
}
inline const ::tendermint::abci::ResponseEndBlock& ABCIResponses::end_block() const {
  // @@protoc_insertion_point(field_get:tendermint.state.ABCIResponses.end_block)
  return _internal_end_block();
}
inline void ABCIResponses::unsafe_arena_set_allocated_end_block(
    ::tendermint::abci::ResponseEndBlock* end_block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_block_);
  }
  end_block_ = end_block;
  if (end_block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.state.ABCIResponses.end_block)
}
inline ::tendermint::abci::ResponseEndBlock* ABCIResponses::release_end_block() {
  
  ::tendermint::abci::ResponseEndBlock* temp = end_block_;
  end_block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::abci::ResponseEndBlock* ABCIResponses::unsafe_arena_release_end_block() {
  // @@protoc_insertion_point(field_release:tendermint.state.ABCIResponses.end_block)
  
  ::tendermint::abci::ResponseEndBlock* temp = end_block_;
  end_block_ = nullptr;
  return temp;
}
inline ::tendermint::abci::ResponseEndBlock* ABCIResponses::_internal_mutable_end_block() {
  
  if (end_block_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::abci::ResponseEndBlock>(GetArenaForAllocation());
    end_block_ = p;
  }
  return end_block_;
}
inline ::tendermint::abci::ResponseEndBlock* ABCIResponses::mutable_end_block() {
  ::tendermint::abci::ResponseEndBlock* _msg = _internal_mutable_end_block();
  // @@protoc_insertion_point(field_mutable:tendermint.state.ABCIResponses.end_block)
  return _msg;
}
inline void ABCIResponses::set_allocated_end_block(::tendermint::abci::ResponseEndBlock* end_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_block_);
  }
  if (end_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_block));
    if (message_arena != submessage_arena) {
      end_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_block, submessage_arena);
    }
    
  } else {
    
  }
  end_block_ = end_block;
  // @@protoc_insertion_point(field_set_allocated:tendermint.state.ABCIResponses.end_block)
}

// .tendermint.abci.ResponseBeginBlock begin_block = 3;
inline bool ABCIResponses::_internal_has_begin_block() const {
  return this != internal_default_instance() && begin_block_ != nullptr;
}
inline bool ABCIResponses::has_begin_block() const {
  return _internal_has_begin_block();
}
inline const ::tendermint::abci::ResponseBeginBlock& ABCIResponses::_internal_begin_block() const {
  const ::tendermint::abci::ResponseBeginBlock* p = begin_block_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::abci::ResponseBeginBlock&>(
      ::tendermint::abci::_ResponseBeginBlock_default_instance_);
}
inline const ::tendermint::abci::ResponseBeginBlock& ABCIResponses::begin_block() const {
  // @@protoc_insertion_point(field_get:tendermint.state.ABCIResponses.begin_block)
  return _internal_begin_block();
}
inline void ABCIResponses::unsafe_arena_set_allocated_begin_block(
    ::tendermint::abci::ResponseBeginBlock* begin_block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(begin_block_);
  }
  begin_block_ = begin_block;
  if (begin_block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.state.ABCIResponses.begin_block)
}
inline ::tendermint::abci::ResponseBeginBlock* ABCIResponses::release_begin_block() {
  
  ::tendermint::abci::ResponseBeginBlock* temp = begin_block_;
  begin_block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::abci::ResponseBeginBlock* ABCIResponses::unsafe_arena_release_begin_block() {
  // @@protoc_insertion_point(field_release:tendermint.state.ABCIResponses.begin_block)
  
  ::tendermint::abci::ResponseBeginBlock* temp = begin_block_;
  begin_block_ = nullptr;
  return temp;
}
inline ::tendermint::abci::ResponseBeginBlock* ABCIResponses::_internal_mutable_begin_block() {
  
  if (begin_block_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::abci::ResponseBeginBlock>(GetArenaForAllocation());
    begin_block_ = p;
  }
  return begin_block_;
}
inline ::tendermint::abci::ResponseBeginBlock* ABCIResponses::mutable_begin_block() {
  ::tendermint::abci::ResponseBeginBlock* _msg = _internal_mutable_begin_block();
  // @@protoc_insertion_point(field_mutable:tendermint.state.ABCIResponses.begin_block)
  return _msg;
}
inline void ABCIResponses::set_allocated_begin_block(::tendermint::abci::ResponseBeginBlock* begin_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(begin_block_);
  }
  if (begin_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(begin_block));
    if (message_arena != submessage_arena) {
      begin_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, begin_block, submessage_arena);
    }
    
  } else {
    
  }
  begin_block_ = begin_block;
  // @@protoc_insertion_point(field_set_allocated:tendermint.state.ABCIResponses.begin_block)
}

// -------------------------------------------------------------------

// ValidatorsInfo

// .tendermint.types.ValidatorSet validator_set = 1;
inline bool ValidatorsInfo::_internal_has_validator_set() const {
  return this != internal_default_instance() && validator_set_ != nullptr;
}
inline bool ValidatorsInfo::has_validator_set() const {
  return _internal_has_validator_set();
}
inline const ::tendermint::types::ValidatorSet& ValidatorsInfo::_internal_validator_set() const {
  const ::tendermint::types::ValidatorSet* p = validator_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::ValidatorSet&>(
      ::tendermint::types::_ValidatorSet_default_instance_);
}
inline const ::tendermint::types::ValidatorSet& ValidatorsInfo::validator_set() const {
  // @@protoc_insertion_point(field_get:tendermint.state.ValidatorsInfo.validator_set)
  return _internal_validator_set();
}
inline void ValidatorsInfo::unsafe_arena_set_allocated_validator_set(
    ::tendermint::types::ValidatorSet* validator_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validator_set_);
  }
  validator_set_ = validator_set;
  if (validator_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.state.ValidatorsInfo.validator_set)
}
inline ::tendermint::types::ValidatorSet* ValidatorsInfo::release_validator_set() {
  
  ::tendermint::types::ValidatorSet* temp = validator_set_;
  validator_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::ValidatorSet* ValidatorsInfo::unsafe_arena_release_validator_set() {
  // @@protoc_insertion_point(field_release:tendermint.state.ValidatorsInfo.validator_set)
  
  ::tendermint::types::ValidatorSet* temp = validator_set_;
  validator_set_ = nullptr;
  return temp;
}
inline ::tendermint::types::ValidatorSet* ValidatorsInfo::_internal_mutable_validator_set() {
  
  if (validator_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::ValidatorSet>(GetArenaForAllocation());
    validator_set_ = p;
  }
  return validator_set_;
}
inline ::tendermint::types::ValidatorSet* ValidatorsInfo::mutable_validator_set() {
  ::tendermint::types::ValidatorSet* _msg = _internal_mutable_validator_set();
  // @@protoc_insertion_point(field_mutable:tendermint.state.ValidatorsInfo.validator_set)
  return _msg;
}
inline void ValidatorsInfo::set_allocated_validator_set(::tendermint::types::ValidatorSet* validator_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(validator_set_);
  }
  if (validator_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validator_set));
    if (message_arena != submessage_arena) {
      validator_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validator_set, submessage_arena);
    }
    
  } else {
    
  }
  validator_set_ = validator_set;
  // @@protoc_insertion_point(field_set_allocated:tendermint.state.ValidatorsInfo.validator_set)
}

// int64 last_height_changed = 2;
inline void ValidatorsInfo::clear_last_height_changed() {
  last_height_changed_ = int64_t{0};
}
inline int64_t ValidatorsInfo::_internal_last_height_changed() const {
  return last_height_changed_;
}
inline int64_t ValidatorsInfo::last_height_changed() const {
  // @@protoc_insertion_point(field_get:tendermint.state.ValidatorsInfo.last_height_changed)
  return _internal_last_height_changed();
}
inline void ValidatorsInfo::_internal_set_last_height_changed(int64_t value) {
  
  last_height_changed_ = value;
}
inline void ValidatorsInfo::set_last_height_changed(int64_t value) {
  _internal_set_last_height_changed(value);
  // @@protoc_insertion_point(field_set:tendermint.state.ValidatorsInfo.last_height_changed)
}

// -------------------------------------------------------------------

// ConsensusParamsInfo

// .tendermint.types.ConsensusParams consensus_params = 1 [(.gogoproto.nullable) = false];
inline bool ConsensusParamsInfo::_internal_has_consensus_params() const {
  return this != internal_default_instance() && consensus_params_ != nullptr;
}
inline bool ConsensusParamsInfo::has_consensus_params() const {
  return _internal_has_consensus_params();
}
inline const ::tendermint::types::ConsensusParams& ConsensusParamsInfo::_internal_consensus_params() const {
  const ::tendermint::types::ConsensusParams* p = consensus_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::ConsensusParams&>(
      ::tendermint::types::_ConsensusParams_default_instance_);
}
inline const ::tendermint::types::ConsensusParams& ConsensusParamsInfo::consensus_params() const {
  // @@protoc_insertion_point(field_get:tendermint.state.ConsensusParamsInfo.consensus_params)
  return _internal_consensus_params();
}
inline void ConsensusParamsInfo::unsafe_arena_set_allocated_consensus_params(
    ::tendermint::types::ConsensusParams* consensus_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensus_params_);
  }
  consensus_params_ = consensus_params;
  if (consensus_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.state.ConsensusParamsInfo.consensus_params)
}
inline ::tendermint::types::ConsensusParams* ConsensusParamsInfo::release_consensus_params() {
  
  ::tendermint::types::ConsensusParams* temp = consensus_params_;
  consensus_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::ConsensusParams* ConsensusParamsInfo::unsafe_arena_release_consensus_params() {
  // @@protoc_insertion_point(field_release:tendermint.state.ConsensusParamsInfo.consensus_params)
  
  ::tendermint::types::ConsensusParams* temp = consensus_params_;
  consensus_params_ = nullptr;
  return temp;
}
inline ::tendermint::types::ConsensusParams* ConsensusParamsInfo::_internal_mutable_consensus_params() {
  
  if (consensus_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::ConsensusParams>(GetArenaForAllocation());
    consensus_params_ = p;
  }
  return consensus_params_;
}
inline ::tendermint::types::ConsensusParams* ConsensusParamsInfo::mutable_consensus_params() {
  ::tendermint::types::ConsensusParams* _msg = _internal_mutable_consensus_params();
  // @@protoc_insertion_point(field_mutable:tendermint.state.ConsensusParamsInfo.consensus_params)
  return _msg;
}
inline void ConsensusParamsInfo::set_allocated_consensus_params(::tendermint::types::ConsensusParams* consensus_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensus_params_);
  }
  if (consensus_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensus_params));
    if (message_arena != submessage_arena) {
      consensus_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensus_params, submessage_arena);
    }
    
  } else {
    
  }
  consensus_params_ = consensus_params;
  // @@protoc_insertion_point(field_set_allocated:tendermint.state.ConsensusParamsInfo.consensus_params)
}

// int64 last_height_changed = 2;
inline void ConsensusParamsInfo::clear_last_height_changed() {
  last_height_changed_ = int64_t{0};
}
inline int64_t ConsensusParamsInfo::_internal_last_height_changed() const {
  return last_height_changed_;
}
inline int64_t ConsensusParamsInfo::last_height_changed() const {
  // @@protoc_insertion_point(field_get:tendermint.state.ConsensusParamsInfo.last_height_changed)
  return _internal_last_height_changed();
}
inline void ConsensusParamsInfo::_internal_set_last_height_changed(int64_t value) {
  
  last_height_changed_ = value;
}
inline void ConsensusParamsInfo::set_last_height_changed(int64_t value) {
  _internal_set_last_height_changed(value);
  // @@protoc_insertion_point(field_set:tendermint.state.ConsensusParamsInfo.last_height_changed)
}

// -------------------------------------------------------------------

// Version

// .tendermint.version.Consensus consensus = 1 [(.gogoproto.nullable) = false];
inline bool Version::_internal_has_consensus() const {
  return this != internal_default_instance() && consensus_ != nullptr;
}
inline bool Version::has_consensus() const {
  return _internal_has_consensus();
}
inline const ::tendermint::version::Consensus& Version::_internal_consensus() const {
  const ::tendermint::version::Consensus* p = consensus_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::version::Consensus&>(
      ::tendermint::version::_Consensus_default_instance_);
}
inline const ::tendermint::version::Consensus& Version::consensus() const {
  // @@protoc_insertion_point(field_get:tendermint.state.Version.consensus)
  return _internal_consensus();
}
inline void Version::unsafe_arena_set_allocated_consensus(
    ::tendermint::version::Consensus* consensus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensus_);
  }
  consensus_ = consensus;
  if (consensus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.state.Version.consensus)
}
inline ::tendermint::version::Consensus* Version::release_consensus() {
  
  ::tendermint::version::Consensus* temp = consensus_;
  consensus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::version::Consensus* Version::unsafe_arena_release_consensus() {
  // @@protoc_insertion_point(field_release:tendermint.state.Version.consensus)
  
  ::tendermint::version::Consensus* temp = consensus_;
  consensus_ = nullptr;
  return temp;
}
inline ::tendermint::version::Consensus* Version::_internal_mutable_consensus() {
  
  if (consensus_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::version::Consensus>(GetArenaForAllocation());
    consensus_ = p;
  }
  return consensus_;
}
inline ::tendermint::version::Consensus* Version::mutable_consensus() {
  ::tendermint::version::Consensus* _msg = _internal_mutable_consensus();
  // @@protoc_insertion_point(field_mutable:tendermint.state.Version.consensus)
  return _msg;
}
inline void Version::set_allocated_consensus(::tendermint::version::Consensus* consensus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensus_);
  }
  if (consensus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensus));
    if (message_arena != submessage_arena) {
      consensus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensus, submessage_arena);
    }
    
  } else {
    
  }
  consensus_ = consensus;
  // @@protoc_insertion_point(field_set_allocated:tendermint.state.Version.consensus)
}

// string software = 2;
inline void Version::clear_software() {
  software_.ClearToEmpty();
}
inline const std::string& Version::software() const {
  // @@protoc_insertion_point(field_get:tendermint.state.Version.software)
  return _internal_software();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Version::set_software(ArgT0&& arg0, ArgT... args) {
 
 software_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.state.Version.software)
}
inline std::string* Version::mutable_software() {
  std::string* _s = _internal_mutable_software();
  // @@protoc_insertion_point(field_mutable:tendermint.state.Version.software)
  return _s;
}
inline const std::string& Version::_internal_software() const {
  return software_.Get();
}
inline void Version::_internal_set_software(const std::string& value) {
  
  software_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Version::_internal_mutable_software() {
  
  return software_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Version::release_software() {
  // @@protoc_insertion_point(field_release:tendermint.state.Version.software)
  return software_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Version::set_allocated_software(std::string* software) {
  if (software != nullptr) {
    
  } else {
    
  }
  software_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), software,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (software_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    software_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.state.Version.software)
}

// -------------------------------------------------------------------

// State

// .tendermint.state.Version version = 1 [(.gogoproto.nullable) = false];
inline bool State::_internal_has_version() const {
  return this != internal_default_instance() && version_ != nullptr;
}
inline bool State::has_version() const {
  return _internal_has_version();
}
inline void State::clear_version() {
  if (GetArenaForAllocation() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
inline const ::tendermint::state::Version& State::_internal_version() const {
  const ::tendermint::state::Version* p = version_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::state::Version&>(
      ::tendermint::state::_Version_default_instance_);
}
inline const ::tendermint::state::Version& State::version() const {
  // @@protoc_insertion_point(field_get:tendermint.state.State.version)
  return _internal_version();
}
inline void State::unsafe_arena_set_allocated_version(
    ::tendermint::state::Version* version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  version_ = version;
  if (version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.state.State.version)
}
inline ::tendermint::state::Version* State::release_version() {
  
  ::tendermint::state::Version* temp = version_;
  version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::state::Version* State::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:tendermint.state.State.version)
  
  ::tendermint::state::Version* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::tendermint::state::Version* State::_internal_mutable_version() {
  
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::state::Version>(GetArenaForAllocation());
    version_ = p;
  }
  return version_;
}
inline ::tendermint::state::Version* State::mutable_version() {
  ::tendermint::state::Version* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:tendermint.state.State.version)
  return _msg;
}
inline void State::set_allocated_version(::tendermint::state::Version* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete version_;
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::state::Version>::GetOwningArena(version);
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:tendermint.state.State.version)
}

// string chain_id = 2 [(.gogoproto.customname) = "ChainID"];
inline void State::clear_chain_id() {
  chain_id_.ClearToEmpty();
}
inline const std::string& State::chain_id() const {
  // @@protoc_insertion_point(field_get:tendermint.state.State.chain_id)
  return _internal_chain_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void State::set_chain_id(ArgT0&& arg0, ArgT... args) {
 
 chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.state.State.chain_id)
}
inline std::string* State::mutable_chain_id() {
  std::string* _s = _internal_mutable_chain_id();
  // @@protoc_insertion_point(field_mutable:tendermint.state.State.chain_id)
  return _s;
}
inline const std::string& State::_internal_chain_id() const {
  return chain_id_.Get();
}
inline void State::_internal_set_chain_id(const std::string& value) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* State::_internal_mutable_chain_id() {
  
  return chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* State::release_chain_id() {
  // @@protoc_insertion_point(field_release:tendermint.state.State.chain_id)
  return chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void State::set_allocated_chain_id(std::string* chain_id) {
  if (chain_id != nullptr) {
    
  } else {
    
  }
  chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chain_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.state.State.chain_id)
}

// int64 initial_height = 14;
inline void State::clear_initial_height() {
  initial_height_ = int64_t{0};
}
inline int64_t State::_internal_initial_height() const {
  return initial_height_;
}
inline int64_t State::initial_height() const {
  // @@protoc_insertion_point(field_get:tendermint.state.State.initial_height)
  return _internal_initial_height();
}
inline void State::_internal_set_initial_height(int64_t value) {
  
  initial_height_ = value;
}
inline void State::set_initial_height(int64_t value) {
  _internal_set_initial_height(value);
  // @@protoc_insertion_point(field_set:tendermint.state.State.initial_height)
}

// int64 last_block_height = 3;
inline void State::clear_last_block_height() {
  last_block_height_ = int64_t{0};
}
inline int64_t State::_internal_last_block_height() const {
  return last_block_height_;
}
inline int64_t State::last_block_height() const {
  // @@protoc_insertion_point(field_get:tendermint.state.State.last_block_height)
  return _internal_last_block_height();
}
inline void State::_internal_set_last_block_height(int64_t value) {
  
  last_block_height_ = value;
}
inline void State::set_last_block_height(int64_t value) {
  _internal_set_last_block_height(value);
  // @@protoc_insertion_point(field_set:tendermint.state.State.last_block_height)
}

// .tendermint.types.BlockID last_block_id = 4 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "LastBlockID"];
inline bool State::_internal_has_last_block_id() const {
  return this != internal_default_instance() && last_block_id_ != nullptr;
}
inline bool State::has_last_block_id() const {
  return _internal_has_last_block_id();
}
inline const ::tendermint::types::BlockID& State::_internal_last_block_id() const {
  const ::tendermint::types::BlockID* p = last_block_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::BlockID&>(
      ::tendermint::types::_BlockID_default_instance_);
}
inline const ::tendermint::types::BlockID& State::last_block_id() const {
  // @@protoc_insertion_point(field_get:tendermint.state.State.last_block_id)
  return _internal_last_block_id();
}
inline void State::unsafe_arena_set_allocated_last_block_id(
    ::tendermint::types::BlockID* last_block_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_block_id_);
  }
  last_block_id_ = last_block_id;
  if (last_block_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.state.State.last_block_id)
}
inline ::tendermint::types::BlockID* State::release_last_block_id() {
  
  ::tendermint::types::BlockID* temp = last_block_id_;
  last_block_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::BlockID* State::unsafe_arena_release_last_block_id() {
  // @@protoc_insertion_point(field_release:tendermint.state.State.last_block_id)
  
  ::tendermint::types::BlockID* temp = last_block_id_;
  last_block_id_ = nullptr;
  return temp;
}
inline ::tendermint::types::BlockID* State::_internal_mutable_last_block_id() {
  
  if (last_block_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::BlockID>(GetArenaForAllocation());
    last_block_id_ = p;
  }
  return last_block_id_;
}
inline ::tendermint::types::BlockID* State::mutable_last_block_id() {
  ::tendermint::types::BlockID* _msg = _internal_mutable_last_block_id();
  // @@protoc_insertion_point(field_mutable:tendermint.state.State.last_block_id)
  return _msg;
}
inline void State::set_allocated_last_block_id(::tendermint::types::BlockID* last_block_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_block_id_);
  }
  if (last_block_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_block_id));
    if (message_arena != submessage_arena) {
      last_block_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_block_id, submessage_arena);
    }
    
  } else {
    
  }
  last_block_id_ = last_block_id;
  // @@protoc_insertion_point(field_set_allocated:tendermint.state.State.last_block_id)
}

// .google.protobuf.Timestamp last_block_time = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool State::_internal_has_last_block_time() const {
  return this != internal_default_instance() && last_block_time_ != nullptr;
}
inline bool State::has_last_block_time() const {
  return _internal_has_last_block_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& State::_internal_last_block_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = last_block_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& State::last_block_time() const {
  // @@protoc_insertion_point(field_get:tendermint.state.State.last_block_time)
  return _internal_last_block_time();
}
inline void State::unsafe_arena_set_allocated_last_block_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_block_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_block_time_);
  }
  last_block_time_ = last_block_time;
  if (last_block_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.state.State.last_block_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* State::release_last_block_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_block_time_;
  last_block_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* State::unsafe_arena_release_last_block_time() {
  // @@protoc_insertion_point(field_release:tendermint.state.State.last_block_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_block_time_;
  last_block_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* State::_internal_mutable_last_block_time() {
  
  if (last_block_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    last_block_time_ = p;
  }
  return last_block_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* State::mutable_last_block_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_block_time();
  // @@protoc_insertion_point(field_mutable:tendermint.state.State.last_block_time)
  return _msg;
}
inline void State::set_allocated_last_block_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_block_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_block_time_);
  }
  if (last_block_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_block_time));
    if (message_arena != submessage_arena) {
      last_block_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_block_time, submessage_arena);
    }
    
  } else {
    
  }
  last_block_time_ = last_block_time;
  // @@protoc_insertion_point(field_set_allocated:tendermint.state.State.last_block_time)
}

// .tendermint.types.ValidatorSet next_validators = 6;
inline bool State::_internal_has_next_validators() const {
  return this != internal_default_instance() && next_validators_ != nullptr;
}
inline bool State::has_next_validators() const {
  return _internal_has_next_validators();
}
inline const ::tendermint::types::ValidatorSet& State::_internal_next_validators() const {
  const ::tendermint::types::ValidatorSet* p = next_validators_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::ValidatorSet&>(
      ::tendermint::types::_ValidatorSet_default_instance_);
}
inline const ::tendermint::types::ValidatorSet& State::next_validators() const {
  // @@protoc_insertion_point(field_get:tendermint.state.State.next_validators)
  return _internal_next_validators();
}
inline void State::unsafe_arena_set_allocated_next_validators(
    ::tendermint::types::ValidatorSet* next_validators) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_validators_);
  }
  next_validators_ = next_validators;
  if (next_validators) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.state.State.next_validators)
}
inline ::tendermint::types::ValidatorSet* State::release_next_validators() {
  
  ::tendermint::types::ValidatorSet* temp = next_validators_;
  next_validators_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::ValidatorSet* State::unsafe_arena_release_next_validators() {
  // @@protoc_insertion_point(field_release:tendermint.state.State.next_validators)
  
  ::tendermint::types::ValidatorSet* temp = next_validators_;
  next_validators_ = nullptr;
  return temp;
}
inline ::tendermint::types::ValidatorSet* State::_internal_mutable_next_validators() {
  
  if (next_validators_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::ValidatorSet>(GetArenaForAllocation());
    next_validators_ = p;
  }
  return next_validators_;
}
inline ::tendermint::types::ValidatorSet* State::mutable_next_validators() {
  ::tendermint::types::ValidatorSet* _msg = _internal_mutable_next_validators();
  // @@protoc_insertion_point(field_mutable:tendermint.state.State.next_validators)
  return _msg;
}
inline void State::set_allocated_next_validators(::tendermint::types::ValidatorSet* next_validators) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_validators_);
  }
  if (next_validators) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_validators));
    if (message_arena != submessage_arena) {
      next_validators = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_validators, submessage_arena);
    }
    
  } else {
    
  }
  next_validators_ = next_validators;
  // @@protoc_insertion_point(field_set_allocated:tendermint.state.State.next_validators)
}

// .tendermint.types.ValidatorSet validators = 7;
inline bool State::_internal_has_validators() const {
  return this != internal_default_instance() && validators_ != nullptr;
}
inline bool State::has_validators() const {
  return _internal_has_validators();
}
inline const ::tendermint::types::ValidatorSet& State::_internal_validators() const {
  const ::tendermint::types::ValidatorSet* p = validators_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::ValidatorSet&>(
      ::tendermint::types::_ValidatorSet_default_instance_);
}
inline const ::tendermint::types::ValidatorSet& State::validators() const {
  // @@protoc_insertion_point(field_get:tendermint.state.State.validators)
  return _internal_validators();
}
inline void State::unsafe_arena_set_allocated_validators(
    ::tendermint::types::ValidatorSet* validators) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validators_);
  }
  validators_ = validators;
  if (validators) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.state.State.validators)
}
inline ::tendermint::types::ValidatorSet* State::release_validators() {
  
  ::tendermint::types::ValidatorSet* temp = validators_;
  validators_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::ValidatorSet* State::unsafe_arena_release_validators() {
  // @@protoc_insertion_point(field_release:tendermint.state.State.validators)
  
  ::tendermint::types::ValidatorSet* temp = validators_;
  validators_ = nullptr;
  return temp;
}
inline ::tendermint::types::ValidatorSet* State::_internal_mutable_validators() {
  
  if (validators_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::ValidatorSet>(GetArenaForAllocation());
    validators_ = p;
  }
  return validators_;
}
inline ::tendermint::types::ValidatorSet* State::mutable_validators() {
  ::tendermint::types::ValidatorSet* _msg = _internal_mutable_validators();
  // @@protoc_insertion_point(field_mutable:tendermint.state.State.validators)
  return _msg;
}
inline void State::set_allocated_validators(::tendermint::types::ValidatorSet* validators) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(validators_);
  }
  if (validators) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validators));
    if (message_arena != submessage_arena) {
      validators = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validators, submessage_arena);
    }
    
  } else {
    
  }
  validators_ = validators;
  // @@protoc_insertion_point(field_set_allocated:tendermint.state.State.validators)
}

// .tendermint.types.ValidatorSet last_validators = 8;
inline bool State::_internal_has_last_validators() const {
  return this != internal_default_instance() && last_validators_ != nullptr;
}
inline bool State::has_last_validators() const {
  return _internal_has_last_validators();
}
inline const ::tendermint::types::ValidatorSet& State::_internal_last_validators() const {
  const ::tendermint::types::ValidatorSet* p = last_validators_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::ValidatorSet&>(
      ::tendermint::types::_ValidatorSet_default_instance_);
}
inline const ::tendermint::types::ValidatorSet& State::last_validators() const {
  // @@protoc_insertion_point(field_get:tendermint.state.State.last_validators)
  return _internal_last_validators();
}
inline void State::unsafe_arena_set_allocated_last_validators(
    ::tendermint::types::ValidatorSet* last_validators) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_validators_);
  }
  last_validators_ = last_validators;
  if (last_validators) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.state.State.last_validators)
}
inline ::tendermint::types::ValidatorSet* State::release_last_validators() {
  
  ::tendermint::types::ValidatorSet* temp = last_validators_;
  last_validators_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::ValidatorSet* State::unsafe_arena_release_last_validators() {
  // @@protoc_insertion_point(field_release:tendermint.state.State.last_validators)
  
  ::tendermint::types::ValidatorSet* temp = last_validators_;
  last_validators_ = nullptr;
  return temp;
}
inline ::tendermint::types::ValidatorSet* State::_internal_mutable_last_validators() {
  
  if (last_validators_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::ValidatorSet>(GetArenaForAllocation());
    last_validators_ = p;
  }
  return last_validators_;
}
inline ::tendermint::types::ValidatorSet* State::mutable_last_validators() {
  ::tendermint::types::ValidatorSet* _msg = _internal_mutable_last_validators();
  // @@protoc_insertion_point(field_mutable:tendermint.state.State.last_validators)
  return _msg;
}
inline void State::set_allocated_last_validators(::tendermint::types::ValidatorSet* last_validators) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_validators_);
  }
  if (last_validators) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_validators));
    if (message_arena != submessage_arena) {
      last_validators = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_validators, submessage_arena);
    }
    
  } else {
    
  }
  last_validators_ = last_validators;
  // @@protoc_insertion_point(field_set_allocated:tendermint.state.State.last_validators)
}

// int64 last_height_validators_changed = 9;
inline void State::clear_last_height_validators_changed() {
  last_height_validators_changed_ = int64_t{0};
}
inline int64_t State::_internal_last_height_validators_changed() const {
  return last_height_validators_changed_;
}
inline int64_t State::last_height_validators_changed() const {
  // @@protoc_insertion_point(field_get:tendermint.state.State.last_height_validators_changed)
  return _internal_last_height_validators_changed();
}
inline void State::_internal_set_last_height_validators_changed(int64_t value) {
  
  last_height_validators_changed_ = value;
}
inline void State::set_last_height_validators_changed(int64_t value) {
  _internal_set_last_height_validators_changed(value);
  // @@protoc_insertion_point(field_set:tendermint.state.State.last_height_validators_changed)
}

// .tendermint.types.ConsensusParams consensus_params = 10 [(.gogoproto.nullable) = false];
inline bool State::_internal_has_consensus_params() const {
  return this != internal_default_instance() && consensus_params_ != nullptr;
}
inline bool State::has_consensus_params() const {
  return _internal_has_consensus_params();
}
inline const ::tendermint::types::ConsensusParams& State::_internal_consensus_params() const {
  const ::tendermint::types::ConsensusParams* p = consensus_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::ConsensusParams&>(
      ::tendermint::types::_ConsensusParams_default_instance_);
}
inline const ::tendermint::types::ConsensusParams& State::consensus_params() const {
  // @@protoc_insertion_point(field_get:tendermint.state.State.consensus_params)
  return _internal_consensus_params();
}
inline void State::unsafe_arena_set_allocated_consensus_params(
    ::tendermint::types::ConsensusParams* consensus_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensus_params_);
  }
  consensus_params_ = consensus_params;
  if (consensus_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.state.State.consensus_params)
}
inline ::tendermint::types::ConsensusParams* State::release_consensus_params() {
  
  ::tendermint::types::ConsensusParams* temp = consensus_params_;
  consensus_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::ConsensusParams* State::unsafe_arena_release_consensus_params() {
  // @@protoc_insertion_point(field_release:tendermint.state.State.consensus_params)
  
  ::tendermint::types::ConsensusParams* temp = consensus_params_;
  consensus_params_ = nullptr;
  return temp;
}
inline ::tendermint::types::ConsensusParams* State::_internal_mutable_consensus_params() {
  
  if (consensus_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::ConsensusParams>(GetArenaForAllocation());
    consensus_params_ = p;
  }
  return consensus_params_;
}
inline ::tendermint::types::ConsensusParams* State::mutable_consensus_params() {
  ::tendermint::types::ConsensusParams* _msg = _internal_mutable_consensus_params();
  // @@protoc_insertion_point(field_mutable:tendermint.state.State.consensus_params)
  return _msg;
}
inline void State::set_allocated_consensus_params(::tendermint::types::ConsensusParams* consensus_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensus_params_);
  }
  if (consensus_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensus_params));
    if (message_arena != submessage_arena) {
      consensus_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensus_params, submessage_arena);
    }
    
  } else {
    
  }
  consensus_params_ = consensus_params;
  // @@protoc_insertion_point(field_set_allocated:tendermint.state.State.consensus_params)
}

// int64 last_height_consensus_params_changed = 11;
inline void State::clear_last_height_consensus_params_changed() {
  last_height_consensus_params_changed_ = int64_t{0};
}
inline int64_t State::_internal_last_height_consensus_params_changed() const {
  return last_height_consensus_params_changed_;
}
inline int64_t State::last_height_consensus_params_changed() const {
  // @@protoc_insertion_point(field_get:tendermint.state.State.last_height_consensus_params_changed)
  return _internal_last_height_consensus_params_changed();
}
inline void State::_internal_set_last_height_consensus_params_changed(int64_t value) {
  
  last_height_consensus_params_changed_ = value;
}
inline void State::set_last_height_consensus_params_changed(int64_t value) {
  _internal_set_last_height_consensus_params_changed(value);
  // @@protoc_insertion_point(field_set:tendermint.state.State.last_height_consensus_params_changed)
}

// bytes last_results_hash = 12;
inline void State::clear_last_results_hash() {
  last_results_hash_.ClearToEmpty();
}
inline const std::string& State::last_results_hash() const {
  // @@protoc_insertion_point(field_get:tendermint.state.State.last_results_hash)
  return _internal_last_results_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void State::set_last_results_hash(ArgT0&& arg0, ArgT... args) {
 
 last_results_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.state.State.last_results_hash)
}
inline std::string* State::mutable_last_results_hash() {
  std::string* _s = _internal_mutable_last_results_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.state.State.last_results_hash)
  return _s;
}
inline const std::string& State::_internal_last_results_hash() const {
  return last_results_hash_.Get();
}
inline void State::_internal_set_last_results_hash(const std::string& value) {
  
  last_results_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* State::_internal_mutable_last_results_hash() {
  
  return last_results_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* State::release_last_results_hash() {
  // @@protoc_insertion_point(field_release:tendermint.state.State.last_results_hash)
  return last_results_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void State::set_allocated_last_results_hash(std::string* last_results_hash) {
  if (last_results_hash != nullptr) {
    
  } else {
    
  }
  last_results_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_results_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_results_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    last_results_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.state.State.last_results_hash)
}

// bytes app_hash = 13;
inline void State::clear_app_hash() {
  app_hash_.ClearToEmpty();
}
inline const std::string& State::app_hash() const {
  // @@protoc_insertion_point(field_get:tendermint.state.State.app_hash)
  return _internal_app_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void State::set_app_hash(ArgT0&& arg0, ArgT... args) {
 
 app_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.state.State.app_hash)
}
inline std::string* State::mutable_app_hash() {
  std::string* _s = _internal_mutable_app_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.state.State.app_hash)
  return _s;
}
inline const std::string& State::_internal_app_hash() const {
  return app_hash_.Get();
}
inline void State::_internal_set_app_hash(const std::string& value) {
  
  app_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* State::_internal_mutable_app_hash() {
  
  return app_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* State::release_app_hash() {
  // @@protoc_insertion_point(field_release:tendermint.state.State.app_hash)
  return app_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void State::set_allocated_app_hash(std::string* app_hash) {
  if (app_hash != nullptr) {
    
  } else {
    
  }
  app_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.state.State.app_hash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace state
}  // namespace tendermint

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tendermint_2fstate_2ftypes_2eproto
