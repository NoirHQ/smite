// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/crypto/proof.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tendermint_2fcrypto_2fproof_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tendermint_2fcrypto_2fproof_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tendermint_2fcrypto_2fproof_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2fcrypto_2fproof_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2fcrypto_2fproof_2eproto;
namespace tendermint {
namespace crypto {
class DominoOp;
struct DominoOpDefaultTypeInternal;
extern DominoOpDefaultTypeInternal _DominoOp_default_instance_;
class Proof;
struct ProofDefaultTypeInternal;
extern ProofDefaultTypeInternal _Proof_default_instance_;
class ProofOp;
struct ProofOpDefaultTypeInternal;
extern ProofOpDefaultTypeInternal _ProofOp_default_instance_;
class ProofOps;
struct ProofOpsDefaultTypeInternal;
extern ProofOpsDefaultTypeInternal _ProofOps_default_instance_;
class ValueOp;
struct ValueOpDefaultTypeInternal;
extern ValueOpDefaultTypeInternal _ValueOp_default_instance_;
}  // namespace crypto
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> ::tendermint::crypto::DominoOp* Arena::CreateMaybeMessage<::tendermint::crypto::DominoOp>(Arena*);
template<> ::tendermint::crypto::Proof* Arena::CreateMaybeMessage<::tendermint::crypto::Proof>(Arena*);
template<> ::tendermint::crypto::ProofOp* Arena::CreateMaybeMessage<::tendermint::crypto::ProofOp>(Arena*);
template<> ::tendermint::crypto::ProofOps* Arena::CreateMaybeMessage<::tendermint::crypto::ProofOps>(Arena*);
template<> ::tendermint::crypto::ValueOp* Arena::CreateMaybeMessage<::tendermint::crypto::ValueOp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tendermint {
namespace crypto {

// ===================================================================

class Proof final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.crypto.Proof) */ {
 public:
  inline Proof() : Proof(nullptr) {}
  ~Proof() override;
  explicit constexpr Proof(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Proof(const Proof& from);
  Proof(Proof&& from) noexcept
    : Proof() {
    *this = ::std::move(from);
  }

  inline Proof& operator=(const Proof& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proof& operator=(Proof&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Proof& default_instance() {
    return *internal_default_instance();
  }
  static inline const Proof* internal_default_instance() {
    return reinterpret_cast<const Proof*>(
               &_Proof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Proof& a, Proof& b) {
    a.Swap(&b);
  }
  inline void Swap(Proof* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proof* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Proof* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Proof>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Proof& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Proof& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proof* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.crypto.Proof";
  }
  protected:
  explicit Proof(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuntsFieldNumber = 4,
    kLeafHashFieldNumber = 3,
    kTotalFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // repeated bytes aunts = 4;
  int aunts_size() const;
  private:
  int _internal_aunts_size() const;
  public:
  void clear_aunts();
  const std::string& aunts(int index) const;
  std::string* mutable_aunts(int index);
  void set_aunts(int index, const std::string& value);
  void set_aunts(int index, std::string&& value);
  void set_aunts(int index, const char* value);
  void set_aunts(int index, const void* value, size_t size);
  std::string* add_aunts();
  void add_aunts(const std::string& value);
  void add_aunts(std::string&& value);
  void add_aunts(const char* value);
  void add_aunts(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aunts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aunts();
  private:
  const std::string& _internal_aunts(int index) const;
  std::string* _internal_add_aunts();
  public:

  // bytes leaf_hash = 3;
  void clear_leaf_hash();
  const std::string& leaf_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_leaf_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_leaf_hash();
  PROTOBUF_NODISCARD std::string* release_leaf_hash();
  void set_allocated_leaf_hash(std::string* leaf_hash);
  private:
  const std::string& _internal_leaf_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leaf_hash(const std::string& value);
  std::string* _internal_mutable_leaf_hash();
  public:

  // int64 total = 1;
  void clear_total();
  int64_t total() const;
  void set_total(int64_t value);
  private:
  int64_t _internal_total() const;
  void _internal_set_total(int64_t value);
  public:

  // int64 index = 2;
  void clear_index();
  int64_t index() const;
  void set_index(int64_t value);
  private:
  int64_t _internal_index() const;
  void _internal_set_index(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.crypto.Proof)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aunts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaf_hash_;
  int64_t total_;
  int64_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fcrypto_2fproof_2eproto;
};
// -------------------------------------------------------------------

class ValueOp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.crypto.ValueOp) */ {
 public:
  inline ValueOp() : ValueOp(nullptr) {}
  ~ValueOp() override;
  explicit constexpr ValueOp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValueOp(const ValueOp& from);
  ValueOp(ValueOp&& from) noexcept
    : ValueOp() {
    *this = ::std::move(from);
  }

  inline ValueOp& operator=(const ValueOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueOp& operator=(ValueOp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValueOp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValueOp* internal_default_instance() {
    return reinterpret_cast<const ValueOp*>(
               &_ValueOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ValueOp& a, ValueOp& b) {
    a.Swap(&b);
  }
  inline void Swap(ValueOp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValueOp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValueOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValueOp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValueOp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ValueOp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueOp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.crypto.ValueOp";
  }
  protected:
  explicit ValueOp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kProofFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .tendermint.crypto.Proof proof = 2;
  bool has_proof() const;
  private:
  bool _internal_has_proof() const;
  public:
  void clear_proof();
  const ::tendermint::crypto::Proof& proof() const;
  PROTOBUF_NODISCARD ::tendermint::crypto::Proof* release_proof();
  ::tendermint::crypto::Proof* mutable_proof();
  void set_allocated_proof(::tendermint::crypto::Proof* proof);
  private:
  const ::tendermint::crypto::Proof& _internal_proof() const;
  ::tendermint::crypto::Proof* _internal_mutable_proof();
  public:
  void unsafe_arena_set_allocated_proof(
      ::tendermint::crypto::Proof* proof);
  ::tendermint::crypto::Proof* unsafe_arena_release_proof();

  // @@protoc_insertion_point(class_scope:tendermint.crypto.ValueOp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::tendermint::crypto::Proof* proof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fcrypto_2fproof_2eproto;
};
// -------------------------------------------------------------------

class DominoOp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.crypto.DominoOp) */ {
 public:
  inline DominoOp() : DominoOp(nullptr) {}
  ~DominoOp() override;
  explicit constexpr DominoOp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DominoOp(const DominoOp& from);
  DominoOp(DominoOp&& from) noexcept
    : DominoOp() {
    *this = ::std::move(from);
  }

  inline DominoOp& operator=(const DominoOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DominoOp& operator=(DominoOp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DominoOp& default_instance() {
    return *internal_default_instance();
  }
  static inline const DominoOp* internal_default_instance() {
    return reinterpret_cast<const DominoOp*>(
               &_DominoOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DominoOp& a, DominoOp& b) {
    a.Swap(&b);
  }
  inline void Swap(DominoOp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DominoOp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DominoOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DominoOp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DominoOp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DominoOp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DominoOp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.crypto.DominoOp";
  }
  protected:
  explicit DominoOp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kInputFieldNumber = 2,
    kOutputFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string input = 2;
  void clear_input();
  const std::string& input() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input();
  PROTOBUF_NODISCARD std::string* release_input();
  void set_allocated_input(std::string* input);
  private:
  const std::string& _internal_input() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input(const std::string& value);
  std::string* _internal_mutable_input();
  public:

  // string output = 3;
  void clear_output();
  const std::string& output() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output();
  PROTOBUF_NODISCARD std::string* release_output();
  void set_allocated_output(std::string* output);
  private:
  const std::string& _internal_output() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output(const std::string& value);
  std::string* _internal_mutable_output();
  public:

  // @@protoc_insertion_point(class_scope:tendermint.crypto.DominoOp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fcrypto_2fproof_2eproto;
};
// -------------------------------------------------------------------

class ProofOp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.crypto.ProofOp) */ {
 public:
  inline ProofOp() : ProofOp(nullptr) {}
  ~ProofOp() override;
  explicit constexpr ProofOp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProofOp(const ProofOp& from);
  ProofOp(ProofOp&& from) noexcept
    : ProofOp() {
    *this = ::std::move(from);
  }

  inline ProofOp& operator=(const ProofOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProofOp& operator=(ProofOp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProofOp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProofOp* internal_default_instance() {
    return reinterpret_cast<const ProofOp*>(
               &_ProofOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProofOp& a, ProofOp& b) {
    a.Swap(&b);
  }
  inline void Swap(ProofOp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProofOp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProofOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProofOp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProofOp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProofOp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProofOp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.crypto.ProofOp";
  }
  protected:
  explicit ProofOp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kKeyFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:tendermint.crypto.ProofOp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fcrypto_2fproof_2eproto;
};
// -------------------------------------------------------------------

class ProofOps final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.crypto.ProofOps) */ {
 public:
  inline ProofOps() : ProofOps(nullptr) {}
  ~ProofOps() override;
  explicit constexpr ProofOps(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProofOps(const ProofOps& from);
  ProofOps(ProofOps&& from) noexcept
    : ProofOps() {
    *this = ::std::move(from);
  }

  inline ProofOps& operator=(const ProofOps& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProofOps& operator=(ProofOps&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProofOps& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProofOps* internal_default_instance() {
    return reinterpret_cast<const ProofOps*>(
               &_ProofOps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProofOps& a, ProofOps& b) {
    a.Swap(&b);
  }
  inline void Swap(ProofOps* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProofOps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProofOps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProofOps>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProofOps& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProofOps& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProofOps* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.crypto.ProofOps";
  }
  protected:
  explicit ProofOps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpsFieldNumber = 1,
  };
  // repeated .tendermint.crypto.ProofOp ops = 1 [(.gogoproto.nullable) = false];
  int ops_size() const;
  private:
  int _internal_ops_size() const;
  public:
  void clear_ops();
  ::tendermint::crypto::ProofOp* mutable_ops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::crypto::ProofOp >*
      mutable_ops();
  private:
  const ::tendermint::crypto::ProofOp& _internal_ops(int index) const;
  ::tendermint::crypto::ProofOp* _internal_add_ops();
  public:
  const ::tendermint::crypto::ProofOp& ops(int index) const;
  ::tendermint::crypto::ProofOp* add_ops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::crypto::ProofOp >&
      ops() const;

  // @@protoc_insertion_point(class_scope:tendermint.crypto.ProofOps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::crypto::ProofOp > ops_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fcrypto_2fproof_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Proof

// int64 total = 1;
inline void Proof::clear_total() {
  total_ = int64_t{0};
}
inline int64_t Proof::_internal_total() const {
  return total_;
}
inline int64_t Proof::total() const {
  // @@protoc_insertion_point(field_get:tendermint.crypto.Proof.total)
  return _internal_total();
}
inline void Proof::_internal_set_total(int64_t value) {
  
  total_ = value;
}
inline void Proof::set_total(int64_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:tendermint.crypto.Proof.total)
}

// int64 index = 2;
inline void Proof::clear_index() {
  index_ = int64_t{0};
}
inline int64_t Proof::_internal_index() const {
  return index_;
}
inline int64_t Proof::index() const {
  // @@protoc_insertion_point(field_get:tendermint.crypto.Proof.index)
  return _internal_index();
}
inline void Proof::_internal_set_index(int64_t value) {
  
  index_ = value;
}
inline void Proof::set_index(int64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:tendermint.crypto.Proof.index)
}

// bytes leaf_hash = 3;
inline void Proof::clear_leaf_hash() {
  leaf_hash_.ClearToEmpty();
}
inline const std::string& Proof::leaf_hash() const {
  // @@protoc_insertion_point(field_get:tendermint.crypto.Proof.leaf_hash)
  return _internal_leaf_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Proof::set_leaf_hash(ArgT0&& arg0, ArgT... args) {
 
 leaf_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.crypto.Proof.leaf_hash)
}
inline std::string* Proof::mutable_leaf_hash() {
  std::string* _s = _internal_mutable_leaf_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.Proof.leaf_hash)
  return _s;
}
inline const std::string& Proof::_internal_leaf_hash() const {
  return leaf_hash_.Get();
}
inline void Proof::_internal_set_leaf_hash(const std::string& value) {
  
  leaf_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Proof::_internal_mutable_leaf_hash() {
  
  return leaf_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Proof::release_leaf_hash() {
  // @@protoc_insertion_point(field_release:tendermint.crypto.Proof.leaf_hash)
  return leaf_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Proof::set_allocated_leaf_hash(std::string* leaf_hash) {
  if (leaf_hash != nullptr) {
    
  } else {
    
  }
  leaf_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaf_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (leaf_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    leaf_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.crypto.Proof.leaf_hash)
}

// repeated bytes aunts = 4;
inline int Proof::_internal_aunts_size() const {
  return aunts_.size();
}
inline int Proof::aunts_size() const {
  return _internal_aunts_size();
}
inline void Proof::clear_aunts() {
  aunts_.Clear();
}
inline std::string* Proof::add_aunts() {
  std::string* _s = _internal_add_aunts();
  // @@protoc_insertion_point(field_add_mutable:tendermint.crypto.Proof.aunts)
  return _s;
}
inline const std::string& Proof::_internal_aunts(int index) const {
  return aunts_.Get(index);
}
inline const std::string& Proof::aunts(int index) const {
  // @@protoc_insertion_point(field_get:tendermint.crypto.Proof.aunts)
  return _internal_aunts(index);
}
inline std::string* Proof::mutable_aunts(int index) {
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.Proof.aunts)
  return aunts_.Mutable(index);
}
inline void Proof::set_aunts(int index, const std::string& value) {
  aunts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tendermint.crypto.Proof.aunts)
}
inline void Proof::set_aunts(int index, std::string&& value) {
  aunts_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tendermint.crypto.Proof.aunts)
}
inline void Proof::set_aunts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aunts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tendermint.crypto.Proof.aunts)
}
inline void Proof::set_aunts(int index, const void* value, size_t size) {
  aunts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tendermint.crypto.Proof.aunts)
}
inline std::string* Proof::_internal_add_aunts() {
  return aunts_.Add();
}
inline void Proof::add_aunts(const std::string& value) {
  aunts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tendermint.crypto.Proof.aunts)
}
inline void Proof::add_aunts(std::string&& value) {
  aunts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tendermint.crypto.Proof.aunts)
}
inline void Proof::add_aunts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aunts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tendermint.crypto.Proof.aunts)
}
inline void Proof::add_aunts(const void* value, size_t size) {
  aunts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tendermint.crypto.Proof.aunts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Proof::aunts() const {
  // @@protoc_insertion_point(field_list:tendermint.crypto.Proof.aunts)
  return aunts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Proof::mutable_aunts() {
  // @@protoc_insertion_point(field_mutable_list:tendermint.crypto.Proof.aunts)
  return &aunts_;
}

// -------------------------------------------------------------------

// ValueOp

// bytes key = 1;
inline void ValueOp::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& ValueOp::key() const {
  // @@protoc_insertion_point(field_get:tendermint.crypto.ValueOp.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ValueOp::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.crypto.ValueOp.key)
}
inline std::string* ValueOp::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.ValueOp.key)
  return _s;
}
inline const std::string& ValueOp::_internal_key() const {
  return key_.Get();
}
inline void ValueOp::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ValueOp::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ValueOp::release_key() {
  // @@protoc_insertion_point(field_release:tendermint.crypto.ValueOp.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ValueOp::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.crypto.ValueOp.key)
}

// .tendermint.crypto.Proof proof = 2;
inline bool ValueOp::_internal_has_proof() const {
  return this != internal_default_instance() && proof_ != nullptr;
}
inline bool ValueOp::has_proof() const {
  return _internal_has_proof();
}
inline void ValueOp::clear_proof() {
  if (GetArenaForAllocation() == nullptr && proof_ != nullptr) {
    delete proof_;
  }
  proof_ = nullptr;
}
inline const ::tendermint::crypto::Proof& ValueOp::_internal_proof() const {
  const ::tendermint::crypto::Proof* p = proof_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::crypto::Proof&>(
      ::tendermint::crypto::_Proof_default_instance_);
}
inline const ::tendermint::crypto::Proof& ValueOp::proof() const {
  // @@protoc_insertion_point(field_get:tendermint.crypto.ValueOp.proof)
  return _internal_proof();
}
inline void ValueOp::unsafe_arena_set_allocated_proof(
    ::tendermint::crypto::Proof* proof) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_);
  }
  proof_ = proof;
  if (proof) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.crypto.ValueOp.proof)
}
inline ::tendermint::crypto::Proof* ValueOp::release_proof() {
  
  ::tendermint::crypto::Proof* temp = proof_;
  proof_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::crypto::Proof* ValueOp::unsafe_arena_release_proof() {
  // @@protoc_insertion_point(field_release:tendermint.crypto.ValueOp.proof)
  
  ::tendermint::crypto::Proof* temp = proof_;
  proof_ = nullptr;
  return temp;
}
inline ::tendermint::crypto::Proof* ValueOp::_internal_mutable_proof() {
  
  if (proof_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::crypto::Proof>(GetArenaForAllocation());
    proof_ = p;
  }
  return proof_;
}
inline ::tendermint::crypto::Proof* ValueOp::mutable_proof() {
  ::tendermint::crypto::Proof* _msg = _internal_mutable_proof();
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.ValueOp.proof)
  return _msg;
}
inline void ValueOp::set_allocated_proof(::tendermint::crypto::Proof* proof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete proof_;
  }
  if (proof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::crypto::Proof>::GetOwningArena(proof);
    if (message_arena != submessage_arena) {
      proof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof, submessage_arena);
    }
    
  } else {
    
  }
  proof_ = proof;
  // @@protoc_insertion_point(field_set_allocated:tendermint.crypto.ValueOp.proof)
}

// -------------------------------------------------------------------

// DominoOp

// string key = 1;
inline void DominoOp::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& DominoOp::key() const {
  // @@protoc_insertion_point(field_get:tendermint.crypto.DominoOp.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DominoOp::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.crypto.DominoOp.key)
}
inline std::string* DominoOp::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.DominoOp.key)
  return _s;
}
inline const std::string& DominoOp::_internal_key() const {
  return key_.Get();
}
inline void DominoOp::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DominoOp::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DominoOp::release_key() {
  // @@protoc_insertion_point(field_release:tendermint.crypto.DominoOp.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DominoOp::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.crypto.DominoOp.key)
}

// string input = 2;
inline void DominoOp::clear_input() {
  input_.ClearToEmpty();
}
inline const std::string& DominoOp::input() const {
  // @@protoc_insertion_point(field_get:tendermint.crypto.DominoOp.input)
  return _internal_input();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DominoOp::set_input(ArgT0&& arg0, ArgT... args) {
 
 input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.crypto.DominoOp.input)
}
inline std::string* DominoOp::mutable_input() {
  std::string* _s = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.DominoOp.input)
  return _s;
}
inline const std::string& DominoOp::_internal_input() const {
  return input_.Get();
}
inline void DominoOp::_internal_set_input(const std::string& value) {
  
  input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DominoOp::_internal_mutable_input() {
  
  return input_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DominoOp::release_input() {
  // @@protoc_insertion_point(field_release:tendermint.crypto.DominoOp.input)
  return input_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DominoOp::set_allocated_input(std::string* input) {
  if (input != nullptr) {
    
  } else {
    
  }
  input_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (input_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    input_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.crypto.DominoOp.input)
}

// string output = 3;
inline void DominoOp::clear_output() {
  output_.ClearToEmpty();
}
inline const std::string& DominoOp::output() const {
  // @@protoc_insertion_point(field_get:tendermint.crypto.DominoOp.output)
  return _internal_output();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DominoOp::set_output(ArgT0&& arg0, ArgT... args) {
 
 output_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.crypto.DominoOp.output)
}
inline std::string* DominoOp::mutable_output() {
  std::string* _s = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.DominoOp.output)
  return _s;
}
inline const std::string& DominoOp::_internal_output() const {
  return output_.Get();
}
inline void DominoOp::_internal_set_output(const std::string& value) {
  
  output_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DominoOp::_internal_mutable_output() {
  
  return output_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DominoOp::release_output() {
  // @@protoc_insertion_point(field_release:tendermint.crypto.DominoOp.output)
  return output_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DominoOp::set_allocated_output(std::string* output) {
  if (output != nullptr) {
    
  } else {
    
  }
  output_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (output_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    output_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.crypto.DominoOp.output)
}

// -------------------------------------------------------------------

// ProofOp

// string type = 1;
inline void ProofOp::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& ProofOp::type() const {
  // @@protoc_insertion_point(field_get:tendermint.crypto.ProofOp.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProofOp::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.crypto.ProofOp.type)
}
inline std::string* ProofOp::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.ProofOp.type)
  return _s;
}
inline const std::string& ProofOp::_internal_type() const {
  return type_.Get();
}
inline void ProofOp::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProofOp::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProofOp::release_type() {
  // @@protoc_insertion_point(field_release:tendermint.crypto.ProofOp.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProofOp::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.crypto.ProofOp.type)
}

// bytes key = 2;
inline void ProofOp::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& ProofOp::key() const {
  // @@protoc_insertion_point(field_get:tendermint.crypto.ProofOp.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProofOp::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.crypto.ProofOp.key)
}
inline std::string* ProofOp::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.ProofOp.key)
  return _s;
}
inline const std::string& ProofOp::_internal_key() const {
  return key_.Get();
}
inline void ProofOp::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProofOp::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProofOp::release_key() {
  // @@protoc_insertion_point(field_release:tendermint.crypto.ProofOp.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProofOp::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.crypto.ProofOp.key)
}

// bytes data = 3;
inline void ProofOp::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ProofOp::data() const {
  // @@protoc_insertion_point(field_get:tendermint.crypto.ProofOp.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProofOp::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.crypto.ProofOp.data)
}
inline std::string* ProofOp::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.ProofOp.data)
  return _s;
}
inline const std::string& ProofOp::_internal_data() const {
  return data_.Get();
}
inline void ProofOp::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProofOp::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProofOp::release_data() {
  // @@protoc_insertion_point(field_release:tendermint.crypto.ProofOp.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProofOp::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.crypto.ProofOp.data)
}

// -------------------------------------------------------------------

// ProofOps

// repeated .tendermint.crypto.ProofOp ops = 1 [(.gogoproto.nullable) = false];
inline int ProofOps::_internal_ops_size() const {
  return ops_.size();
}
inline int ProofOps::ops_size() const {
  return _internal_ops_size();
}
inline void ProofOps::clear_ops() {
  ops_.Clear();
}
inline ::tendermint::crypto::ProofOp* ProofOps::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.ProofOps.ops)
  return ops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::crypto::ProofOp >*
ProofOps::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:tendermint.crypto.ProofOps.ops)
  return &ops_;
}
inline const ::tendermint::crypto::ProofOp& ProofOps::_internal_ops(int index) const {
  return ops_.Get(index);
}
inline const ::tendermint::crypto::ProofOp& ProofOps::ops(int index) const {
  // @@protoc_insertion_point(field_get:tendermint.crypto.ProofOps.ops)
  return _internal_ops(index);
}
inline ::tendermint::crypto::ProofOp* ProofOps::_internal_add_ops() {
  return ops_.Add();
}
inline ::tendermint::crypto::ProofOp* ProofOps::add_ops() {
  ::tendermint::crypto::ProofOp* _add = _internal_add_ops();
  // @@protoc_insertion_point(field_add:tendermint.crypto.ProofOps.ops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::crypto::ProofOp >&
ProofOps::ops() const {
  // @@protoc_insertion_point(field_list:tendermint.crypto.ProofOps.ops)
  return ops_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace crypto
}  // namespace tendermint

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tendermint_2fcrypto_2fproof_2eproto
