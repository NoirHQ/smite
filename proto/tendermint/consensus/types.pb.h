// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/consensus/types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tendermint_2fconsensus_2ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tendermint_2fconsensus_2ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include "tendermint/types/types.pb.h"
#include "tendermint/libs/bits/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tendermint_2fconsensus_2ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2fconsensus_2ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2fconsensus_2ftypes_2eproto;
namespace tendermint {
namespace consensus {
class BlockPart;
struct BlockPartDefaultTypeInternal;
extern BlockPartDefaultTypeInternal _BlockPart_default_instance_;
class HasVote;
struct HasVoteDefaultTypeInternal;
extern HasVoteDefaultTypeInternal _HasVote_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class NewRoundStep;
struct NewRoundStepDefaultTypeInternal;
extern NewRoundStepDefaultTypeInternal _NewRoundStep_default_instance_;
class NewValidBlock;
struct NewValidBlockDefaultTypeInternal;
extern NewValidBlockDefaultTypeInternal _NewValidBlock_default_instance_;
class Proposal;
struct ProposalDefaultTypeInternal;
extern ProposalDefaultTypeInternal _Proposal_default_instance_;
class ProposalPOL;
struct ProposalPOLDefaultTypeInternal;
extern ProposalPOLDefaultTypeInternal _ProposalPOL_default_instance_;
class Vote;
struct VoteDefaultTypeInternal;
extern VoteDefaultTypeInternal _Vote_default_instance_;
class VoteSetBits;
struct VoteSetBitsDefaultTypeInternal;
extern VoteSetBitsDefaultTypeInternal _VoteSetBits_default_instance_;
class VoteSetMaj23;
struct VoteSetMaj23DefaultTypeInternal;
extern VoteSetMaj23DefaultTypeInternal _VoteSetMaj23_default_instance_;
}  // namespace consensus
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> ::tendermint::consensus::BlockPart* Arena::CreateMaybeMessage<::tendermint::consensus::BlockPart>(Arena*);
template<> ::tendermint::consensus::HasVote* Arena::CreateMaybeMessage<::tendermint::consensus::HasVote>(Arena*);
template<> ::tendermint::consensus::Message* Arena::CreateMaybeMessage<::tendermint::consensus::Message>(Arena*);
template<> ::tendermint::consensus::NewRoundStep* Arena::CreateMaybeMessage<::tendermint::consensus::NewRoundStep>(Arena*);
template<> ::tendermint::consensus::NewValidBlock* Arena::CreateMaybeMessage<::tendermint::consensus::NewValidBlock>(Arena*);
template<> ::tendermint::consensus::Proposal* Arena::CreateMaybeMessage<::tendermint::consensus::Proposal>(Arena*);
template<> ::tendermint::consensus::ProposalPOL* Arena::CreateMaybeMessage<::tendermint::consensus::ProposalPOL>(Arena*);
template<> ::tendermint::consensus::Vote* Arena::CreateMaybeMessage<::tendermint::consensus::Vote>(Arena*);
template<> ::tendermint::consensus::VoteSetBits* Arena::CreateMaybeMessage<::tendermint::consensus::VoteSetBits>(Arena*);
template<> ::tendermint::consensus::VoteSetMaj23* Arena::CreateMaybeMessage<::tendermint::consensus::VoteSetMaj23>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tendermint {
namespace consensus {

// ===================================================================

class NewRoundStep final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.consensus.NewRoundStep) */ {
 public:
  inline NewRoundStep() : NewRoundStep(nullptr) {}
  ~NewRoundStep() override;
  explicit constexpr NewRoundStep(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewRoundStep(const NewRoundStep& from);
  NewRoundStep(NewRoundStep&& from) noexcept
    : NewRoundStep() {
    *this = ::std::move(from);
  }

  inline NewRoundStep& operator=(const NewRoundStep& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewRoundStep& operator=(NewRoundStep&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewRoundStep& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewRoundStep* internal_default_instance() {
    return reinterpret_cast<const NewRoundStep*>(
               &_NewRoundStep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NewRoundStep& a, NewRoundStep& b) {
    a.Swap(&b);
  }
  inline void Swap(NewRoundStep* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewRoundStep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewRoundStep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewRoundStep>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewRoundStep& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NewRoundStep& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewRoundStep* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.consensus.NewRoundStep";
  }
  protected:
  explicit NewRoundStep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kRoundFieldNumber = 2,
    kStepFieldNumber = 3,
    kSecondsSinceStartTimeFieldNumber = 4,
    kLastCommitRoundFieldNumber = 5,
  };
  // int64 height = 1;
  void clear_height();
  int64_t height() const;
  void set_height(int64_t value);
  private:
  int64_t _internal_height() const;
  void _internal_set_height(int64_t value);
  public:

  // int32 round = 2;
  void clear_round();
  int32_t round() const;
  void set_round(int32_t value);
  private:
  int32_t _internal_round() const;
  void _internal_set_round(int32_t value);
  public:

  // uint32 step = 3;
  void clear_step();
  uint32_t step() const;
  void set_step(uint32_t value);
  private:
  uint32_t _internal_step() const;
  void _internal_set_step(uint32_t value);
  public:

  // int64 seconds_since_start_time = 4;
  void clear_seconds_since_start_time();
  int64_t seconds_since_start_time() const;
  void set_seconds_since_start_time(int64_t value);
  private:
  int64_t _internal_seconds_since_start_time() const;
  void _internal_set_seconds_since_start_time(int64_t value);
  public:

  // int32 last_commit_round = 5;
  void clear_last_commit_round();
  int32_t last_commit_round() const;
  void set_last_commit_round(int32_t value);
  private:
  int32_t _internal_last_commit_round() const;
  void _internal_set_last_commit_round(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.consensus.NewRoundStep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t height_;
  int32_t round_;
  uint32_t step_;
  int64_t seconds_since_start_time_;
  int32_t last_commit_round_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fconsensus_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class NewValidBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.consensus.NewValidBlock) */ {
 public:
  inline NewValidBlock() : NewValidBlock(nullptr) {}
  ~NewValidBlock() override;
  explicit constexpr NewValidBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewValidBlock(const NewValidBlock& from);
  NewValidBlock(NewValidBlock&& from) noexcept
    : NewValidBlock() {
    *this = ::std::move(from);
  }

  inline NewValidBlock& operator=(const NewValidBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewValidBlock& operator=(NewValidBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewValidBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewValidBlock* internal_default_instance() {
    return reinterpret_cast<const NewValidBlock*>(
               &_NewValidBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NewValidBlock& a, NewValidBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(NewValidBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewValidBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewValidBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewValidBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewValidBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NewValidBlock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewValidBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.consensus.NewValidBlock";
  }
  protected:
  explicit NewValidBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockPartSetHeaderFieldNumber = 3,
    kBlockPartsFieldNumber = 4,
    kHeightFieldNumber = 1,
    kRoundFieldNumber = 2,
    kIsCommitFieldNumber = 5,
  };
  // .tendermint.types.PartSetHeader block_part_set_header = 3 [(.gogoproto.nullable) = false];
  bool has_block_part_set_header() const;
  private:
  bool _internal_has_block_part_set_header() const;
  public:
  void clear_block_part_set_header();
  const ::tendermint::types::PartSetHeader& block_part_set_header() const;
  PROTOBUF_NODISCARD ::tendermint::types::PartSetHeader* release_block_part_set_header();
  ::tendermint::types::PartSetHeader* mutable_block_part_set_header();
  void set_allocated_block_part_set_header(::tendermint::types::PartSetHeader* block_part_set_header);
  private:
  const ::tendermint::types::PartSetHeader& _internal_block_part_set_header() const;
  ::tendermint::types::PartSetHeader* _internal_mutable_block_part_set_header();
  public:
  void unsafe_arena_set_allocated_block_part_set_header(
      ::tendermint::types::PartSetHeader* block_part_set_header);
  ::tendermint::types::PartSetHeader* unsafe_arena_release_block_part_set_header();

  // .tendermint.libs.bits.BitArray block_parts = 4;
  bool has_block_parts() const;
  private:
  bool _internal_has_block_parts() const;
  public:
  void clear_block_parts();
  const ::tendermint::libs::bits::BitArray& block_parts() const;
  PROTOBUF_NODISCARD ::tendermint::libs::bits::BitArray* release_block_parts();
  ::tendermint::libs::bits::BitArray* mutable_block_parts();
  void set_allocated_block_parts(::tendermint::libs::bits::BitArray* block_parts);
  private:
  const ::tendermint::libs::bits::BitArray& _internal_block_parts() const;
  ::tendermint::libs::bits::BitArray* _internal_mutable_block_parts();
  public:
  void unsafe_arena_set_allocated_block_parts(
      ::tendermint::libs::bits::BitArray* block_parts);
  ::tendermint::libs::bits::BitArray* unsafe_arena_release_block_parts();

  // int64 height = 1;
  void clear_height();
  int64_t height() const;
  void set_height(int64_t value);
  private:
  int64_t _internal_height() const;
  void _internal_set_height(int64_t value);
  public:

  // int32 round = 2;
  void clear_round();
  int32_t round() const;
  void set_round(int32_t value);
  private:
  int32_t _internal_round() const;
  void _internal_set_round(int32_t value);
  public:

  // bool is_commit = 5;
  void clear_is_commit();
  bool is_commit() const;
  void set_is_commit(bool value);
  private:
  bool _internal_is_commit() const;
  void _internal_set_is_commit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.consensus.NewValidBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tendermint::types::PartSetHeader* block_part_set_header_;
  ::tendermint::libs::bits::BitArray* block_parts_;
  int64_t height_;
  int32_t round_;
  bool is_commit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fconsensus_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Proposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.consensus.Proposal) */ {
 public:
  inline Proposal() : Proposal(nullptr) {}
  ~Proposal() override;
  explicit constexpr Proposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Proposal(const Proposal& from);
  Proposal(Proposal&& from) noexcept
    : Proposal() {
    *this = ::std::move(from);
  }

  inline Proposal& operator=(const Proposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proposal& operator=(Proposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Proposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Proposal* internal_default_instance() {
    return reinterpret_cast<const Proposal*>(
               &_Proposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Proposal& a, Proposal& b) {
    a.Swap(&b);
  }
  inline void Swap(Proposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proposal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Proposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Proposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Proposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Proposal& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.consensus.Proposal";
  }
  protected:
  explicit Proposal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalFieldNumber = 1,
  };
  // .tendermint.types.Proposal proposal = 1 [(.gogoproto.nullable) = false];
  bool has_proposal() const;
  private:
  bool _internal_has_proposal() const;
  public:
  void clear_proposal();
  const ::tendermint::types::Proposal& proposal() const;
  PROTOBUF_NODISCARD ::tendermint::types::Proposal* release_proposal();
  ::tendermint::types::Proposal* mutable_proposal();
  void set_allocated_proposal(::tendermint::types::Proposal* proposal);
  private:
  const ::tendermint::types::Proposal& _internal_proposal() const;
  ::tendermint::types::Proposal* _internal_mutable_proposal();
  public:
  void unsafe_arena_set_allocated_proposal(
      ::tendermint::types::Proposal* proposal);
  ::tendermint::types::Proposal* unsafe_arena_release_proposal();

  // @@protoc_insertion_point(class_scope:tendermint.consensus.Proposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tendermint::types::Proposal* proposal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fconsensus_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ProposalPOL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.consensus.ProposalPOL) */ {
 public:
  inline ProposalPOL() : ProposalPOL(nullptr) {}
  ~ProposalPOL() override;
  explicit constexpr ProposalPOL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProposalPOL(const ProposalPOL& from);
  ProposalPOL(ProposalPOL&& from) noexcept
    : ProposalPOL() {
    *this = ::std::move(from);
  }

  inline ProposalPOL& operator=(const ProposalPOL& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalPOL& operator=(ProposalPOL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProposalPOL& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposalPOL* internal_default_instance() {
    return reinterpret_cast<const ProposalPOL*>(
               &_ProposalPOL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProposalPOL& a, ProposalPOL& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalPOL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalPOL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProposalPOL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProposalPOL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProposalPOL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProposalPOL& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalPOL* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.consensus.ProposalPOL";
  }
  protected:
  explicit ProposalPOL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalPolFieldNumber = 3,
    kHeightFieldNumber = 1,
    kProposalPolRoundFieldNumber = 2,
  };
  // .tendermint.libs.bits.BitArray proposal_pol = 3 [(.gogoproto.nullable) = false];
  bool has_proposal_pol() const;
  private:
  bool _internal_has_proposal_pol() const;
  public:
  void clear_proposal_pol();
  const ::tendermint::libs::bits::BitArray& proposal_pol() const;
  PROTOBUF_NODISCARD ::tendermint::libs::bits::BitArray* release_proposal_pol();
  ::tendermint::libs::bits::BitArray* mutable_proposal_pol();
  void set_allocated_proposal_pol(::tendermint::libs::bits::BitArray* proposal_pol);
  private:
  const ::tendermint::libs::bits::BitArray& _internal_proposal_pol() const;
  ::tendermint::libs::bits::BitArray* _internal_mutable_proposal_pol();
  public:
  void unsafe_arena_set_allocated_proposal_pol(
      ::tendermint::libs::bits::BitArray* proposal_pol);
  ::tendermint::libs::bits::BitArray* unsafe_arena_release_proposal_pol();

  // int64 height = 1;
  void clear_height();
  int64_t height() const;
  void set_height(int64_t value);
  private:
  int64_t _internal_height() const;
  void _internal_set_height(int64_t value);
  public:

  // int32 proposal_pol_round = 2;
  void clear_proposal_pol_round();
  int32_t proposal_pol_round() const;
  void set_proposal_pol_round(int32_t value);
  private:
  int32_t _internal_proposal_pol_round() const;
  void _internal_set_proposal_pol_round(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.consensus.ProposalPOL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tendermint::libs::bits::BitArray* proposal_pol_;
  int64_t height_;
  int32_t proposal_pol_round_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fconsensus_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class BlockPart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.consensus.BlockPart) */ {
 public:
  inline BlockPart() : BlockPart(nullptr) {}
  ~BlockPart() override;
  explicit constexpr BlockPart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockPart(const BlockPart& from);
  BlockPart(BlockPart&& from) noexcept
    : BlockPart() {
    *this = ::std::move(from);
  }

  inline BlockPart& operator=(const BlockPart& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockPart& operator=(BlockPart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockPart& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockPart* internal_default_instance() {
    return reinterpret_cast<const BlockPart*>(
               &_BlockPart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BlockPart& a, BlockPart& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockPart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockPart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockPart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockPart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockPart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockPart& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockPart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.consensus.BlockPart";
  }
  protected:
  explicit BlockPart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartFieldNumber = 3,
    kHeightFieldNumber = 1,
    kRoundFieldNumber = 2,
  };
  // .tendermint.types.Part part = 3 [(.gogoproto.nullable) = false];
  bool has_part() const;
  private:
  bool _internal_has_part() const;
  public:
  void clear_part();
  const ::tendermint::types::Part& part() const;
  PROTOBUF_NODISCARD ::tendermint::types::Part* release_part();
  ::tendermint::types::Part* mutable_part();
  void set_allocated_part(::tendermint::types::Part* part);
  private:
  const ::tendermint::types::Part& _internal_part() const;
  ::tendermint::types::Part* _internal_mutable_part();
  public:
  void unsafe_arena_set_allocated_part(
      ::tendermint::types::Part* part);
  ::tendermint::types::Part* unsafe_arena_release_part();

  // int64 height = 1;
  void clear_height();
  int64_t height() const;
  void set_height(int64_t value);
  private:
  int64_t _internal_height() const;
  void _internal_set_height(int64_t value);
  public:

  // int32 round = 2;
  void clear_round();
  int32_t round() const;
  void set_round(int32_t value);
  private:
  int32_t _internal_round() const;
  void _internal_set_round(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.consensus.BlockPart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tendermint::types::Part* part_;
  int64_t height_;
  int32_t round_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fconsensus_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Vote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.consensus.Vote) */ {
 public:
  inline Vote() : Vote(nullptr) {}
  ~Vote() override;
  explicit constexpr Vote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vote(const Vote& from);
  Vote(Vote&& from) noexcept
    : Vote() {
    *this = ::std::move(from);
  }

  inline Vote& operator=(const Vote& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vote& operator=(Vote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vote& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vote* internal_default_instance() {
    return reinterpret_cast<const Vote*>(
               &_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Vote& a, Vote& b) {
    a.Swap(&b);
  }
  inline void Swap(Vote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vote& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.consensus.Vote";
  }
  protected:
  explicit Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoteFieldNumber = 1,
  };
  // .tendermint.types.Vote vote = 1;
  bool has_vote() const;
  private:
  bool _internal_has_vote() const;
  public:
  void clear_vote();
  const ::tendermint::types::Vote& vote() const;
  PROTOBUF_NODISCARD ::tendermint::types::Vote* release_vote();
  ::tendermint::types::Vote* mutable_vote();
  void set_allocated_vote(::tendermint::types::Vote* vote);
  private:
  const ::tendermint::types::Vote& _internal_vote() const;
  ::tendermint::types::Vote* _internal_mutable_vote();
  public:
  void unsafe_arena_set_allocated_vote(
      ::tendermint::types::Vote* vote);
  ::tendermint::types::Vote* unsafe_arena_release_vote();

  // @@protoc_insertion_point(class_scope:tendermint.consensus.Vote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tendermint::types::Vote* vote_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fconsensus_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class HasVote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.consensus.HasVote) */ {
 public:
  inline HasVote() : HasVote(nullptr) {}
  ~HasVote() override;
  explicit constexpr HasVote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HasVote(const HasVote& from);
  HasVote(HasVote&& from) noexcept
    : HasVote() {
    *this = ::std::move(from);
  }

  inline HasVote& operator=(const HasVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline HasVote& operator=(HasVote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HasVote& default_instance() {
    return *internal_default_instance();
  }
  static inline const HasVote* internal_default_instance() {
    return reinterpret_cast<const HasVote*>(
               &_HasVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HasVote& a, HasVote& b) {
    a.Swap(&b);
  }
  inline void Swap(HasVote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HasVote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HasVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HasVote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HasVote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HasVote& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HasVote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.consensus.HasVote";
  }
  protected:
  explicit HasVote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kRoundFieldNumber = 2,
    kTypeFieldNumber = 3,
    kIndexFieldNumber = 4,
  };
  // int64 height = 1;
  void clear_height();
  int64_t height() const;
  void set_height(int64_t value);
  private:
  int64_t _internal_height() const;
  void _internal_set_height(int64_t value);
  public:

  // int32 round = 2;
  void clear_round();
  int32_t round() const;
  void set_round(int32_t value);
  private:
  int32_t _internal_round() const;
  void _internal_set_round(int32_t value);
  public:

  // .tendermint.types.SignedMsgType type = 3;
  void clear_type();
  ::tendermint::types::SignedMsgType type() const;
  void set_type(::tendermint::types::SignedMsgType value);
  private:
  ::tendermint::types::SignedMsgType _internal_type() const;
  void _internal_set_type(::tendermint::types::SignedMsgType value);
  public:

  // int32 index = 4;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.consensus.HasVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t height_;
  int32_t round_;
  int type_;
  int32_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fconsensus_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class VoteSetMaj23 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.consensus.VoteSetMaj23) */ {
 public:
  inline VoteSetMaj23() : VoteSetMaj23(nullptr) {}
  ~VoteSetMaj23() override;
  explicit constexpr VoteSetMaj23(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoteSetMaj23(const VoteSetMaj23& from);
  VoteSetMaj23(VoteSetMaj23&& from) noexcept
    : VoteSetMaj23() {
    *this = ::std::move(from);
  }

  inline VoteSetMaj23& operator=(const VoteSetMaj23& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoteSetMaj23& operator=(VoteSetMaj23&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoteSetMaj23& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoteSetMaj23* internal_default_instance() {
    return reinterpret_cast<const VoteSetMaj23*>(
               &_VoteSetMaj23_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(VoteSetMaj23& a, VoteSetMaj23& b) {
    a.Swap(&b);
  }
  inline void Swap(VoteSetMaj23* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoteSetMaj23* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoteSetMaj23* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VoteSetMaj23>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VoteSetMaj23& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VoteSetMaj23& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoteSetMaj23* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.consensus.VoteSetMaj23";
  }
  protected:
  explicit VoteSetMaj23(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIdFieldNumber = 4,
    kHeightFieldNumber = 1,
    kRoundFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // .tendermint.types.BlockID block_id = 4 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  bool has_block_id() const;
  private:
  bool _internal_has_block_id() const;
  public:
  void clear_block_id();
  const ::tendermint::types::BlockID& block_id() const;
  PROTOBUF_NODISCARD ::tendermint::types::BlockID* release_block_id();
  ::tendermint::types::BlockID* mutable_block_id();
  void set_allocated_block_id(::tendermint::types::BlockID* block_id);
  private:
  const ::tendermint::types::BlockID& _internal_block_id() const;
  ::tendermint::types::BlockID* _internal_mutable_block_id();
  public:
  void unsafe_arena_set_allocated_block_id(
      ::tendermint::types::BlockID* block_id);
  ::tendermint::types::BlockID* unsafe_arena_release_block_id();

  // int64 height = 1;
  void clear_height();
  int64_t height() const;
  void set_height(int64_t value);
  private:
  int64_t _internal_height() const;
  void _internal_set_height(int64_t value);
  public:

  // int32 round = 2;
  void clear_round();
  int32_t round() const;
  void set_round(int32_t value);
  private:
  int32_t _internal_round() const;
  void _internal_set_round(int32_t value);
  public:

  // .tendermint.types.SignedMsgType type = 3;
  void clear_type();
  ::tendermint::types::SignedMsgType type() const;
  void set_type(::tendermint::types::SignedMsgType value);
  private:
  ::tendermint::types::SignedMsgType _internal_type() const;
  void _internal_set_type(::tendermint::types::SignedMsgType value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.consensus.VoteSetMaj23)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tendermint::types::BlockID* block_id_;
  int64_t height_;
  int32_t round_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fconsensus_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class VoteSetBits final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.consensus.VoteSetBits) */ {
 public:
  inline VoteSetBits() : VoteSetBits(nullptr) {}
  ~VoteSetBits() override;
  explicit constexpr VoteSetBits(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoteSetBits(const VoteSetBits& from);
  VoteSetBits(VoteSetBits&& from) noexcept
    : VoteSetBits() {
    *this = ::std::move(from);
  }

  inline VoteSetBits& operator=(const VoteSetBits& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoteSetBits& operator=(VoteSetBits&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoteSetBits& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoteSetBits* internal_default_instance() {
    return reinterpret_cast<const VoteSetBits*>(
               &_VoteSetBits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VoteSetBits& a, VoteSetBits& b) {
    a.Swap(&b);
  }
  inline void Swap(VoteSetBits* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoteSetBits* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoteSetBits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VoteSetBits>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VoteSetBits& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VoteSetBits& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoteSetBits* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.consensus.VoteSetBits";
  }
  protected:
  explicit VoteSetBits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIdFieldNumber = 4,
    kVotesFieldNumber = 5,
    kHeightFieldNumber = 1,
    kRoundFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // .tendermint.types.BlockID block_id = 4 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  bool has_block_id() const;
  private:
  bool _internal_has_block_id() const;
  public:
  void clear_block_id();
  const ::tendermint::types::BlockID& block_id() const;
  PROTOBUF_NODISCARD ::tendermint::types::BlockID* release_block_id();
  ::tendermint::types::BlockID* mutable_block_id();
  void set_allocated_block_id(::tendermint::types::BlockID* block_id);
  private:
  const ::tendermint::types::BlockID& _internal_block_id() const;
  ::tendermint::types::BlockID* _internal_mutable_block_id();
  public:
  void unsafe_arena_set_allocated_block_id(
      ::tendermint::types::BlockID* block_id);
  ::tendermint::types::BlockID* unsafe_arena_release_block_id();

  // .tendermint.libs.bits.BitArray votes = 5 [(.gogoproto.nullable) = false];
  bool has_votes() const;
  private:
  bool _internal_has_votes() const;
  public:
  void clear_votes();
  const ::tendermint::libs::bits::BitArray& votes() const;
  PROTOBUF_NODISCARD ::tendermint::libs::bits::BitArray* release_votes();
  ::tendermint::libs::bits::BitArray* mutable_votes();
  void set_allocated_votes(::tendermint::libs::bits::BitArray* votes);
  private:
  const ::tendermint::libs::bits::BitArray& _internal_votes() const;
  ::tendermint::libs::bits::BitArray* _internal_mutable_votes();
  public:
  void unsafe_arena_set_allocated_votes(
      ::tendermint::libs::bits::BitArray* votes);
  ::tendermint::libs::bits::BitArray* unsafe_arena_release_votes();

  // int64 height = 1;
  void clear_height();
  int64_t height() const;
  void set_height(int64_t value);
  private:
  int64_t _internal_height() const;
  void _internal_set_height(int64_t value);
  public:

  // int32 round = 2;
  void clear_round();
  int32_t round() const;
  void set_round(int32_t value);
  private:
  int32_t _internal_round() const;
  void _internal_set_round(int32_t value);
  public:

  // .tendermint.types.SignedMsgType type = 3;
  void clear_type();
  ::tendermint::types::SignedMsgType type() const;
  void set_type(::tendermint::types::SignedMsgType value);
  private:
  ::tendermint::types::SignedMsgType _internal_type() const;
  void _internal_set_type(::tendermint::types::SignedMsgType value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.consensus.VoteSetBits)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tendermint::types::BlockID* block_id_;
  ::tendermint::libs::bits::BitArray* votes_;
  int64_t height_;
  int32_t round_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2fconsensus_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.consensus.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit constexpr Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  enum SumCase {
    kNewRoundStep = 1,
    kNewValidBlock = 2,
    kProposal = 3,
    kProposalPol = 4,
    kBlockPart = 5,
    kVote = 6,
    kHasVote = 7,
    kVoteSetMaj23 = 8,
    kVoteSetBits = 9,
    SUM_NOT_SET = 0,
  };

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.consensus.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewRoundStepFieldNumber = 1,
    kNewValidBlockFieldNumber = 2,
    kProposalFieldNumber = 3,
    kProposalPolFieldNumber = 4,
    kBlockPartFieldNumber = 5,
    kVoteFieldNumber = 6,
    kHasVoteFieldNumber = 7,
    kVoteSetMaj23FieldNumber = 8,
    kVoteSetBitsFieldNumber = 9,
  };
  // .tendermint.consensus.NewRoundStep new_round_step = 1;
  bool has_new_round_step() const;
  private:
  bool _internal_has_new_round_step() const;
  public:
  void clear_new_round_step();
  const ::tendermint::consensus::NewRoundStep& new_round_step() const;
  PROTOBUF_NODISCARD ::tendermint::consensus::NewRoundStep* release_new_round_step();
  ::tendermint::consensus::NewRoundStep* mutable_new_round_step();
  void set_allocated_new_round_step(::tendermint::consensus::NewRoundStep* new_round_step);
  private:
  const ::tendermint::consensus::NewRoundStep& _internal_new_round_step() const;
  ::tendermint::consensus::NewRoundStep* _internal_mutable_new_round_step();
  public:
  void unsafe_arena_set_allocated_new_round_step(
      ::tendermint::consensus::NewRoundStep* new_round_step);
  ::tendermint::consensus::NewRoundStep* unsafe_arena_release_new_round_step();

  // .tendermint.consensus.NewValidBlock new_valid_block = 2;
  bool has_new_valid_block() const;
  private:
  bool _internal_has_new_valid_block() const;
  public:
  void clear_new_valid_block();
  const ::tendermint::consensus::NewValidBlock& new_valid_block() const;
  PROTOBUF_NODISCARD ::tendermint::consensus::NewValidBlock* release_new_valid_block();
  ::tendermint::consensus::NewValidBlock* mutable_new_valid_block();
  void set_allocated_new_valid_block(::tendermint::consensus::NewValidBlock* new_valid_block);
  private:
  const ::tendermint::consensus::NewValidBlock& _internal_new_valid_block() const;
  ::tendermint::consensus::NewValidBlock* _internal_mutable_new_valid_block();
  public:
  void unsafe_arena_set_allocated_new_valid_block(
      ::tendermint::consensus::NewValidBlock* new_valid_block);
  ::tendermint::consensus::NewValidBlock* unsafe_arena_release_new_valid_block();

  // .tendermint.consensus.Proposal proposal = 3;
  bool has_proposal() const;
  private:
  bool _internal_has_proposal() const;
  public:
  void clear_proposal();
  const ::tendermint::consensus::Proposal& proposal() const;
  PROTOBUF_NODISCARD ::tendermint::consensus::Proposal* release_proposal();
  ::tendermint::consensus::Proposal* mutable_proposal();
  void set_allocated_proposal(::tendermint::consensus::Proposal* proposal);
  private:
  const ::tendermint::consensus::Proposal& _internal_proposal() const;
  ::tendermint::consensus::Proposal* _internal_mutable_proposal();
  public:
  void unsafe_arena_set_allocated_proposal(
      ::tendermint::consensus::Proposal* proposal);
  ::tendermint::consensus::Proposal* unsafe_arena_release_proposal();

  // .tendermint.consensus.ProposalPOL proposal_pol = 4;
  bool has_proposal_pol() const;
  private:
  bool _internal_has_proposal_pol() const;
  public:
  void clear_proposal_pol();
  const ::tendermint::consensus::ProposalPOL& proposal_pol() const;
  PROTOBUF_NODISCARD ::tendermint::consensus::ProposalPOL* release_proposal_pol();
  ::tendermint::consensus::ProposalPOL* mutable_proposal_pol();
  void set_allocated_proposal_pol(::tendermint::consensus::ProposalPOL* proposal_pol);
  private:
  const ::tendermint::consensus::ProposalPOL& _internal_proposal_pol() const;
  ::tendermint::consensus::ProposalPOL* _internal_mutable_proposal_pol();
  public:
  void unsafe_arena_set_allocated_proposal_pol(
      ::tendermint::consensus::ProposalPOL* proposal_pol);
  ::tendermint::consensus::ProposalPOL* unsafe_arena_release_proposal_pol();

  // .tendermint.consensus.BlockPart block_part = 5;
  bool has_block_part() const;
  private:
  bool _internal_has_block_part() const;
  public:
  void clear_block_part();
  const ::tendermint::consensus::BlockPart& block_part() const;
  PROTOBUF_NODISCARD ::tendermint::consensus::BlockPart* release_block_part();
  ::tendermint::consensus::BlockPart* mutable_block_part();
  void set_allocated_block_part(::tendermint::consensus::BlockPart* block_part);
  private:
  const ::tendermint::consensus::BlockPart& _internal_block_part() const;
  ::tendermint::consensus::BlockPart* _internal_mutable_block_part();
  public:
  void unsafe_arena_set_allocated_block_part(
      ::tendermint::consensus::BlockPart* block_part);
  ::tendermint::consensus::BlockPart* unsafe_arena_release_block_part();

  // .tendermint.consensus.Vote vote = 6;
  bool has_vote() const;
  private:
  bool _internal_has_vote() const;
  public:
  void clear_vote();
  const ::tendermint::consensus::Vote& vote() const;
  PROTOBUF_NODISCARD ::tendermint::consensus::Vote* release_vote();
  ::tendermint::consensus::Vote* mutable_vote();
  void set_allocated_vote(::tendermint::consensus::Vote* vote);
  private:
  const ::tendermint::consensus::Vote& _internal_vote() const;
  ::tendermint::consensus::Vote* _internal_mutable_vote();
  public:
  void unsafe_arena_set_allocated_vote(
      ::tendermint::consensus::Vote* vote);
  ::tendermint::consensus::Vote* unsafe_arena_release_vote();

  // .tendermint.consensus.HasVote has_vote = 7;
  bool has_has_vote() const;
  private:
  bool _internal_has_has_vote() const;
  public:
  void clear_has_vote();
  const ::tendermint::consensus::HasVote& has_vote() const;
  PROTOBUF_NODISCARD ::tendermint::consensus::HasVote* release_has_vote();
  ::tendermint::consensus::HasVote* mutable_has_vote();
  void set_allocated_has_vote(::tendermint::consensus::HasVote* has_vote);
  private:
  const ::tendermint::consensus::HasVote& _internal_has_vote() const;
  ::tendermint::consensus::HasVote* _internal_mutable_has_vote();
  public:
  void unsafe_arena_set_allocated_has_vote(
      ::tendermint::consensus::HasVote* has_vote);
  ::tendermint::consensus::HasVote* unsafe_arena_release_has_vote();

  // .tendermint.consensus.VoteSetMaj23 vote_set_maj23 = 8;
  bool has_vote_set_maj23() const;
  private:
  bool _internal_has_vote_set_maj23() const;
  public:
  void clear_vote_set_maj23();
  const ::tendermint::consensus::VoteSetMaj23& vote_set_maj23() const;
  PROTOBUF_NODISCARD ::tendermint::consensus::VoteSetMaj23* release_vote_set_maj23();
  ::tendermint::consensus::VoteSetMaj23* mutable_vote_set_maj23();
  void set_allocated_vote_set_maj23(::tendermint::consensus::VoteSetMaj23* vote_set_maj23);
  private:
  const ::tendermint::consensus::VoteSetMaj23& _internal_vote_set_maj23() const;
  ::tendermint::consensus::VoteSetMaj23* _internal_mutable_vote_set_maj23();
  public:
  void unsafe_arena_set_allocated_vote_set_maj23(
      ::tendermint::consensus::VoteSetMaj23* vote_set_maj23);
  ::tendermint::consensus::VoteSetMaj23* unsafe_arena_release_vote_set_maj23();

  // .tendermint.consensus.VoteSetBits vote_set_bits = 9;
  bool has_vote_set_bits() const;
  private:
  bool _internal_has_vote_set_bits() const;
  public:
  void clear_vote_set_bits();
  const ::tendermint::consensus::VoteSetBits& vote_set_bits() const;
  PROTOBUF_NODISCARD ::tendermint::consensus::VoteSetBits* release_vote_set_bits();
  ::tendermint::consensus::VoteSetBits* mutable_vote_set_bits();
  void set_allocated_vote_set_bits(::tendermint::consensus::VoteSetBits* vote_set_bits);
  private:
  const ::tendermint::consensus::VoteSetBits& _internal_vote_set_bits() const;
  ::tendermint::consensus::VoteSetBits* _internal_mutable_vote_set_bits();
  public:
  void unsafe_arena_set_allocated_vote_set_bits(
      ::tendermint::consensus::VoteSetBits* vote_set_bits);
  ::tendermint::consensus::VoteSetBits* unsafe_arena_release_vote_set_bits();

  void clear_sum();
  SumCase sum_case() const;
  // @@protoc_insertion_point(class_scope:tendermint.consensus.Message)
 private:
  class _Internal;
  void set_has_new_round_step();
  void set_has_new_valid_block();
  void set_has_proposal();
  void set_has_proposal_pol();
  void set_has_block_part();
  void set_has_vote();
  void set_has_has_vote();
  void set_has_vote_set_maj23();
  void set_has_vote_set_bits();

  inline bool has_sum() const;
  inline void clear_has_sum();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union SumUnion {
    constexpr SumUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::tendermint::consensus::NewRoundStep* new_round_step_;
    ::tendermint::consensus::NewValidBlock* new_valid_block_;
    ::tendermint::consensus::Proposal* proposal_;
    ::tendermint::consensus::ProposalPOL* proposal_pol_;
    ::tendermint::consensus::BlockPart* block_part_;
    ::tendermint::consensus::Vote* vote_;
    ::tendermint::consensus::HasVote* has_vote_;
    ::tendermint::consensus::VoteSetMaj23* vote_set_maj23_;
    ::tendermint::consensus::VoteSetBits* vote_set_bits_;
  } sum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_tendermint_2fconsensus_2ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NewRoundStep

// int64 height = 1;
inline void NewRoundStep::clear_height() {
  height_ = int64_t{0};
}
inline int64_t NewRoundStep::_internal_height() const {
  return height_;
}
inline int64_t NewRoundStep::height() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.NewRoundStep.height)
  return _internal_height();
}
inline void NewRoundStep::_internal_set_height(int64_t value) {
  
  height_ = value;
}
inline void NewRoundStep::set_height(int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.NewRoundStep.height)
}

// int32 round = 2;
inline void NewRoundStep::clear_round() {
  round_ = 0;
}
inline int32_t NewRoundStep::_internal_round() const {
  return round_;
}
inline int32_t NewRoundStep::round() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.NewRoundStep.round)
  return _internal_round();
}
inline void NewRoundStep::_internal_set_round(int32_t value) {
  
  round_ = value;
}
inline void NewRoundStep::set_round(int32_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.NewRoundStep.round)
}

// uint32 step = 3;
inline void NewRoundStep::clear_step() {
  step_ = 0u;
}
inline uint32_t NewRoundStep::_internal_step() const {
  return step_;
}
inline uint32_t NewRoundStep::step() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.NewRoundStep.step)
  return _internal_step();
}
inline void NewRoundStep::_internal_set_step(uint32_t value) {
  
  step_ = value;
}
inline void NewRoundStep::set_step(uint32_t value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.NewRoundStep.step)
}

// int64 seconds_since_start_time = 4;
inline void NewRoundStep::clear_seconds_since_start_time() {
  seconds_since_start_time_ = int64_t{0};
}
inline int64_t NewRoundStep::_internal_seconds_since_start_time() const {
  return seconds_since_start_time_;
}
inline int64_t NewRoundStep::seconds_since_start_time() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.NewRoundStep.seconds_since_start_time)
  return _internal_seconds_since_start_time();
}
inline void NewRoundStep::_internal_set_seconds_since_start_time(int64_t value) {
  
  seconds_since_start_time_ = value;
}
inline void NewRoundStep::set_seconds_since_start_time(int64_t value) {
  _internal_set_seconds_since_start_time(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.NewRoundStep.seconds_since_start_time)
}

// int32 last_commit_round = 5;
inline void NewRoundStep::clear_last_commit_round() {
  last_commit_round_ = 0;
}
inline int32_t NewRoundStep::_internal_last_commit_round() const {
  return last_commit_round_;
}
inline int32_t NewRoundStep::last_commit_round() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.NewRoundStep.last_commit_round)
  return _internal_last_commit_round();
}
inline void NewRoundStep::_internal_set_last_commit_round(int32_t value) {
  
  last_commit_round_ = value;
}
inline void NewRoundStep::set_last_commit_round(int32_t value) {
  _internal_set_last_commit_round(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.NewRoundStep.last_commit_round)
}

// -------------------------------------------------------------------

// NewValidBlock

// int64 height = 1;
inline void NewValidBlock::clear_height() {
  height_ = int64_t{0};
}
inline int64_t NewValidBlock::_internal_height() const {
  return height_;
}
inline int64_t NewValidBlock::height() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.NewValidBlock.height)
  return _internal_height();
}
inline void NewValidBlock::_internal_set_height(int64_t value) {
  
  height_ = value;
}
inline void NewValidBlock::set_height(int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.NewValidBlock.height)
}

// int32 round = 2;
inline void NewValidBlock::clear_round() {
  round_ = 0;
}
inline int32_t NewValidBlock::_internal_round() const {
  return round_;
}
inline int32_t NewValidBlock::round() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.NewValidBlock.round)
  return _internal_round();
}
inline void NewValidBlock::_internal_set_round(int32_t value) {
  
  round_ = value;
}
inline void NewValidBlock::set_round(int32_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.NewValidBlock.round)
}

// .tendermint.types.PartSetHeader block_part_set_header = 3 [(.gogoproto.nullable) = false];
inline bool NewValidBlock::_internal_has_block_part_set_header() const {
  return this != internal_default_instance() && block_part_set_header_ != nullptr;
}
inline bool NewValidBlock::has_block_part_set_header() const {
  return _internal_has_block_part_set_header();
}
inline const ::tendermint::types::PartSetHeader& NewValidBlock::_internal_block_part_set_header() const {
  const ::tendermint::types::PartSetHeader* p = block_part_set_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::PartSetHeader&>(
      ::tendermint::types::_PartSetHeader_default_instance_);
}
inline const ::tendermint::types::PartSetHeader& NewValidBlock::block_part_set_header() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.NewValidBlock.block_part_set_header)
  return _internal_block_part_set_header();
}
inline void NewValidBlock::unsafe_arena_set_allocated_block_part_set_header(
    ::tendermint::types::PartSetHeader* block_part_set_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_part_set_header_);
  }
  block_part_set_header_ = block_part_set_header;
  if (block_part_set_header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.NewValidBlock.block_part_set_header)
}
inline ::tendermint::types::PartSetHeader* NewValidBlock::release_block_part_set_header() {
  
  ::tendermint::types::PartSetHeader* temp = block_part_set_header_;
  block_part_set_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::PartSetHeader* NewValidBlock::unsafe_arena_release_block_part_set_header() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.NewValidBlock.block_part_set_header)
  
  ::tendermint::types::PartSetHeader* temp = block_part_set_header_;
  block_part_set_header_ = nullptr;
  return temp;
}
inline ::tendermint::types::PartSetHeader* NewValidBlock::_internal_mutable_block_part_set_header() {
  
  if (block_part_set_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::PartSetHeader>(GetArenaForAllocation());
    block_part_set_header_ = p;
  }
  return block_part_set_header_;
}
inline ::tendermint::types::PartSetHeader* NewValidBlock::mutable_block_part_set_header() {
  ::tendermint::types::PartSetHeader* _msg = _internal_mutable_block_part_set_header();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.NewValidBlock.block_part_set_header)
  return _msg;
}
inline void NewValidBlock::set_allocated_block_part_set_header(::tendermint::types::PartSetHeader* block_part_set_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_part_set_header_);
  }
  if (block_part_set_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_part_set_header));
    if (message_arena != submessage_arena) {
      block_part_set_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_part_set_header, submessage_arena);
    }
    
  } else {
    
  }
  block_part_set_header_ = block_part_set_header;
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.NewValidBlock.block_part_set_header)
}

// .tendermint.libs.bits.BitArray block_parts = 4;
inline bool NewValidBlock::_internal_has_block_parts() const {
  return this != internal_default_instance() && block_parts_ != nullptr;
}
inline bool NewValidBlock::has_block_parts() const {
  return _internal_has_block_parts();
}
inline const ::tendermint::libs::bits::BitArray& NewValidBlock::_internal_block_parts() const {
  const ::tendermint::libs::bits::BitArray* p = block_parts_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::libs::bits::BitArray&>(
      ::tendermint::libs::bits::_BitArray_default_instance_);
}
inline const ::tendermint::libs::bits::BitArray& NewValidBlock::block_parts() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.NewValidBlock.block_parts)
  return _internal_block_parts();
}
inline void NewValidBlock::unsafe_arena_set_allocated_block_parts(
    ::tendermint::libs::bits::BitArray* block_parts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_parts_);
  }
  block_parts_ = block_parts;
  if (block_parts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.NewValidBlock.block_parts)
}
inline ::tendermint::libs::bits::BitArray* NewValidBlock::release_block_parts() {
  
  ::tendermint::libs::bits::BitArray* temp = block_parts_;
  block_parts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::libs::bits::BitArray* NewValidBlock::unsafe_arena_release_block_parts() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.NewValidBlock.block_parts)
  
  ::tendermint::libs::bits::BitArray* temp = block_parts_;
  block_parts_ = nullptr;
  return temp;
}
inline ::tendermint::libs::bits::BitArray* NewValidBlock::_internal_mutable_block_parts() {
  
  if (block_parts_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::libs::bits::BitArray>(GetArenaForAllocation());
    block_parts_ = p;
  }
  return block_parts_;
}
inline ::tendermint::libs::bits::BitArray* NewValidBlock::mutable_block_parts() {
  ::tendermint::libs::bits::BitArray* _msg = _internal_mutable_block_parts();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.NewValidBlock.block_parts)
  return _msg;
}
inline void NewValidBlock::set_allocated_block_parts(::tendermint::libs::bits::BitArray* block_parts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_parts_);
  }
  if (block_parts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_parts));
    if (message_arena != submessage_arena) {
      block_parts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_parts, submessage_arena);
    }
    
  } else {
    
  }
  block_parts_ = block_parts;
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.NewValidBlock.block_parts)
}

// bool is_commit = 5;
inline void NewValidBlock::clear_is_commit() {
  is_commit_ = false;
}
inline bool NewValidBlock::_internal_is_commit() const {
  return is_commit_;
}
inline bool NewValidBlock::is_commit() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.NewValidBlock.is_commit)
  return _internal_is_commit();
}
inline void NewValidBlock::_internal_set_is_commit(bool value) {
  
  is_commit_ = value;
}
inline void NewValidBlock::set_is_commit(bool value) {
  _internal_set_is_commit(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.NewValidBlock.is_commit)
}

// -------------------------------------------------------------------

// Proposal

// .tendermint.types.Proposal proposal = 1 [(.gogoproto.nullable) = false];
inline bool Proposal::_internal_has_proposal() const {
  return this != internal_default_instance() && proposal_ != nullptr;
}
inline bool Proposal::has_proposal() const {
  return _internal_has_proposal();
}
inline const ::tendermint::types::Proposal& Proposal::_internal_proposal() const {
  const ::tendermint::types::Proposal* p = proposal_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Proposal&>(
      ::tendermint::types::_Proposal_default_instance_);
}
inline const ::tendermint::types::Proposal& Proposal::proposal() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.Proposal.proposal)
  return _internal_proposal();
}
inline void Proposal::unsafe_arena_set_allocated_proposal(
    ::tendermint::types::Proposal* proposal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal_);
  }
  proposal_ = proposal;
  if (proposal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.Proposal.proposal)
}
inline ::tendermint::types::Proposal* Proposal::release_proposal() {
  
  ::tendermint::types::Proposal* temp = proposal_;
  proposal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::Proposal* Proposal::unsafe_arena_release_proposal() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.Proposal.proposal)
  
  ::tendermint::types::Proposal* temp = proposal_;
  proposal_ = nullptr;
  return temp;
}
inline ::tendermint::types::Proposal* Proposal::_internal_mutable_proposal() {
  
  if (proposal_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::Proposal>(GetArenaForAllocation());
    proposal_ = p;
  }
  return proposal_;
}
inline ::tendermint::types::Proposal* Proposal::mutable_proposal() {
  ::tendermint::types::Proposal* _msg = _internal_mutable_proposal();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.Proposal.proposal)
  return _msg;
}
inline void Proposal::set_allocated_proposal(::tendermint::types::Proposal* proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal_);
  }
  if (proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal));
    if (message_arena != submessage_arena) {
      proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal, submessage_arena);
    }
    
  } else {
    
  }
  proposal_ = proposal;
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.Proposal.proposal)
}

// -------------------------------------------------------------------

// ProposalPOL

// int64 height = 1;
inline void ProposalPOL::clear_height() {
  height_ = int64_t{0};
}
inline int64_t ProposalPOL::_internal_height() const {
  return height_;
}
inline int64_t ProposalPOL::height() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.ProposalPOL.height)
  return _internal_height();
}
inline void ProposalPOL::_internal_set_height(int64_t value) {
  
  height_ = value;
}
inline void ProposalPOL::set_height(int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.ProposalPOL.height)
}

// int32 proposal_pol_round = 2;
inline void ProposalPOL::clear_proposal_pol_round() {
  proposal_pol_round_ = 0;
}
inline int32_t ProposalPOL::_internal_proposal_pol_round() const {
  return proposal_pol_round_;
}
inline int32_t ProposalPOL::proposal_pol_round() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.ProposalPOL.proposal_pol_round)
  return _internal_proposal_pol_round();
}
inline void ProposalPOL::_internal_set_proposal_pol_round(int32_t value) {
  
  proposal_pol_round_ = value;
}
inline void ProposalPOL::set_proposal_pol_round(int32_t value) {
  _internal_set_proposal_pol_round(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.ProposalPOL.proposal_pol_round)
}

// .tendermint.libs.bits.BitArray proposal_pol = 3 [(.gogoproto.nullable) = false];
inline bool ProposalPOL::_internal_has_proposal_pol() const {
  return this != internal_default_instance() && proposal_pol_ != nullptr;
}
inline bool ProposalPOL::has_proposal_pol() const {
  return _internal_has_proposal_pol();
}
inline const ::tendermint::libs::bits::BitArray& ProposalPOL::_internal_proposal_pol() const {
  const ::tendermint::libs::bits::BitArray* p = proposal_pol_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::libs::bits::BitArray&>(
      ::tendermint::libs::bits::_BitArray_default_instance_);
}
inline const ::tendermint::libs::bits::BitArray& ProposalPOL::proposal_pol() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.ProposalPOL.proposal_pol)
  return _internal_proposal_pol();
}
inline void ProposalPOL::unsafe_arena_set_allocated_proposal_pol(
    ::tendermint::libs::bits::BitArray* proposal_pol) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal_pol_);
  }
  proposal_pol_ = proposal_pol;
  if (proposal_pol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.ProposalPOL.proposal_pol)
}
inline ::tendermint::libs::bits::BitArray* ProposalPOL::release_proposal_pol() {
  
  ::tendermint::libs::bits::BitArray* temp = proposal_pol_;
  proposal_pol_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::libs::bits::BitArray* ProposalPOL::unsafe_arena_release_proposal_pol() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.ProposalPOL.proposal_pol)
  
  ::tendermint::libs::bits::BitArray* temp = proposal_pol_;
  proposal_pol_ = nullptr;
  return temp;
}
inline ::tendermint::libs::bits::BitArray* ProposalPOL::_internal_mutable_proposal_pol() {
  
  if (proposal_pol_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::libs::bits::BitArray>(GetArenaForAllocation());
    proposal_pol_ = p;
  }
  return proposal_pol_;
}
inline ::tendermint::libs::bits::BitArray* ProposalPOL::mutable_proposal_pol() {
  ::tendermint::libs::bits::BitArray* _msg = _internal_mutable_proposal_pol();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.ProposalPOL.proposal_pol)
  return _msg;
}
inline void ProposalPOL::set_allocated_proposal_pol(::tendermint::libs::bits::BitArray* proposal_pol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal_pol_);
  }
  if (proposal_pol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal_pol));
    if (message_arena != submessage_arena) {
      proposal_pol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal_pol, submessage_arena);
    }
    
  } else {
    
  }
  proposal_pol_ = proposal_pol;
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.ProposalPOL.proposal_pol)
}

// -------------------------------------------------------------------

// BlockPart

// int64 height = 1;
inline void BlockPart::clear_height() {
  height_ = int64_t{0};
}
inline int64_t BlockPart::_internal_height() const {
  return height_;
}
inline int64_t BlockPart::height() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.BlockPart.height)
  return _internal_height();
}
inline void BlockPart::_internal_set_height(int64_t value) {
  
  height_ = value;
}
inline void BlockPart::set_height(int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.BlockPart.height)
}

// int32 round = 2;
inline void BlockPart::clear_round() {
  round_ = 0;
}
inline int32_t BlockPart::_internal_round() const {
  return round_;
}
inline int32_t BlockPart::round() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.BlockPart.round)
  return _internal_round();
}
inline void BlockPart::_internal_set_round(int32_t value) {
  
  round_ = value;
}
inline void BlockPart::set_round(int32_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.BlockPart.round)
}

// .tendermint.types.Part part = 3 [(.gogoproto.nullable) = false];
inline bool BlockPart::_internal_has_part() const {
  return this != internal_default_instance() && part_ != nullptr;
}
inline bool BlockPart::has_part() const {
  return _internal_has_part();
}
inline const ::tendermint::types::Part& BlockPart::_internal_part() const {
  const ::tendermint::types::Part* p = part_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Part&>(
      ::tendermint::types::_Part_default_instance_);
}
inline const ::tendermint::types::Part& BlockPart::part() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.BlockPart.part)
  return _internal_part();
}
inline void BlockPart::unsafe_arena_set_allocated_part(
    ::tendermint::types::Part* part) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(part_);
  }
  part_ = part;
  if (part) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.BlockPart.part)
}
inline ::tendermint::types::Part* BlockPart::release_part() {
  
  ::tendermint::types::Part* temp = part_;
  part_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::Part* BlockPart::unsafe_arena_release_part() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.BlockPart.part)
  
  ::tendermint::types::Part* temp = part_;
  part_ = nullptr;
  return temp;
}
inline ::tendermint::types::Part* BlockPart::_internal_mutable_part() {
  
  if (part_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::Part>(GetArenaForAllocation());
    part_ = p;
  }
  return part_;
}
inline ::tendermint::types::Part* BlockPart::mutable_part() {
  ::tendermint::types::Part* _msg = _internal_mutable_part();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.BlockPart.part)
  return _msg;
}
inline void BlockPart::set_allocated_part(::tendermint::types::Part* part) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(part_);
  }
  if (part) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(part));
    if (message_arena != submessage_arena) {
      part = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, part, submessage_arena);
    }
    
  } else {
    
  }
  part_ = part;
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.BlockPart.part)
}

// -------------------------------------------------------------------

// Vote

// .tendermint.types.Vote vote = 1;
inline bool Vote::_internal_has_vote() const {
  return this != internal_default_instance() && vote_ != nullptr;
}
inline bool Vote::has_vote() const {
  return _internal_has_vote();
}
inline const ::tendermint::types::Vote& Vote::_internal_vote() const {
  const ::tendermint::types::Vote* p = vote_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Vote&>(
      ::tendermint::types::_Vote_default_instance_);
}
inline const ::tendermint::types::Vote& Vote::vote() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.Vote.vote)
  return _internal_vote();
}
inline void Vote::unsafe_arena_set_allocated_vote(
    ::tendermint::types::Vote* vote) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote_);
  }
  vote_ = vote;
  if (vote) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.Vote.vote)
}
inline ::tendermint::types::Vote* Vote::release_vote() {
  
  ::tendermint::types::Vote* temp = vote_;
  vote_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::Vote* Vote::unsafe_arena_release_vote() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.Vote.vote)
  
  ::tendermint::types::Vote* temp = vote_;
  vote_ = nullptr;
  return temp;
}
inline ::tendermint::types::Vote* Vote::_internal_mutable_vote() {
  
  if (vote_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::Vote>(GetArenaForAllocation());
    vote_ = p;
  }
  return vote_;
}
inline ::tendermint::types::Vote* Vote::mutable_vote() {
  ::tendermint::types::Vote* _msg = _internal_mutable_vote();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.Vote.vote)
  return _msg;
}
inline void Vote::set_allocated_vote(::tendermint::types::Vote* vote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote_);
  }
  if (vote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote));
    if (message_arena != submessage_arena) {
      vote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote, submessage_arena);
    }
    
  } else {
    
  }
  vote_ = vote;
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.Vote.vote)
}

// -------------------------------------------------------------------

// HasVote

// int64 height = 1;
inline void HasVote::clear_height() {
  height_ = int64_t{0};
}
inline int64_t HasVote::_internal_height() const {
  return height_;
}
inline int64_t HasVote::height() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.HasVote.height)
  return _internal_height();
}
inline void HasVote::_internal_set_height(int64_t value) {
  
  height_ = value;
}
inline void HasVote::set_height(int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.HasVote.height)
}

// int32 round = 2;
inline void HasVote::clear_round() {
  round_ = 0;
}
inline int32_t HasVote::_internal_round() const {
  return round_;
}
inline int32_t HasVote::round() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.HasVote.round)
  return _internal_round();
}
inline void HasVote::_internal_set_round(int32_t value) {
  
  round_ = value;
}
inline void HasVote::set_round(int32_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.HasVote.round)
}

// .tendermint.types.SignedMsgType type = 3;
inline void HasVote::clear_type() {
  type_ = 0;
}
inline ::tendermint::types::SignedMsgType HasVote::_internal_type() const {
  return static_cast< ::tendermint::types::SignedMsgType >(type_);
}
inline ::tendermint::types::SignedMsgType HasVote::type() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.HasVote.type)
  return _internal_type();
}
inline void HasVote::_internal_set_type(::tendermint::types::SignedMsgType value) {
  
  type_ = value;
}
inline void HasVote::set_type(::tendermint::types::SignedMsgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.HasVote.type)
}

// int32 index = 4;
inline void HasVote::clear_index() {
  index_ = 0;
}
inline int32_t HasVote::_internal_index() const {
  return index_;
}
inline int32_t HasVote::index() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.HasVote.index)
  return _internal_index();
}
inline void HasVote::_internal_set_index(int32_t value) {
  
  index_ = value;
}
inline void HasVote::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.HasVote.index)
}

// -------------------------------------------------------------------

// VoteSetMaj23

// int64 height = 1;
inline void VoteSetMaj23::clear_height() {
  height_ = int64_t{0};
}
inline int64_t VoteSetMaj23::_internal_height() const {
  return height_;
}
inline int64_t VoteSetMaj23::height() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.VoteSetMaj23.height)
  return _internal_height();
}
inline void VoteSetMaj23::_internal_set_height(int64_t value) {
  
  height_ = value;
}
inline void VoteSetMaj23::set_height(int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.VoteSetMaj23.height)
}

// int32 round = 2;
inline void VoteSetMaj23::clear_round() {
  round_ = 0;
}
inline int32_t VoteSetMaj23::_internal_round() const {
  return round_;
}
inline int32_t VoteSetMaj23::round() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.VoteSetMaj23.round)
  return _internal_round();
}
inline void VoteSetMaj23::_internal_set_round(int32_t value) {
  
  round_ = value;
}
inline void VoteSetMaj23::set_round(int32_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.VoteSetMaj23.round)
}

// .tendermint.types.SignedMsgType type = 3;
inline void VoteSetMaj23::clear_type() {
  type_ = 0;
}
inline ::tendermint::types::SignedMsgType VoteSetMaj23::_internal_type() const {
  return static_cast< ::tendermint::types::SignedMsgType >(type_);
}
inline ::tendermint::types::SignedMsgType VoteSetMaj23::type() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.VoteSetMaj23.type)
  return _internal_type();
}
inline void VoteSetMaj23::_internal_set_type(::tendermint::types::SignedMsgType value) {
  
  type_ = value;
}
inline void VoteSetMaj23::set_type(::tendermint::types::SignedMsgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.VoteSetMaj23.type)
}

// .tendermint.types.BlockID block_id = 4 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
inline bool VoteSetMaj23::_internal_has_block_id() const {
  return this != internal_default_instance() && block_id_ != nullptr;
}
inline bool VoteSetMaj23::has_block_id() const {
  return _internal_has_block_id();
}
inline const ::tendermint::types::BlockID& VoteSetMaj23::_internal_block_id() const {
  const ::tendermint::types::BlockID* p = block_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::BlockID&>(
      ::tendermint::types::_BlockID_default_instance_);
}
inline const ::tendermint::types::BlockID& VoteSetMaj23::block_id() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.VoteSetMaj23.block_id)
  return _internal_block_id();
}
inline void VoteSetMaj23::unsafe_arena_set_allocated_block_id(
    ::tendermint::types::BlockID* block_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_id_);
  }
  block_id_ = block_id;
  if (block_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.VoteSetMaj23.block_id)
}
inline ::tendermint::types::BlockID* VoteSetMaj23::release_block_id() {
  
  ::tendermint::types::BlockID* temp = block_id_;
  block_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::BlockID* VoteSetMaj23::unsafe_arena_release_block_id() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.VoteSetMaj23.block_id)
  
  ::tendermint::types::BlockID* temp = block_id_;
  block_id_ = nullptr;
  return temp;
}
inline ::tendermint::types::BlockID* VoteSetMaj23::_internal_mutable_block_id() {
  
  if (block_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::BlockID>(GetArenaForAllocation());
    block_id_ = p;
  }
  return block_id_;
}
inline ::tendermint::types::BlockID* VoteSetMaj23::mutable_block_id() {
  ::tendermint::types::BlockID* _msg = _internal_mutable_block_id();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.VoteSetMaj23.block_id)
  return _msg;
}
inline void VoteSetMaj23::set_allocated_block_id(::tendermint::types::BlockID* block_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_id_);
  }
  if (block_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_id));
    if (message_arena != submessage_arena) {
      block_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_id, submessage_arena);
    }
    
  } else {
    
  }
  block_id_ = block_id;
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.VoteSetMaj23.block_id)
}

// -------------------------------------------------------------------

// VoteSetBits

// int64 height = 1;
inline void VoteSetBits::clear_height() {
  height_ = int64_t{0};
}
inline int64_t VoteSetBits::_internal_height() const {
  return height_;
}
inline int64_t VoteSetBits::height() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.VoteSetBits.height)
  return _internal_height();
}
inline void VoteSetBits::_internal_set_height(int64_t value) {
  
  height_ = value;
}
inline void VoteSetBits::set_height(int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.VoteSetBits.height)
}

// int32 round = 2;
inline void VoteSetBits::clear_round() {
  round_ = 0;
}
inline int32_t VoteSetBits::_internal_round() const {
  return round_;
}
inline int32_t VoteSetBits::round() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.VoteSetBits.round)
  return _internal_round();
}
inline void VoteSetBits::_internal_set_round(int32_t value) {
  
  round_ = value;
}
inline void VoteSetBits::set_round(int32_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.VoteSetBits.round)
}

// .tendermint.types.SignedMsgType type = 3;
inline void VoteSetBits::clear_type() {
  type_ = 0;
}
inline ::tendermint::types::SignedMsgType VoteSetBits::_internal_type() const {
  return static_cast< ::tendermint::types::SignedMsgType >(type_);
}
inline ::tendermint::types::SignedMsgType VoteSetBits::type() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.VoteSetBits.type)
  return _internal_type();
}
inline void VoteSetBits::_internal_set_type(::tendermint::types::SignedMsgType value) {
  
  type_ = value;
}
inline void VoteSetBits::set_type(::tendermint::types::SignedMsgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.VoteSetBits.type)
}

// .tendermint.types.BlockID block_id = 4 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
inline bool VoteSetBits::_internal_has_block_id() const {
  return this != internal_default_instance() && block_id_ != nullptr;
}
inline bool VoteSetBits::has_block_id() const {
  return _internal_has_block_id();
}
inline const ::tendermint::types::BlockID& VoteSetBits::_internal_block_id() const {
  const ::tendermint::types::BlockID* p = block_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::BlockID&>(
      ::tendermint::types::_BlockID_default_instance_);
}
inline const ::tendermint::types::BlockID& VoteSetBits::block_id() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.VoteSetBits.block_id)
  return _internal_block_id();
}
inline void VoteSetBits::unsafe_arena_set_allocated_block_id(
    ::tendermint::types::BlockID* block_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_id_);
  }
  block_id_ = block_id;
  if (block_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.VoteSetBits.block_id)
}
inline ::tendermint::types::BlockID* VoteSetBits::release_block_id() {
  
  ::tendermint::types::BlockID* temp = block_id_;
  block_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::BlockID* VoteSetBits::unsafe_arena_release_block_id() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.VoteSetBits.block_id)
  
  ::tendermint::types::BlockID* temp = block_id_;
  block_id_ = nullptr;
  return temp;
}
inline ::tendermint::types::BlockID* VoteSetBits::_internal_mutable_block_id() {
  
  if (block_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::BlockID>(GetArenaForAllocation());
    block_id_ = p;
  }
  return block_id_;
}
inline ::tendermint::types::BlockID* VoteSetBits::mutable_block_id() {
  ::tendermint::types::BlockID* _msg = _internal_mutable_block_id();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.VoteSetBits.block_id)
  return _msg;
}
inline void VoteSetBits::set_allocated_block_id(::tendermint::types::BlockID* block_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_id_);
  }
  if (block_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_id));
    if (message_arena != submessage_arena) {
      block_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_id, submessage_arena);
    }
    
  } else {
    
  }
  block_id_ = block_id;
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.VoteSetBits.block_id)
}

// .tendermint.libs.bits.BitArray votes = 5 [(.gogoproto.nullable) = false];
inline bool VoteSetBits::_internal_has_votes() const {
  return this != internal_default_instance() && votes_ != nullptr;
}
inline bool VoteSetBits::has_votes() const {
  return _internal_has_votes();
}
inline const ::tendermint::libs::bits::BitArray& VoteSetBits::_internal_votes() const {
  const ::tendermint::libs::bits::BitArray* p = votes_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::libs::bits::BitArray&>(
      ::tendermint::libs::bits::_BitArray_default_instance_);
}
inline const ::tendermint::libs::bits::BitArray& VoteSetBits::votes() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.VoteSetBits.votes)
  return _internal_votes();
}
inline void VoteSetBits::unsafe_arena_set_allocated_votes(
    ::tendermint::libs::bits::BitArray* votes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(votes_);
  }
  votes_ = votes;
  if (votes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.VoteSetBits.votes)
}
inline ::tendermint::libs::bits::BitArray* VoteSetBits::release_votes() {
  
  ::tendermint::libs::bits::BitArray* temp = votes_;
  votes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::libs::bits::BitArray* VoteSetBits::unsafe_arena_release_votes() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.VoteSetBits.votes)
  
  ::tendermint::libs::bits::BitArray* temp = votes_;
  votes_ = nullptr;
  return temp;
}
inline ::tendermint::libs::bits::BitArray* VoteSetBits::_internal_mutable_votes() {
  
  if (votes_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::libs::bits::BitArray>(GetArenaForAllocation());
    votes_ = p;
  }
  return votes_;
}
inline ::tendermint::libs::bits::BitArray* VoteSetBits::mutable_votes() {
  ::tendermint::libs::bits::BitArray* _msg = _internal_mutable_votes();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.VoteSetBits.votes)
  return _msg;
}
inline void VoteSetBits::set_allocated_votes(::tendermint::libs::bits::BitArray* votes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(votes_);
  }
  if (votes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(votes));
    if (message_arena != submessage_arena) {
      votes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, votes, submessage_arena);
    }
    
  } else {
    
  }
  votes_ = votes;
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.VoteSetBits.votes)
}

// -------------------------------------------------------------------

// Message

// .tendermint.consensus.NewRoundStep new_round_step = 1;
inline bool Message::_internal_has_new_round_step() const {
  return sum_case() == kNewRoundStep;
}
inline bool Message::has_new_round_step() const {
  return _internal_has_new_round_step();
}
inline void Message::set_has_new_round_step() {
  _oneof_case_[0] = kNewRoundStep;
}
inline void Message::clear_new_round_step() {
  if (_internal_has_new_round_step()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sum_.new_round_step_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::consensus::NewRoundStep* Message::release_new_round_step() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.Message.new_round_step)
  if (_internal_has_new_round_step()) {
    clear_has_sum();
      ::tendermint::consensus::NewRoundStep* temp = sum_.new_round_step_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sum_.new_round_step_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::consensus::NewRoundStep& Message::_internal_new_round_step() const {
  return _internal_has_new_round_step()
      ? *sum_.new_round_step_
      : reinterpret_cast< ::tendermint::consensus::NewRoundStep&>(::tendermint::consensus::_NewRoundStep_default_instance_);
}
inline const ::tendermint::consensus::NewRoundStep& Message::new_round_step() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.Message.new_round_step)
  return _internal_new_round_step();
}
inline ::tendermint::consensus::NewRoundStep* Message::unsafe_arena_release_new_round_step() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.consensus.Message.new_round_step)
  if (_internal_has_new_round_step()) {
    clear_has_sum();
    ::tendermint::consensus::NewRoundStep* temp = sum_.new_round_step_;
    sum_.new_round_step_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_new_round_step(::tendermint::consensus::NewRoundStep* new_round_step) {
  clear_sum();
  if (new_round_step) {
    set_has_new_round_step();
    sum_.new_round_step_ = new_round_step;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.Message.new_round_step)
}
inline ::tendermint::consensus::NewRoundStep* Message::_internal_mutable_new_round_step() {
  if (!_internal_has_new_round_step()) {
    clear_sum();
    set_has_new_round_step();
    sum_.new_round_step_ = CreateMaybeMessage< ::tendermint::consensus::NewRoundStep >(GetArenaForAllocation());
  }
  return sum_.new_round_step_;
}
inline ::tendermint::consensus::NewRoundStep* Message::mutable_new_round_step() {
  ::tendermint::consensus::NewRoundStep* _msg = _internal_mutable_new_round_step();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.Message.new_round_step)
  return _msg;
}

// .tendermint.consensus.NewValidBlock new_valid_block = 2;
inline bool Message::_internal_has_new_valid_block() const {
  return sum_case() == kNewValidBlock;
}
inline bool Message::has_new_valid_block() const {
  return _internal_has_new_valid_block();
}
inline void Message::set_has_new_valid_block() {
  _oneof_case_[0] = kNewValidBlock;
}
inline void Message::clear_new_valid_block() {
  if (_internal_has_new_valid_block()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sum_.new_valid_block_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::consensus::NewValidBlock* Message::release_new_valid_block() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.Message.new_valid_block)
  if (_internal_has_new_valid_block()) {
    clear_has_sum();
      ::tendermint::consensus::NewValidBlock* temp = sum_.new_valid_block_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sum_.new_valid_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::consensus::NewValidBlock& Message::_internal_new_valid_block() const {
  return _internal_has_new_valid_block()
      ? *sum_.new_valid_block_
      : reinterpret_cast< ::tendermint::consensus::NewValidBlock&>(::tendermint::consensus::_NewValidBlock_default_instance_);
}
inline const ::tendermint::consensus::NewValidBlock& Message::new_valid_block() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.Message.new_valid_block)
  return _internal_new_valid_block();
}
inline ::tendermint::consensus::NewValidBlock* Message::unsafe_arena_release_new_valid_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.consensus.Message.new_valid_block)
  if (_internal_has_new_valid_block()) {
    clear_has_sum();
    ::tendermint::consensus::NewValidBlock* temp = sum_.new_valid_block_;
    sum_.new_valid_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_new_valid_block(::tendermint::consensus::NewValidBlock* new_valid_block) {
  clear_sum();
  if (new_valid_block) {
    set_has_new_valid_block();
    sum_.new_valid_block_ = new_valid_block;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.Message.new_valid_block)
}
inline ::tendermint::consensus::NewValidBlock* Message::_internal_mutable_new_valid_block() {
  if (!_internal_has_new_valid_block()) {
    clear_sum();
    set_has_new_valid_block();
    sum_.new_valid_block_ = CreateMaybeMessage< ::tendermint::consensus::NewValidBlock >(GetArenaForAllocation());
  }
  return sum_.new_valid_block_;
}
inline ::tendermint::consensus::NewValidBlock* Message::mutable_new_valid_block() {
  ::tendermint::consensus::NewValidBlock* _msg = _internal_mutable_new_valid_block();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.Message.new_valid_block)
  return _msg;
}

// .tendermint.consensus.Proposal proposal = 3;
inline bool Message::_internal_has_proposal() const {
  return sum_case() == kProposal;
}
inline bool Message::has_proposal() const {
  return _internal_has_proposal();
}
inline void Message::set_has_proposal() {
  _oneof_case_[0] = kProposal;
}
inline void Message::clear_proposal() {
  if (_internal_has_proposal()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sum_.proposal_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::consensus::Proposal* Message::release_proposal() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.Message.proposal)
  if (_internal_has_proposal()) {
    clear_has_sum();
      ::tendermint::consensus::Proposal* temp = sum_.proposal_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sum_.proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::consensus::Proposal& Message::_internal_proposal() const {
  return _internal_has_proposal()
      ? *sum_.proposal_
      : reinterpret_cast< ::tendermint::consensus::Proposal&>(::tendermint::consensus::_Proposal_default_instance_);
}
inline const ::tendermint::consensus::Proposal& Message::proposal() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.Message.proposal)
  return _internal_proposal();
}
inline ::tendermint::consensus::Proposal* Message::unsafe_arena_release_proposal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.consensus.Message.proposal)
  if (_internal_has_proposal()) {
    clear_has_sum();
    ::tendermint::consensus::Proposal* temp = sum_.proposal_;
    sum_.proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_proposal(::tendermint::consensus::Proposal* proposal) {
  clear_sum();
  if (proposal) {
    set_has_proposal();
    sum_.proposal_ = proposal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.Message.proposal)
}
inline ::tendermint::consensus::Proposal* Message::_internal_mutable_proposal() {
  if (!_internal_has_proposal()) {
    clear_sum();
    set_has_proposal();
    sum_.proposal_ = CreateMaybeMessage< ::tendermint::consensus::Proposal >(GetArenaForAllocation());
  }
  return sum_.proposal_;
}
inline ::tendermint::consensus::Proposal* Message::mutable_proposal() {
  ::tendermint::consensus::Proposal* _msg = _internal_mutable_proposal();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.Message.proposal)
  return _msg;
}

// .tendermint.consensus.ProposalPOL proposal_pol = 4;
inline bool Message::_internal_has_proposal_pol() const {
  return sum_case() == kProposalPol;
}
inline bool Message::has_proposal_pol() const {
  return _internal_has_proposal_pol();
}
inline void Message::set_has_proposal_pol() {
  _oneof_case_[0] = kProposalPol;
}
inline void Message::clear_proposal_pol() {
  if (_internal_has_proposal_pol()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sum_.proposal_pol_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::consensus::ProposalPOL* Message::release_proposal_pol() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.Message.proposal_pol)
  if (_internal_has_proposal_pol()) {
    clear_has_sum();
      ::tendermint::consensus::ProposalPOL* temp = sum_.proposal_pol_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sum_.proposal_pol_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::consensus::ProposalPOL& Message::_internal_proposal_pol() const {
  return _internal_has_proposal_pol()
      ? *sum_.proposal_pol_
      : reinterpret_cast< ::tendermint::consensus::ProposalPOL&>(::tendermint::consensus::_ProposalPOL_default_instance_);
}
inline const ::tendermint::consensus::ProposalPOL& Message::proposal_pol() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.Message.proposal_pol)
  return _internal_proposal_pol();
}
inline ::tendermint::consensus::ProposalPOL* Message::unsafe_arena_release_proposal_pol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.consensus.Message.proposal_pol)
  if (_internal_has_proposal_pol()) {
    clear_has_sum();
    ::tendermint::consensus::ProposalPOL* temp = sum_.proposal_pol_;
    sum_.proposal_pol_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_proposal_pol(::tendermint::consensus::ProposalPOL* proposal_pol) {
  clear_sum();
  if (proposal_pol) {
    set_has_proposal_pol();
    sum_.proposal_pol_ = proposal_pol;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.Message.proposal_pol)
}
inline ::tendermint::consensus::ProposalPOL* Message::_internal_mutable_proposal_pol() {
  if (!_internal_has_proposal_pol()) {
    clear_sum();
    set_has_proposal_pol();
    sum_.proposal_pol_ = CreateMaybeMessage< ::tendermint::consensus::ProposalPOL >(GetArenaForAllocation());
  }
  return sum_.proposal_pol_;
}
inline ::tendermint::consensus::ProposalPOL* Message::mutable_proposal_pol() {
  ::tendermint::consensus::ProposalPOL* _msg = _internal_mutable_proposal_pol();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.Message.proposal_pol)
  return _msg;
}

// .tendermint.consensus.BlockPart block_part = 5;
inline bool Message::_internal_has_block_part() const {
  return sum_case() == kBlockPart;
}
inline bool Message::has_block_part() const {
  return _internal_has_block_part();
}
inline void Message::set_has_block_part() {
  _oneof_case_[0] = kBlockPart;
}
inline void Message::clear_block_part() {
  if (_internal_has_block_part()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sum_.block_part_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::consensus::BlockPart* Message::release_block_part() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.Message.block_part)
  if (_internal_has_block_part()) {
    clear_has_sum();
      ::tendermint::consensus::BlockPart* temp = sum_.block_part_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sum_.block_part_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::consensus::BlockPart& Message::_internal_block_part() const {
  return _internal_has_block_part()
      ? *sum_.block_part_
      : reinterpret_cast< ::tendermint::consensus::BlockPart&>(::tendermint::consensus::_BlockPart_default_instance_);
}
inline const ::tendermint::consensus::BlockPart& Message::block_part() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.Message.block_part)
  return _internal_block_part();
}
inline ::tendermint::consensus::BlockPart* Message::unsafe_arena_release_block_part() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.consensus.Message.block_part)
  if (_internal_has_block_part()) {
    clear_has_sum();
    ::tendermint::consensus::BlockPart* temp = sum_.block_part_;
    sum_.block_part_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_block_part(::tendermint::consensus::BlockPart* block_part) {
  clear_sum();
  if (block_part) {
    set_has_block_part();
    sum_.block_part_ = block_part;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.Message.block_part)
}
inline ::tendermint::consensus::BlockPart* Message::_internal_mutable_block_part() {
  if (!_internal_has_block_part()) {
    clear_sum();
    set_has_block_part();
    sum_.block_part_ = CreateMaybeMessage< ::tendermint::consensus::BlockPart >(GetArenaForAllocation());
  }
  return sum_.block_part_;
}
inline ::tendermint::consensus::BlockPart* Message::mutable_block_part() {
  ::tendermint::consensus::BlockPart* _msg = _internal_mutable_block_part();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.Message.block_part)
  return _msg;
}

// .tendermint.consensus.Vote vote = 6;
inline bool Message::_internal_has_vote() const {
  return sum_case() == kVote;
}
inline bool Message::has_vote() const {
  return _internal_has_vote();
}
inline void Message::set_has_vote() {
  _oneof_case_[0] = kVote;
}
inline void Message::clear_vote() {
  if (_internal_has_vote()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sum_.vote_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::consensus::Vote* Message::release_vote() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.Message.vote)
  if (_internal_has_vote()) {
    clear_has_sum();
      ::tendermint::consensus::Vote* temp = sum_.vote_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sum_.vote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::consensus::Vote& Message::_internal_vote() const {
  return _internal_has_vote()
      ? *sum_.vote_
      : reinterpret_cast< ::tendermint::consensus::Vote&>(::tendermint::consensus::_Vote_default_instance_);
}
inline const ::tendermint::consensus::Vote& Message::vote() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.Message.vote)
  return _internal_vote();
}
inline ::tendermint::consensus::Vote* Message::unsafe_arena_release_vote() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.consensus.Message.vote)
  if (_internal_has_vote()) {
    clear_has_sum();
    ::tendermint::consensus::Vote* temp = sum_.vote_;
    sum_.vote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_vote(::tendermint::consensus::Vote* vote) {
  clear_sum();
  if (vote) {
    set_has_vote();
    sum_.vote_ = vote;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.Message.vote)
}
inline ::tendermint::consensus::Vote* Message::_internal_mutable_vote() {
  if (!_internal_has_vote()) {
    clear_sum();
    set_has_vote();
    sum_.vote_ = CreateMaybeMessage< ::tendermint::consensus::Vote >(GetArenaForAllocation());
  }
  return sum_.vote_;
}
inline ::tendermint::consensus::Vote* Message::mutable_vote() {
  ::tendermint::consensus::Vote* _msg = _internal_mutable_vote();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.Message.vote)
  return _msg;
}

// .tendermint.consensus.HasVote has_vote = 7;
inline bool Message::_internal_has_has_vote() const {
  return sum_case() == kHasVote;
}
inline bool Message::has_has_vote() const {
  return _internal_has_has_vote();
}
inline void Message::set_has_has_vote() {
  _oneof_case_[0] = kHasVote;
}
inline void Message::clear_has_vote() {
  if (_internal_has_has_vote()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sum_.has_vote_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::consensus::HasVote* Message::release_has_vote() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.Message.has_vote)
  if (_internal_has_has_vote()) {
    clear_has_sum();
      ::tendermint::consensus::HasVote* temp = sum_.has_vote_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sum_.has_vote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::consensus::HasVote& Message::_internal_has_vote() const {
  return _internal_has_has_vote()
      ? *sum_.has_vote_
      : reinterpret_cast< ::tendermint::consensus::HasVote&>(::tendermint::consensus::_HasVote_default_instance_);
}
inline const ::tendermint::consensus::HasVote& Message::has_vote() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.Message.has_vote)
  return _internal_has_vote();
}
inline ::tendermint::consensus::HasVote* Message::unsafe_arena_release_has_vote() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.consensus.Message.has_vote)
  if (_internal_has_has_vote()) {
    clear_has_sum();
    ::tendermint::consensus::HasVote* temp = sum_.has_vote_;
    sum_.has_vote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_has_vote(::tendermint::consensus::HasVote* has_vote) {
  clear_sum();
  if (has_vote) {
    set_has_has_vote();
    sum_.has_vote_ = has_vote;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.Message.has_vote)
}
inline ::tendermint::consensus::HasVote* Message::_internal_mutable_has_vote() {
  if (!_internal_has_has_vote()) {
    clear_sum();
    set_has_has_vote();
    sum_.has_vote_ = CreateMaybeMessage< ::tendermint::consensus::HasVote >(GetArenaForAllocation());
  }
  return sum_.has_vote_;
}
inline ::tendermint::consensus::HasVote* Message::mutable_has_vote() {
  ::tendermint::consensus::HasVote* _msg = _internal_mutable_has_vote();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.Message.has_vote)
  return _msg;
}

// .tendermint.consensus.VoteSetMaj23 vote_set_maj23 = 8;
inline bool Message::_internal_has_vote_set_maj23() const {
  return sum_case() == kVoteSetMaj23;
}
inline bool Message::has_vote_set_maj23() const {
  return _internal_has_vote_set_maj23();
}
inline void Message::set_has_vote_set_maj23() {
  _oneof_case_[0] = kVoteSetMaj23;
}
inline void Message::clear_vote_set_maj23() {
  if (_internal_has_vote_set_maj23()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sum_.vote_set_maj23_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::consensus::VoteSetMaj23* Message::release_vote_set_maj23() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.Message.vote_set_maj23)
  if (_internal_has_vote_set_maj23()) {
    clear_has_sum();
      ::tendermint::consensus::VoteSetMaj23* temp = sum_.vote_set_maj23_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sum_.vote_set_maj23_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::consensus::VoteSetMaj23& Message::_internal_vote_set_maj23() const {
  return _internal_has_vote_set_maj23()
      ? *sum_.vote_set_maj23_
      : reinterpret_cast< ::tendermint::consensus::VoteSetMaj23&>(::tendermint::consensus::_VoteSetMaj23_default_instance_);
}
inline const ::tendermint::consensus::VoteSetMaj23& Message::vote_set_maj23() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.Message.vote_set_maj23)
  return _internal_vote_set_maj23();
}
inline ::tendermint::consensus::VoteSetMaj23* Message::unsafe_arena_release_vote_set_maj23() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.consensus.Message.vote_set_maj23)
  if (_internal_has_vote_set_maj23()) {
    clear_has_sum();
    ::tendermint::consensus::VoteSetMaj23* temp = sum_.vote_set_maj23_;
    sum_.vote_set_maj23_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_vote_set_maj23(::tendermint::consensus::VoteSetMaj23* vote_set_maj23) {
  clear_sum();
  if (vote_set_maj23) {
    set_has_vote_set_maj23();
    sum_.vote_set_maj23_ = vote_set_maj23;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.Message.vote_set_maj23)
}
inline ::tendermint::consensus::VoteSetMaj23* Message::_internal_mutable_vote_set_maj23() {
  if (!_internal_has_vote_set_maj23()) {
    clear_sum();
    set_has_vote_set_maj23();
    sum_.vote_set_maj23_ = CreateMaybeMessage< ::tendermint::consensus::VoteSetMaj23 >(GetArenaForAllocation());
  }
  return sum_.vote_set_maj23_;
}
inline ::tendermint::consensus::VoteSetMaj23* Message::mutable_vote_set_maj23() {
  ::tendermint::consensus::VoteSetMaj23* _msg = _internal_mutable_vote_set_maj23();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.Message.vote_set_maj23)
  return _msg;
}

// .tendermint.consensus.VoteSetBits vote_set_bits = 9;
inline bool Message::_internal_has_vote_set_bits() const {
  return sum_case() == kVoteSetBits;
}
inline bool Message::has_vote_set_bits() const {
  return _internal_has_vote_set_bits();
}
inline void Message::set_has_vote_set_bits() {
  _oneof_case_[0] = kVoteSetBits;
}
inline void Message::clear_vote_set_bits() {
  if (_internal_has_vote_set_bits()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sum_.vote_set_bits_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::consensus::VoteSetBits* Message::release_vote_set_bits() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.Message.vote_set_bits)
  if (_internal_has_vote_set_bits()) {
    clear_has_sum();
      ::tendermint::consensus::VoteSetBits* temp = sum_.vote_set_bits_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sum_.vote_set_bits_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::consensus::VoteSetBits& Message::_internal_vote_set_bits() const {
  return _internal_has_vote_set_bits()
      ? *sum_.vote_set_bits_
      : reinterpret_cast< ::tendermint::consensus::VoteSetBits&>(::tendermint::consensus::_VoteSetBits_default_instance_);
}
inline const ::tendermint::consensus::VoteSetBits& Message::vote_set_bits() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.Message.vote_set_bits)
  return _internal_vote_set_bits();
}
inline ::tendermint::consensus::VoteSetBits* Message::unsafe_arena_release_vote_set_bits() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.consensus.Message.vote_set_bits)
  if (_internal_has_vote_set_bits()) {
    clear_has_sum();
    ::tendermint::consensus::VoteSetBits* temp = sum_.vote_set_bits_;
    sum_.vote_set_bits_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_vote_set_bits(::tendermint::consensus::VoteSetBits* vote_set_bits) {
  clear_sum();
  if (vote_set_bits) {
    set_has_vote_set_bits();
    sum_.vote_set_bits_ = vote_set_bits;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.Message.vote_set_bits)
}
inline ::tendermint::consensus::VoteSetBits* Message::_internal_mutable_vote_set_bits() {
  if (!_internal_has_vote_set_bits()) {
    clear_sum();
    set_has_vote_set_bits();
    sum_.vote_set_bits_ = CreateMaybeMessage< ::tendermint::consensus::VoteSetBits >(GetArenaForAllocation());
  }
  return sum_.vote_set_bits_;
}
inline ::tendermint::consensus::VoteSetBits* Message::mutable_vote_set_bits() {
  ::tendermint::consensus::VoteSetBits* _msg = _internal_mutable_vote_set_bits();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.Message.vote_set_bits)
  return _msg;
}

inline bool Message::has_sum() const {
  return sum_case() != SUM_NOT_SET;
}
inline void Message::clear_has_sum() {
  _oneof_case_[0] = SUM_NOT_SET;
}
inline Message::SumCase Message::sum_case() const {
  return Message::SumCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace consensus
}  // namespace tendermint

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tendermint_2fconsensus_2ftypes_2eproto
