// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/consensus/wal.proto

#include "tendermint/consensus/wal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tendermint {
namespace consensus {
constexpr MsgInfo::MsgInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : peer_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_(nullptr){}
struct MsgInfoDefaultTypeInternal {
  constexpr MsgInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgInfoDefaultTypeInternal() {}
  union {
    MsgInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgInfoDefaultTypeInternal _MsgInfo_default_instance_;
constexpr TimeoutInfo::TimeoutInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : duration_(nullptr)
  , height_(int64_t{0})
  , round_(0)
  , step_(0u){}
struct TimeoutInfoDefaultTypeInternal {
  constexpr TimeoutInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimeoutInfoDefaultTypeInternal() {}
  union {
    TimeoutInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeoutInfoDefaultTypeInternal _TimeoutInfo_default_instance_;
constexpr EndHeight::EndHeight(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(int64_t{0}){}
struct EndHeightDefaultTypeInternal {
  constexpr EndHeightDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EndHeightDefaultTypeInternal() {}
  union {
    EndHeight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EndHeightDefaultTypeInternal _EndHeight_default_instance_;
constexpr WALMessage::WALMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct WALMessageDefaultTypeInternal {
  constexpr WALMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WALMessageDefaultTypeInternal() {}
  union {
    WALMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WALMessageDefaultTypeInternal _WALMessage_default_instance_;
constexpr TimedWALMessage::TimedWALMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(nullptr)
  , msg_(nullptr){}
struct TimedWALMessageDefaultTypeInternal {
  constexpr TimedWALMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimedWALMessageDefaultTypeInternal() {}
  union {
    TimedWALMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimedWALMessageDefaultTypeInternal _TimedWALMessage_default_instance_;
}  // namespace consensus
}  // namespace tendermint
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tendermint_2fconsensus_2fwal_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tendermint_2fconsensus_2fwal_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tendermint_2fconsensus_2fwal_2eproto = nullptr;

const uint32_t TableStruct_tendermint_2fconsensus_2fwal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::MsgInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::MsgInfo, msg_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::MsgInfo, peer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::TimeoutInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::TimeoutInfo, duration_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::TimeoutInfo, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::TimeoutInfo, round_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::TimeoutInfo, step_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::EndHeight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::EndHeight, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::WALMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::WALMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::WALMessage, sum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::TimedWALMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::TimedWALMessage, time_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::TimedWALMessage, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tendermint::consensus::MsgInfo)},
  { 8, -1, -1, sizeof(::tendermint::consensus::TimeoutInfo)},
  { 18, -1, -1, sizeof(::tendermint::consensus::EndHeight)},
  { 25, -1, -1, sizeof(::tendermint::consensus::WALMessage)},
  { 36, -1, -1, sizeof(::tendermint::consensus::TimedWALMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::consensus::_MsgInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::consensus::_TimeoutInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::consensus::_EndHeight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::consensus::_WALMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::consensus::_TimedWALMessage_default_instance_),
};

const char descriptor_table_protodef_tendermint_2fconsensus_2fwal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036tendermint/consensus/wal.proto\022\024tender"
  "mint.consensus\032\024gogoproto/gogo.proto\032 te"
  "ndermint/consensus/types.proto\032\035tendermi"
  "nt/types/events.proto\032\036google/protobuf/d"
  "uration.proto\032\037google/protobuf/timestamp"
  ".proto\"X\n\007MsgInfo\0220\n\003msg\030\001 \001(\0132\035.tenderm"
  "int.consensus.MessageB\004\310\336\037\000\022\033\n\007peer_id\030\002"
  " \001(\tB\n\342\336\037\006PeerID\"q\n\013TimeoutInfo\0225\n\010durat"
  "ion\030\001 \001(\0132\031.google.protobuf.DurationB\010\310\336"
  "\037\000\230\337\037\001\022\016\n\006height\030\002 \001(\003\022\r\n\005round\030\003 \001(\005\022\014\n"
  "\004step\030\004 \001(\r\"\033\n\tEndHeight\022\016\n\006height\030\001 \001(\003"
  "\"\201\002\n\nWALMessage\022G\n\026event_data_round_stat"
  "e\030\001 \001(\0132%.tendermint.types.EventDataRoun"
  "dStateH\000\0221\n\010msg_info\030\002 \001(\0132\035.tendermint."
  "consensus.MsgInfoH\000\0229\n\014timeout_info\030\003 \001("
  "\0132!.tendermint.consensus.TimeoutInfoH\000\0225"
  "\n\nend_height\030\004 \001(\0132\037.tendermint.consensu"
  "s.EndHeightH\000B\005\n\003sum\"t\n\017TimedWALMessage\022"
  "2\n\004time\030\001 \001(\0132\032.google.protobuf.Timestam"
  "pB\010\310\336\037\000\220\337\037\001\022-\n\003msg\030\002 \001(\0132 .tendermint.co"
  "nsensus.WALMessageB=Z;github.com/tenderm"
  "int/tendermint/proto/tendermint/consensu"
  "sb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tendermint_2fconsensus_2fwal_2eproto_deps[5] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_tendermint_2fconsensus_2ftypes_2eproto,
  &::descriptor_table_tendermint_2ftypes_2fevents_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tendermint_2fconsensus_2fwal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2fconsensus_2fwal_2eproto = {
  false, false, 889, descriptor_table_protodef_tendermint_2fconsensus_2fwal_2eproto, "tendermint/consensus/wal.proto", 
  &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_once, descriptor_table_tendermint_2fconsensus_2fwal_2eproto_deps, 5, 5,
  schemas, file_default_instances, TableStruct_tendermint_2fconsensus_2fwal_2eproto::offsets,
  file_level_metadata_tendermint_2fconsensus_2fwal_2eproto, file_level_enum_descriptors_tendermint_2fconsensus_2fwal_2eproto, file_level_service_descriptors_tendermint_2fconsensus_2fwal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tendermint_2fconsensus_2fwal_2eproto_getter() {
  return &descriptor_table_tendermint_2fconsensus_2fwal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tendermint_2fconsensus_2fwal_2eproto(&descriptor_table_tendermint_2fconsensus_2fwal_2eproto);
namespace tendermint {
namespace consensus {

// ===================================================================

class MsgInfo::_Internal {
 public:
  static const ::tendermint::consensus::Message& msg(const MsgInfo* msg);
};

const ::tendermint::consensus::Message&
MsgInfo::_Internal::msg(const MsgInfo* msg) {
  return *msg->msg_;
}
void MsgInfo::clear_msg() {
  if (GetArenaForAllocation() == nullptr && msg_ != nullptr) {
    delete msg_;
  }
  msg_ = nullptr;
}
MsgInfo::MsgInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.MsgInfo)
}
MsgInfo::MsgInfo(const MsgInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  peer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    peer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_peer_id().empty()) {
    peer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_peer_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_msg()) {
    msg_ = new ::tendermint::consensus::Message(*from.msg_);
  } else {
    msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.MsgInfo)
}

inline void MsgInfo::SharedCtor() {
peer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  peer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
msg_ = nullptr;
}

MsgInfo::~MsgInfo() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.MsgInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MsgInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  peer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete msg_;
}

void MsgInfo::ArenaDtor(void* object) {
  MsgInfo* _this = reinterpret_cast< MsgInfo* >(object);
  (void)_this;
}
void MsgInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MsgInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.MsgInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peer_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && msg_ != nullptr) {
    delete msg_;
  }
  msg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.consensus.Message msg = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string peer_id = 2 [(.gogoproto.customname) = "PeerID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_peer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.consensus.MsgInfo.peer_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.MsgInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.consensus.Message msg = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg(this), target, stream);
  }

  // string peer_id = 2 [(.gogoproto.customname) = "PeerID"];
  if (!this->_internal_peer_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_id().data(), static_cast<int>(this->_internal_peer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.consensus.MsgInfo.peer_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_peer_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.MsgInfo)
  return target;
}

size_t MsgInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.MsgInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string peer_id = 2 [(.gogoproto.customname) = "PeerID"];
  if (!this->_internal_peer_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_id());
  }

  // .tendermint.consensus.Message msg = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MsgInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgInfo::GetClassData() const { return &_class_data_; }

void MsgInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MsgInfo *>(to)->MergeFrom(
      static_cast<const MsgInfo &>(from));
}


void MsgInfo::MergeFrom(const MsgInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.MsgInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_peer_id().empty()) {
    _internal_set_peer_id(from._internal_peer_id());
  }
  if (from._internal_has_msg()) {
    _internal_mutable_msg()->::tendermint::consensus::Message::MergeFrom(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgInfo::CopyFrom(const MsgInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.MsgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInfo::IsInitialized() const {
  return true;
}

void MsgInfo::InternalSwap(MsgInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &peer_id_, lhs_arena,
      &other->peer_id_, rhs_arena
  );
  swap(msg_, other->msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2fwal_2eproto[0]);
}

// ===================================================================

class TimeoutInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration(const TimeoutInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
TimeoutInfo::_Internal::duration(const TimeoutInfo* msg) {
  return *msg->duration_;
}
void TimeoutInfo::clear_duration() {
  if (GetArenaForAllocation() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
TimeoutInfo::TimeoutInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.TimeoutInfo)
}
TimeoutInfo::TimeoutInfo(const TimeoutInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_duration()) {
    duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&height_)) + sizeof(step_));
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.TimeoutInfo)
}

inline void TimeoutInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&duration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(step_));
}

TimeoutInfo::~TimeoutInfo() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.TimeoutInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TimeoutInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete duration_;
}

void TimeoutInfo::ArenaDtor(void* object) {
  TimeoutInfo* _this = reinterpret_cast< TimeoutInfo* >(object);
  (void)_this;
}
void TimeoutInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeoutInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimeoutInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.TimeoutInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&height_)) + sizeof(step_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeoutInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration duration = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 round = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 step = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeoutInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.TimeoutInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration duration = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (this->_internal_has_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::duration(this), target, stream);
  }

  // int64 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_height(), target);
  }

  // int32 round = 3;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_round(), target);
  }

  // uint32 step = 4;
  if (this->_internal_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_step(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.TimeoutInfo)
  return target;
}

size_t TimeoutInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.TimeoutInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration duration = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (this->_internal_has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // int64 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // int32 round = 3;
  if (this->_internal_round() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_round());
  }

  // uint32 step = 4;
  if (this->_internal_step() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_step());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeoutInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TimeoutInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeoutInfo::GetClassData() const { return &_class_data_; }

void TimeoutInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TimeoutInfo *>(to)->MergeFrom(
      static_cast<const TimeoutInfo &>(from));
}


void TimeoutInfo::MergeFrom(const TimeoutInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.TimeoutInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_duration()) {
    _internal_mutable_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_duration());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _internal_set_round(from._internal_round());
  }
  if (from._internal_step() != 0) {
    _internal_set_step(from._internal_step());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeoutInfo::CopyFrom(const TimeoutInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.TimeoutInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeoutInfo::IsInitialized() const {
  return true;
}

void TimeoutInfo::InternalSwap(TimeoutInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeoutInfo, step_)
      + sizeof(TimeoutInfo::step_)
      - PROTOBUF_FIELD_OFFSET(TimeoutInfo, duration_)>(
          reinterpret_cast<char*>(&duration_),
          reinterpret_cast<char*>(&other->duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeoutInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2fwal_2eproto[1]);
}

// ===================================================================

class EndHeight::_Internal {
 public:
};

EndHeight::EndHeight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.EndHeight)
}
EndHeight::EndHeight(const EndHeight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.EndHeight)
}

inline void EndHeight::SharedCtor() {
height_ = int64_t{0};
}

EndHeight::~EndHeight() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.EndHeight)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EndHeight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EndHeight::ArenaDtor(void* object) {
  EndHeight* _this = reinterpret_cast< EndHeight* >(object);
  (void)_this;
}
void EndHeight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndHeight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EndHeight::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.EndHeight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  height_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndHeight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EndHeight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.EndHeight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.EndHeight)
  return target;
}

size_t EndHeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.EndHeight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndHeight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EndHeight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndHeight::GetClassData() const { return &_class_data_; }

void EndHeight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EndHeight *>(to)->MergeFrom(
      static_cast<const EndHeight &>(from));
}


void EndHeight::MergeFrom(const EndHeight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.EndHeight)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EndHeight::CopyFrom(const EndHeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.EndHeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndHeight::IsInitialized() const {
  return true;
}

void EndHeight::InternalSwap(EndHeight* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndHeight::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2fwal_2eproto[2]);
}

// ===================================================================

class WALMessage::_Internal {
 public:
  static const ::tendermint::types::EventDataRoundState& event_data_round_state(const WALMessage* msg);
  static const ::tendermint::consensus::MsgInfo& msg_info(const WALMessage* msg);
  static const ::tendermint::consensus::TimeoutInfo& timeout_info(const WALMessage* msg);
  static const ::tendermint::consensus::EndHeight& end_height(const WALMessage* msg);
};

const ::tendermint::types::EventDataRoundState&
WALMessage::_Internal::event_data_round_state(const WALMessage* msg) {
  return *msg->sum_.event_data_round_state_;
}
const ::tendermint::consensus::MsgInfo&
WALMessage::_Internal::msg_info(const WALMessage* msg) {
  return *msg->sum_.msg_info_;
}
const ::tendermint::consensus::TimeoutInfo&
WALMessage::_Internal::timeout_info(const WALMessage* msg) {
  return *msg->sum_.timeout_info_;
}
const ::tendermint::consensus::EndHeight&
WALMessage::_Internal::end_height(const WALMessage* msg) {
  return *msg->sum_.end_height_;
}
void WALMessage::set_allocated_event_data_round_state(::tendermint::types::EventDataRoundState* event_data_round_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (event_data_round_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_data_round_state));
    if (message_arena != submessage_arena) {
      event_data_round_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_data_round_state, submessage_arena);
    }
    set_has_event_data_round_state();
    sum_.event_data_round_state_ = event_data_round_state;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.WALMessage.event_data_round_state)
}
void WALMessage::clear_event_data_round_state() {
  if (_internal_has_event_data_round_state()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sum_.event_data_round_state_;
    }
    clear_has_sum();
  }
}
void WALMessage::set_allocated_msg_info(::tendermint::consensus::MsgInfo* msg_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (msg_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::consensus::MsgInfo>::GetOwningArena(msg_info);
    if (message_arena != submessage_arena) {
      msg_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_info, submessage_arena);
    }
    set_has_msg_info();
    sum_.msg_info_ = msg_info;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.WALMessage.msg_info)
}
void WALMessage::set_allocated_timeout_info(::tendermint::consensus::TimeoutInfo* timeout_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (timeout_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::consensus::TimeoutInfo>::GetOwningArena(timeout_info);
    if (message_arena != submessage_arena) {
      timeout_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeout_info, submessage_arena);
    }
    set_has_timeout_info();
    sum_.timeout_info_ = timeout_info;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.WALMessage.timeout_info)
}
void WALMessage::set_allocated_end_height(::tendermint::consensus::EndHeight* end_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (end_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::consensus::EndHeight>::GetOwningArena(end_height);
    if (message_arena != submessage_arena) {
      end_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_height, submessage_arena);
    }
    set_has_end_height();
    sum_.end_height_ = end_height;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.WALMessage.end_height)
}
WALMessage::WALMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.WALMessage)
}
WALMessage::WALMessage(const WALMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_sum();
  switch (from.sum_case()) {
    case kEventDataRoundState: {
      _internal_mutable_event_data_round_state()->::tendermint::types::EventDataRoundState::MergeFrom(from._internal_event_data_round_state());
      break;
    }
    case kMsgInfo: {
      _internal_mutable_msg_info()->::tendermint::consensus::MsgInfo::MergeFrom(from._internal_msg_info());
      break;
    }
    case kTimeoutInfo: {
      _internal_mutable_timeout_info()->::tendermint::consensus::TimeoutInfo::MergeFrom(from._internal_timeout_info());
      break;
    }
    case kEndHeight: {
      _internal_mutable_end_height()->::tendermint::consensus::EndHeight::MergeFrom(from._internal_end_height());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.WALMessage)
}

inline void WALMessage::SharedCtor() {
clear_has_sum();
}

WALMessage::~WALMessage() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.WALMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WALMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_sum()) {
    clear_sum();
  }
}

void WALMessage::ArenaDtor(void* object) {
  WALMessage* _this = reinterpret_cast< WALMessage* >(object);
  (void)_this;
}
void WALMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WALMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WALMessage::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:tendermint.consensus.WALMessage)
  switch (sum_case()) {
    case kEventDataRoundState: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.event_data_round_state_;
      }
      break;
    }
    case kMsgInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.msg_info_;
      }
      break;
    }
    case kTimeoutInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.timeout_info_;
      }
      break;
    }
    case kEndHeight: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.end_height_;
      }
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SUM_NOT_SET;
}


void WALMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.WALMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WALMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.EventDataRoundState event_data_round_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_data_round_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.consensus.MsgInfo msg_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.consensus.TimeoutInfo timeout_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeout_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.consensus.EndHeight end_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_height(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WALMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.WALMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.EventDataRoundState event_data_round_state = 1;
  if (_internal_has_event_data_round_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::event_data_round_state(this), target, stream);
  }

  // .tendermint.consensus.MsgInfo msg_info = 2;
  if (_internal_has_msg_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg_info(this), target, stream);
  }

  // .tendermint.consensus.TimeoutInfo timeout_info = 3;
  if (_internal_has_timeout_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timeout_info(this), target, stream);
  }

  // .tendermint.consensus.EndHeight end_height = 4;
  if (_internal_has_end_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::end_height(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.WALMessage)
  return target;
}

size_t WALMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.WALMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sum_case()) {
    // .tendermint.types.EventDataRoundState event_data_round_state = 1;
    case kEventDataRoundState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.event_data_round_state_);
      break;
    }
    // .tendermint.consensus.MsgInfo msg_info = 2;
    case kMsgInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.msg_info_);
      break;
    }
    // .tendermint.consensus.TimeoutInfo timeout_info = 3;
    case kTimeoutInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.timeout_info_);
      break;
    }
    // .tendermint.consensus.EndHeight end_height = 4;
    case kEndHeight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.end_height_);
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WALMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WALMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WALMessage::GetClassData() const { return &_class_data_; }

void WALMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WALMessage *>(to)->MergeFrom(
      static_cast<const WALMessage &>(from));
}


void WALMessage::MergeFrom(const WALMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.WALMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sum_case()) {
    case kEventDataRoundState: {
      _internal_mutable_event_data_round_state()->::tendermint::types::EventDataRoundState::MergeFrom(from._internal_event_data_round_state());
      break;
    }
    case kMsgInfo: {
      _internal_mutable_msg_info()->::tendermint::consensus::MsgInfo::MergeFrom(from._internal_msg_info());
      break;
    }
    case kTimeoutInfo: {
      _internal_mutable_timeout_info()->::tendermint::consensus::TimeoutInfo::MergeFrom(from._internal_timeout_info());
      break;
    }
    case kEndHeight: {
      _internal_mutable_end_height()->::tendermint::consensus::EndHeight::MergeFrom(from._internal_end_height());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WALMessage::CopyFrom(const WALMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.WALMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WALMessage::IsInitialized() const {
  return true;
}

void WALMessage::InternalSwap(WALMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(sum_, other->sum_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WALMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2fwal_2eproto[3]);
}

// ===================================================================

class TimedWALMessage::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const TimedWALMessage* msg);
  static const ::tendermint::consensus::WALMessage& msg(const TimedWALMessage* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TimedWALMessage::_Internal::time(const TimedWALMessage* msg) {
  return *msg->time_;
}
const ::tendermint::consensus::WALMessage&
TimedWALMessage::_Internal::msg(const TimedWALMessage* msg) {
  return *msg->msg_;
}
void TimedWALMessage::clear_time() {
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
TimedWALMessage::TimedWALMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.TimedWALMessage)
}
TimedWALMessage::TimedWALMessage(const TimedWALMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time()) {
    time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from._internal_has_msg()) {
    msg_ = new ::tendermint::consensus::WALMessage(*from.msg_);
  } else {
    msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.TimedWALMessage)
}

inline void TimedWALMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg_) -
    reinterpret_cast<char*>(&time_)) + sizeof(msg_));
}

TimedWALMessage::~TimedWALMessage() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.TimedWALMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TimedWALMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete msg_;
}

void TimedWALMessage::ArenaDtor(void* object) {
  TimedWALMessage* _this = reinterpret_cast< TimedWALMessage* >(object);
  (void)_this;
}
void TimedWALMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimedWALMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimedWALMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.TimedWALMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && msg_ != nullptr) {
    delete msg_;
  }
  msg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimedWALMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.consensus.WALMessage msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimedWALMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.TimedWALMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time(this), target, stream);
  }

  // .tendermint.consensus.WALMessage msg = 2;
  if (this->_internal_has_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.TimedWALMessage)
  return target;
}

size_t TimedWALMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.TimedWALMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .tendermint.consensus.WALMessage msg = 2;
  if (this->_internal_has_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimedWALMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TimedWALMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimedWALMessage::GetClassData() const { return &_class_data_; }

void TimedWALMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TimedWALMessage *>(to)->MergeFrom(
      static_cast<const TimedWALMessage &>(from));
}


void TimedWALMessage::MergeFrom(const TimedWALMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.TimedWALMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time()) {
    _internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from._internal_has_msg()) {
    _internal_mutable_msg()->::tendermint::consensus::WALMessage::MergeFrom(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimedWALMessage::CopyFrom(const TimedWALMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.TimedWALMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedWALMessage::IsInitialized() const {
  return true;
}

void TimedWALMessage::InternalSwap(TimedWALMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimedWALMessage, msg_)
      + sizeof(TimedWALMessage::msg_)
      - PROTOBUF_FIELD_OFFSET(TimedWALMessage, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimedWALMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2fwal_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace consensus
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::consensus::MsgInfo* Arena::CreateMaybeMessage< ::tendermint::consensus::MsgInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::MsgInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::TimeoutInfo* Arena::CreateMaybeMessage< ::tendermint::consensus::TimeoutInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::TimeoutInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::EndHeight* Arena::CreateMaybeMessage< ::tendermint::consensus::EndHeight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::EndHeight >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::WALMessage* Arena::CreateMaybeMessage< ::tendermint::consensus::WALMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::WALMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::TimedWALMessage* Arena::CreateMaybeMessage< ::tendermint::consensus::TimedWALMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::TimedWALMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
