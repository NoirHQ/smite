// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/consensus/types.proto

#include "tendermint/consensus/types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tendermint {
namespace consensus {
constexpr NewRoundStep::NewRoundStep(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(int64_t{0})
  , round_(0)
  , step_(0u)
  , seconds_since_start_time_(int64_t{0})
  , last_commit_round_(0){}
struct NewRoundStepDefaultTypeInternal {
  constexpr NewRoundStepDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NewRoundStepDefaultTypeInternal() {}
  union {
    NewRoundStep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NewRoundStepDefaultTypeInternal _NewRoundStep_default_instance_;
constexpr NewValidBlock::NewValidBlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_part_set_header_(nullptr)
  , block_parts_(nullptr)
  , height_(int64_t{0})
  , round_(0)
  , is_commit_(false){}
struct NewValidBlockDefaultTypeInternal {
  constexpr NewValidBlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NewValidBlockDefaultTypeInternal() {}
  union {
    NewValidBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NewValidBlockDefaultTypeInternal _NewValidBlock_default_instance_;
constexpr Proposal::Proposal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : proposal_(nullptr){}
struct ProposalDefaultTypeInternal {
  constexpr ProposalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProposalDefaultTypeInternal() {}
  union {
    Proposal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProposalDefaultTypeInternal _Proposal_default_instance_;
constexpr ProposalPOL::ProposalPOL(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : proposal_pol_(nullptr)
  , height_(int64_t{0})
  , proposal_pol_round_(0){}
struct ProposalPOLDefaultTypeInternal {
  constexpr ProposalPOLDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProposalPOLDefaultTypeInternal() {}
  union {
    ProposalPOL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProposalPOLDefaultTypeInternal _ProposalPOL_default_instance_;
constexpr BlockPart::BlockPart(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : part_(nullptr)
  , height_(int64_t{0})
  , round_(0){}
struct BlockPartDefaultTypeInternal {
  constexpr BlockPartDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockPartDefaultTypeInternal() {}
  union {
    BlockPart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockPartDefaultTypeInternal _BlockPart_default_instance_;
constexpr Vote::Vote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vote_(nullptr){}
struct VoteDefaultTypeInternal {
  constexpr VoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoteDefaultTypeInternal() {}
  union {
    Vote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoteDefaultTypeInternal _Vote_default_instance_;
constexpr HasVote::HasVote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(int64_t{0})
  , round_(0)
  , type_(0)

  , index_(0){}
struct HasVoteDefaultTypeInternal {
  constexpr HasVoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HasVoteDefaultTypeInternal() {}
  union {
    HasVote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HasVoteDefaultTypeInternal _HasVote_default_instance_;
constexpr VoteSetMaj23::VoteSetMaj23(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_id_(nullptr)
  , height_(int64_t{0})
  , round_(0)
  , type_(0)
{}
struct VoteSetMaj23DefaultTypeInternal {
  constexpr VoteSetMaj23DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoteSetMaj23DefaultTypeInternal() {}
  union {
    VoteSetMaj23 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoteSetMaj23DefaultTypeInternal _VoteSetMaj23_default_instance_;
constexpr VoteSetBits::VoteSetBits(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_id_(nullptr)
  , votes_(nullptr)
  , height_(int64_t{0})
  , round_(0)
  , type_(0)
{}
struct VoteSetBitsDefaultTypeInternal {
  constexpr VoteSetBitsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoteSetBitsDefaultTypeInternal() {}
  union {
    VoteSetBits _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoteSetBitsDefaultTypeInternal _VoteSetBits_default_instance_;
constexpr Message::Message(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct MessageDefaultTypeInternal {
  constexpr MessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace consensus
}  // namespace tendermint
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tendermint_2fconsensus_2ftypes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tendermint_2fconsensus_2ftypes_2eproto = nullptr;

const uint32_t TableStruct_tendermint_2fconsensus_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewRoundStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewRoundStep, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewRoundStep, round_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewRoundStep, step_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewRoundStep, seconds_since_start_time_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewRoundStep, last_commit_round_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewValidBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewValidBlock, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewValidBlock, round_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewValidBlock, block_part_set_header_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewValidBlock, block_parts_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewValidBlock, is_commit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::Proposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::Proposal, proposal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::ProposalPOL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::ProposalPOL, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::ProposalPOL, proposal_pol_round_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::ProposalPOL, proposal_pol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::BlockPart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::BlockPart, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::BlockPart, round_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::BlockPart, part_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::Vote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::Vote, vote_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::HasVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::HasVote, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::HasVote, round_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::HasVote, type_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::HasVote, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetMaj23, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetMaj23, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetMaj23, round_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetMaj23, type_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetMaj23, block_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetBits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetBits, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetBits, round_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetBits, type_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetBits, block_id_),
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetBits, votes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::Message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tendermint::consensus::Message, sum_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tendermint::consensus::NewRoundStep)},
  { 11, -1, -1, sizeof(::tendermint::consensus::NewValidBlock)},
  { 22, -1, -1, sizeof(::tendermint::consensus::Proposal)},
  { 29, -1, -1, sizeof(::tendermint::consensus::ProposalPOL)},
  { 38, -1, -1, sizeof(::tendermint::consensus::BlockPart)},
  { 47, -1, -1, sizeof(::tendermint::consensus::Vote)},
  { 54, -1, -1, sizeof(::tendermint::consensus::HasVote)},
  { 64, -1, -1, sizeof(::tendermint::consensus::VoteSetMaj23)},
  { 74, -1, -1, sizeof(::tendermint::consensus::VoteSetBits)},
  { 85, -1, -1, sizeof(::tendermint::consensus::Message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::consensus::_NewRoundStep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::consensus::_NewValidBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::consensus::_Proposal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::consensus::_ProposalPOL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::consensus::_BlockPart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::consensus::_Vote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::consensus::_HasVote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::consensus::_VoteSetMaj23_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::consensus::_VoteSetBits_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::consensus::_Message_default_instance_),
};

const char descriptor_table_protodef_tendermint_2fconsensus_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n tendermint/consensus/types.proto\022\024tend"
  "ermint.consensus\032\024gogoproto/gogo.proto\032\034"
  "tendermint/types/types.proto\032 tendermint"
  "/libs/bits/types.proto\"x\n\014NewRoundStep\022\016"
  "\n\006height\030\001 \001(\003\022\r\n\005round\030\002 \001(\005\022\014\n\004step\030\003 "
  "\001(\r\022 \n\030seconds_since_start_time\030\004 \001(\003\022\031\n"
  "\021last_commit_round\030\005 \001(\005\"\274\001\n\rNewValidBlo"
  "ck\022\016\n\006height\030\001 \001(\003\022\r\n\005round\030\002 \001(\005\022D\n\025blo"
  "ck_part_set_header\030\003 \001(\0132\037.tendermint.ty"
  "pes.PartSetHeaderB\004\310\336\037\000\0223\n\013block_parts\030\004"
  " \001(\0132\036.tendermint.libs.bits.BitArray\022\021\n\t"
  "is_commit\030\005 \001(\010\">\n\010Proposal\0222\n\010proposal\030"
  "\001 \001(\0132\032.tendermint.types.ProposalB\004\310\336\037\000\""
  "u\n\013ProposalPOL\022\016\n\006height\030\001 \001(\003\022\032\n\022propos"
  "al_pol_round\030\002 \001(\005\022:\n\014proposal_pol\030\003 \001(\013"
  "2\036.tendermint.libs.bits.BitArrayB\004\310\336\037\000\"V"
  "\n\tBlockPart\022\016\n\006height\030\001 \001(\003\022\r\n\005round\030\002 \001"
  "(\005\022*\n\004part\030\003 \001(\0132\026.tendermint.types.Part"
  "B\004\310\336\037\000\",\n\004Vote\022$\n\004vote\030\001 \001(\0132\026.tendermin"
  "t.types.Vote\"f\n\007HasVote\022\016\n\006height\030\001 \001(\003\022"
  "\r\n\005round\030\002 \001(\005\022-\n\004type\030\003 \001(\0162\037.tendermin"
  "t.types.SignedMsgType\022\r\n\005index\030\004 \001(\005\"\232\001\n"
  "\014VoteSetMaj23\022\016\n\006height\030\001 \001(\003\022\r\n\005round\030\002"
  " \001(\005\022-\n\004type\030\003 \001(\0162\037.tendermint.types.Si"
  "gnedMsgType\022<\n\010block_id\030\004 \001(\0132\031.tendermi"
  "nt.types.BlockIDB\017\342\336\037\007BlockID\310\336\037\000\"\316\001\n\013Vo"
  "teSetBits\022\016\n\006height\030\001 \001(\003\022\r\n\005round\030\002 \001(\005"
  "\022-\n\004type\030\003 \001(\0162\037.tendermint.types.Signed"
  "MsgType\022<\n\010block_id\030\004 \001(\0132\031.tendermint.t"
  "ypes.BlockIDB\017\342\336\037\007BlockID\310\336\037\000\0223\n\005votes\030\005"
  " \001(\0132\036.tendermint.libs.bits.BitArrayB\004\310\336"
  "\037\000\"\215\004\n\007Message\022<\n\016new_round_step\030\001 \001(\0132\""
  ".tendermint.consensus.NewRoundStepH\000\022>\n\017"
  "new_valid_block\030\002 \001(\0132#.tendermint.conse"
  "nsus.NewValidBlockH\000\0222\n\010proposal\030\003 \001(\0132\036"
  ".tendermint.consensus.ProposalH\000\0229\n\014prop"
  "osal_pol\030\004 \001(\0132!.tendermint.consensus.Pr"
  "oposalPOLH\000\0225\n\nblock_part\030\005 \001(\0132\037.tender"
  "mint.consensus.BlockPartH\000\022*\n\004vote\030\006 \001(\013"
  "2\032.tendermint.consensus.VoteH\000\0221\n\010has_vo"
  "te\030\007 \001(\0132\035.tendermint.consensus.HasVoteH"
  "\000\022<\n\016vote_set_maj23\030\010 \001(\0132\".tendermint.c"
  "onsensus.VoteSetMaj23H\000\022:\n\rvote_set_bits"
  "\030\t \001(\0132!.tendermint.consensus.VoteSetBit"
  "sH\000B\005\n\003sumB=Z;github.com/tendermint/tend"
  "ermint/proto/tendermint/consensusb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_deps[3] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_tendermint_2flibs_2fbits_2ftypes_2eproto,
  &::descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2fconsensus_2ftypes_2eproto = {
  false, false, 1841, descriptor_table_protodef_tendermint_2fconsensus_2ftypes_2eproto, "tendermint/consensus/types.proto", 
  &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once, descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_deps, 3, 10,
  schemas, file_default_instances, TableStruct_tendermint_2fconsensus_2ftypes_2eproto::offsets,
  file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto, file_level_enum_descriptors_tendermint_2fconsensus_2ftypes_2eproto, file_level_service_descriptors_tendermint_2fconsensus_2ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter() {
  return &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tendermint_2fconsensus_2ftypes_2eproto(&descriptor_table_tendermint_2fconsensus_2ftypes_2eproto);
namespace tendermint {
namespace consensus {

// ===================================================================

class NewRoundStep::_Internal {
 public:
};

NewRoundStep::NewRoundStep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.NewRoundStep)
}
NewRoundStep::NewRoundStep(const NewRoundStep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_commit_round_) -
    reinterpret_cast<char*>(&height_)) + sizeof(last_commit_round_));
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.NewRoundStep)
}

inline void NewRoundStep::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_commit_round_) -
    reinterpret_cast<char*>(&height_)) + sizeof(last_commit_round_));
}

NewRoundStep::~NewRoundStep() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.NewRoundStep)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NewRoundStep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NewRoundStep::ArenaDtor(void* object) {
  NewRoundStep* _this = reinterpret_cast< NewRoundStep* >(object);
  (void)_this;
}
void NewRoundStep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewRoundStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewRoundStep::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.NewRoundStep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_commit_round_) -
      reinterpret_cast<char*>(&height_)) + sizeof(last_commit_round_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewRoundStep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 round = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 step = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 seconds_since_start_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          seconds_since_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 last_commit_round = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          last_commit_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewRoundStep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.NewRoundStep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_height(), target);
  }

  // int32 round = 2;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_round(), target);
  }

  // uint32 step = 3;
  if (this->_internal_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_step(), target);
  }

  // int64 seconds_since_start_time = 4;
  if (this->_internal_seconds_since_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_seconds_since_start_time(), target);
  }

  // int32 last_commit_round = 5;
  if (this->_internal_last_commit_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_last_commit_round(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.NewRoundStep)
  return target;
}

size_t NewRoundStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.NewRoundStep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // int32 round = 2;
  if (this->_internal_round() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_round());
  }

  // uint32 step = 3;
  if (this->_internal_step() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_step());
  }

  // int64 seconds_since_start_time = 4;
  if (this->_internal_seconds_since_start_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seconds_since_start_time());
  }

  // int32 last_commit_round = 5;
  if (this->_internal_last_commit_round() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_last_commit_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewRoundStep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NewRoundStep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewRoundStep::GetClassData() const { return &_class_data_; }

void NewRoundStep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NewRoundStep *>(to)->MergeFrom(
      static_cast<const NewRoundStep &>(from));
}


void NewRoundStep::MergeFrom(const NewRoundStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.NewRoundStep)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _internal_set_round(from._internal_round());
  }
  if (from._internal_step() != 0) {
    _internal_set_step(from._internal_step());
  }
  if (from._internal_seconds_since_start_time() != 0) {
    _internal_set_seconds_since_start_time(from._internal_seconds_since_start_time());
  }
  if (from._internal_last_commit_round() != 0) {
    _internal_set_last_commit_round(from._internal_last_commit_round());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewRoundStep::CopyFrom(const NewRoundStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.NewRoundStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewRoundStep::IsInitialized() const {
  return true;
}

void NewRoundStep::InternalSwap(NewRoundStep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewRoundStep, last_commit_round_)
      + sizeof(NewRoundStep::last_commit_round_)
      - PROTOBUF_FIELD_OFFSET(NewRoundStep, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewRoundStep::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[0]);
}

// ===================================================================

class NewValidBlock::_Internal {
 public:
  static const ::tendermint::types::PartSetHeader& block_part_set_header(const NewValidBlock* msg);
  static const ::tendermint::libs::bits::BitArray& block_parts(const NewValidBlock* msg);
};

const ::tendermint::types::PartSetHeader&
NewValidBlock::_Internal::block_part_set_header(const NewValidBlock* msg) {
  return *msg->block_part_set_header_;
}
const ::tendermint::libs::bits::BitArray&
NewValidBlock::_Internal::block_parts(const NewValidBlock* msg) {
  return *msg->block_parts_;
}
void NewValidBlock::clear_block_part_set_header() {
  if (GetArenaForAllocation() == nullptr && block_part_set_header_ != nullptr) {
    delete block_part_set_header_;
  }
  block_part_set_header_ = nullptr;
}
void NewValidBlock::clear_block_parts() {
  if (GetArenaForAllocation() == nullptr && block_parts_ != nullptr) {
    delete block_parts_;
  }
  block_parts_ = nullptr;
}
NewValidBlock::NewValidBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.NewValidBlock)
}
NewValidBlock::NewValidBlock(const NewValidBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_part_set_header()) {
    block_part_set_header_ = new ::tendermint::types::PartSetHeader(*from.block_part_set_header_);
  } else {
    block_part_set_header_ = nullptr;
  }
  if (from._internal_has_block_parts()) {
    block_parts_ = new ::tendermint::libs::bits::BitArray(*from.block_parts_);
  } else {
    block_parts_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_commit_) -
    reinterpret_cast<char*>(&height_)) + sizeof(is_commit_));
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.NewValidBlock)
}

inline void NewValidBlock::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_part_set_header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_commit_) -
    reinterpret_cast<char*>(&block_part_set_header_)) + sizeof(is_commit_));
}

NewValidBlock::~NewValidBlock() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.NewValidBlock)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NewValidBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_part_set_header_;
  if (this != internal_default_instance()) delete block_parts_;
}

void NewValidBlock::ArenaDtor(void* object) {
  NewValidBlock* _this = reinterpret_cast< NewValidBlock* >(object);
  (void)_this;
}
void NewValidBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewValidBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewValidBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.NewValidBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && block_part_set_header_ != nullptr) {
    delete block_part_set_header_;
  }
  block_part_set_header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && block_parts_ != nullptr) {
    delete block_parts_;
  }
  block_parts_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_commit_) -
      reinterpret_cast<char*>(&height_)) + sizeof(is_commit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewValidBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 round = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.PartSetHeader block_part_set_header = 3 [(.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_part_set_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.libs.bits.BitArray block_parts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_parts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_commit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          is_commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewValidBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.NewValidBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_height(), target);
  }

  // int32 round = 2;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_round(), target);
  }

  // .tendermint.types.PartSetHeader block_part_set_header = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_block_part_set_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::block_part_set_header(this), target, stream);
  }

  // .tendermint.libs.bits.BitArray block_parts = 4;
  if (this->_internal_has_block_parts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::block_parts(this), target, stream);
  }

  // bool is_commit = 5;
  if (this->_internal_is_commit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_commit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.NewValidBlock)
  return target;
}

size_t NewValidBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.NewValidBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.PartSetHeader block_part_set_header = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_block_part_set_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_part_set_header_);
  }

  // .tendermint.libs.bits.BitArray block_parts = 4;
  if (this->_internal_has_block_parts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_parts_);
  }

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // int32 round = 2;
  if (this->_internal_round() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_round());
  }

  // bool is_commit = 5;
  if (this->_internal_is_commit() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewValidBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NewValidBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewValidBlock::GetClassData() const { return &_class_data_; }

void NewValidBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NewValidBlock *>(to)->MergeFrom(
      static_cast<const NewValidBlock &>(from));
}


void NewValidBlock::MergeFrom(const NewValidBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.NewValidBlock)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block_part_set_header()) {
    _internal_mutable_block_part_set_header()->::tendermint::types::PartSetHeader::MergeFrom(from._internal_block_part_set_header());
  }
  if (from._internal_has_block_parts()) {
    _internal_mutable_block_parts()->::tendermint::libs::bits::BitArray::MergeFrom(from._internal_block_parts());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _internal_set_round(from._internal_round());
  }
  if (from._internal_is_commit() != 0) {
    _internal_set_is_commit(from._internal_is_commit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewValidBlock::CopyFrom(const NewValidBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.NewValidBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewValidBlock::IsInitialized() const {
  return true;
}

void NewValidBlock::InternalSwap(NewValidBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewValidBlock, is_commit_)
      + sizeof(NewValidBlock::is_commit_)
      - PROTOBUF_FIELD_OFFSET(NewValidBlock, block_part_set_header_)>(
          reinterpret_cast<char*>(&block_part_set_header_),
          reinterpret_cast<char*>(&other->block_part_set_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewValidBlock::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[1]);
}

// ===================================================================

class Proposal::_Internal {
 public:
  static const ::tendermint::types::Proposal& proposal(const Proposal* msg);
};

const ::tendermint::types::Proposal&
Proposal::_Internal::proposal(const Proposal* msg) {
  return *msg->proposal_;
}
void Proposal::clear_proposal() {
  if (GetArenaForAllocation() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
}
Proposal::Proposal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.Proposal)
}
Proposal::Proposal(const Proposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_proposal()) {
    proposal_ = new ::tendermint::types::Proposal(*from.proposal_);
  } else {
    proposal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.Proposal)
}

inline void Proposal::SharedCtor() {
proposal_ = nullptr;
}

Proposal::~Proposal() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.Proposal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Proposal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete proposal_;
}

void Proposal::ArenaDtor(void* object) {
  Proposal* _this = reinterpret_cast< Proposal* >(object);
  (void)_this;
}
void Proposal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Proposal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Proposal::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.Proposal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proposal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.Proposal proposal = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Proposal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.Proposal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.Proposal proposal = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_proposal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::proposal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.Proposal)
  return target;
}

size_t Proposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.Proposal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.Proposal proposal = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_proposal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proposal_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Proposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Proposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Proposal::GetClassData() const { return &_class_data_; }

void Proposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Proposal *>(to)->MergeFrom(
      static_cast<const Proposal &>(from));
}


void Proposal::MergeFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.Proposal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_proposal()) {
    _internal_mutable_proposal()->::tendermint::types::Proposal::MergeFrom(from._internal_proposal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Proposal::CopyFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposal::IsInitialized() const {
  return true;
}

void Proposal::InternalSwap(Proposal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(proposal_, other->proposal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Proposal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[2]);
}

// ===================================================================

class ProposalPOL::_Internal {
 public:
  static const ::tendermint::libs::bits::BitArray& proposal_pol(const ProposalPOL* msg);
};

const ::tendermint::libs::bits::BitArray&
ProposalPOL::_Internal::proposal_pol(const ProposalPOL* msg) {
  return *msg->proposal_pol_;
}
void ProposalPOL::clear_proposal_pol() {
  if (GetArenaForAllocation() == nullptr && proposal_pol_ != nullptr) {
    delete proposal_pol_;
  }
  proposal_pol_ = nullptr;
}
ProposalPOL::ProposalPOL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.ProposalPOL)
}
ProposalPOL::ProposalPOL(const ProposalPOL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_proposal_pol()) {
    proposal_pol_ = new ::tendermint::libs::bits::BitArray(*from.proposal_pol_);
  } else {
    proposal_pol_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&proposal_pol_round_) -
    reinterpret_cast<char*>(&height_)) + sizeof(proposal_pol_round_));
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.ProposalPOL)
}

inline void ProposalPOL::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&proposal_pol_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&proposal_pol_round_) -
    reinterpret_cast<char*>(&proposal_pol_)) + sizeof(proposal_pol_round_));
}

ProposalPOL::~ProposalPOL() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.ProposalPOL)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProposalPOL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete proposal_pol_;
}

void ProposalPOL::ArenaDtor(void* object) {
  ProposalPOL* _this = reinterpret_cast< ProposalPOL* >(object);
  (void)_this;
}
void ProposalPOL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProposalPOL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProposalPOL::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.ProposalPOL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && proposal_pol_ != nullptr) {
    delete proposal_pol_;
  }
  proposal_pol_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proposal_pol_round_) -
      reinterpret_cast<char*>(&height_)) + sizeof(proposal_pol_round_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProposalPOL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 proposal_pol_round = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          proposal_pol_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.libs.bits.BitArray proposal_pol = 3 [(.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal_pol(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProposalPOL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.ProposalPOL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_height(), target);
  }

  // int32 proposal_pol_round = 2;
  if (this->_internal_proposal_pol_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_proposal_pol_round(), target);
  }

  // .tendermint.libs.bits.BitArray proposal_pol = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_proposal_pol()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::proposal_pol(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.ProposalPOL)
  return target;
}

size_t ProposalPOL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.ProposalPOL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.libs.bits.BitArray proposal_pol = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_proposal_pol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proposal_pol_);
  }

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // int32 proposal_pol_round = 2;
  if (this->_internal_proposal_pol_round() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_proposal_pol_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProposalPOL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProposalPOL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProposalPOL::GetClassData() const { return &_class_data_; }

void ProposalPOL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProposalPOL *>(to)->MergeFrom(
      static_cast<const ProposalPOL &>(from));
}


void ProposalPOL::MergeFrom(const ProposalPOL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.ProposalPOL)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_proposal_pol()) {
    _internal_mutable_proposal_pol()->::tendermint::libs::bits::BitArray::MergeFrom(from._internal_proposal_pol());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_proposal_pol_round() != 0) {
    _internal_set_proposal_pol_round(from._internal_proposal_pol_round());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProposalPOL::CopyFrom(const ProposalPOL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.ProposalPOL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposalPOL::IsInitialized() const {
  return true;
}

void ProposalPOL::InternalSwap(ProposalPOL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProposalPOL, proposal_pol_round_)
      + sizeof(ProposalPOL::proposal_pol_round_)
      - PROTOBUF_FIELD_OFFSET(ProposalPOL, proposal_pol_)>(
          reinterpret_cast<char*>(&proposal_pol_),
          reinterpret_cast<char*>(&other->proposal_pol_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProposalPOL::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[3]);
}

// ===================================================================

class BlockPart::_Internal {
 public:
  static const ::tendermint::types::Part& part(const BlockPart* msg);
};

const ::tendermint::types::Part&
BlockPart::_Internal::part(const BlockPart* msg) {
  return *msg->part_;
}
void BlockPart::clear_part() {
  if (GetArenaForAllocation() == nullptr && part_ != nullptr) {
    delete part_;
  }
  part_ = nullptr;
}
BlockPart::BlockPart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.BlockPart)
}
BlockPart::BlockPart(const BlockPart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_part()) {
    part_ = new ::tendermint::types::Part(*from.part_);
  } else {
    part_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_) -
    reinterpret_cast<char*>(&height_)) + sizeof(round_));
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.BlockPart)
}

inline void BlockPart::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&part_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&round_) -
    reinterpret_cast<char*>(&part_)) + sizeof(round_));
}

BlockPart::~BlockPart() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.BlockPart)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockPart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete part_;
}

void BlockPart::ArenaDtor(void* object) {
  BlockPart* _this = reinterpret_cast< BlockPart* >(object);
  (void)_this;
}
void BlockPart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockPart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockPart::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.BlockPart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && part_ != nullptr) {
    delete part_;
  }
  part_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_) -
      reinterpret_cast<char*>(&height_)) + sizeof(round_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockPart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 round = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.Part part = 3 [(.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_part(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockPart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.BlockPart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_height(), target);
  }

  // int32 round = 2;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_round(), target);
  }

  // .tendermint.types.Part part = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_part()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::part(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.BlockPart)
  return target;
}

size_t BlockPart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.BlockPart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.Part part = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_part()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *part_);
  }

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // int32 round = 2;
  if (this->_internal_round() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockPart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockPart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockPart::GetClassData() const { return &_class_data_; }

void BlockPart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockPart *>(to)->MergeFrom(
      static_cast<const BlockPart &>(from));
}


void BlockPart::MergeFrom(const BlockPart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.BlockPart)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_part()) {
    _internal_mutable_part()->::tendermint::types::Part::MergeFrom(from._internal_part());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _internal_set_round(from._internal_round());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockPart::CopyFrom(const BlockPart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.BlockPart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockPart::IsInitialized() const {
  return true;
}

void BlockPart::InternalSwap(BlockPart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockPart, round_)
      + sizeof(BlockPart::round_)
      - PROTOBUF_FIELD_OFFSET(BlockPart, part_)>(
          reinterpret_cast<char*>(&part_),
          reinterpret_cast<char*>(&other->part_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockPart::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[4]);
}

// ===================================================================

class Vote::_Internal {
 public:
  static const ::tendermint::types::Vote& vote(const Vote* msg);
};

const ::tendermint::types::Vote&
Vote::_Internal::vote(const Vote* msg) {
  return *msg->vote_;
}
void Vote::clear_vote() {
  if (GetArenaForAllocation() == nullptr && vote_ != nullptr) {
    delete vote_;
  }
  vote_ = nullptr;
}
Vote::Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.Vote)
}
Vote::Vote(const Vote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vote()) {
    vote_ = new ::tendermint::types::Vote(*from.vote_);
  } else {
    vote_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.Vote)
}

inline void Vote::SharedCtor() {
vote_ = nullptr;
}

Vote::~Vote() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.Vote)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete vote_;
}

void Vote::ArenaDtor(void* object) {
  Vote* _this = reinterpret_cast< Vote* >(object);
  (void)_this;
}
void Vote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.Vote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && vote_ != nullptr) {
    delete vote_;
  }
  vote_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.Vote vote = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.Vote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.Vote vote = 1;
  if (this->_internal_has_vote()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vote(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.Vote)
  return target;
}

size_t Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.Vote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.Vote vote = 1;
  if (this->_internal_has_vote()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vote_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vote::GetClassData() const { return &_class_data_; }

void Vote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vote *>(to)->MergeFrom(
      static_cast<const Vote &>(from));
}


void Vote::MergeFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vote()) {
    _internal_mutable_vote()->::tendermint::types::Vote::MergeFrom(from._internal_vote());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vote::CopyFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vote::IsInitialized() const {
  return true;
}

void Vote::InternalSwap(Vote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(vote_, other->vote_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vote::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[5]);
}

// ===================================================================

class HasVote::_Internal {
 public:
};

HasVote::HasVote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.HasVote)
}
HasVote::HasVote(const HasVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&height_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.HasVote)
}

inline void HasVote::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&height_)) + sizeof(index_));
}

HasVote::~HasVote() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.HasVote)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HasVote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HasVote::ArenaDtor(void* object) {
  HasVote* _this = reinterpret_cast< HasVote* >(object);
  (void)_this;
}
void HasVote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HasVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HasVote::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.HasVote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&height_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HasVote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 round = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.SignedMsgType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tendermint::types::SignedMsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HasVote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.HasVote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_height(), target);
  }

  // int32 round = 2;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_round(), target);
  }

  // .tendermint.types.SignedMsgType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // int32 index = 4;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.HasVote)
  return target;
}

size_t HasVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.HasVote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // int32 round = 2;
  if (this->_internal_round() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_round());
  }

  // .tendermint.types.SignedMsgType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 index = 4;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HasVote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HasVote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HasVote::GetClassData() const { return &_class_data_; }

void HasVote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HasVote *>(to)->MergeFrom(
      static_cast<const HasVote &>(from));
}


void HasVote::MergeFrom(const HasVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.HasVote)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _internal_set_round(from._internal_round());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HasVote::CopyFrom(const HasVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.HasVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HasVote::IsInitialized() const {
  return true;
}

void HasVote::InternalSwap(HasVote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HasVote, index_)
      + sizeof(HasVote::index_)
      - PROTOBUF_FIELD_OFFSET(HasVote, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HasVote::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[6]);
}

// ===================================================================

class VoteSetMaj23::_Internal {
 public:
  static const ::tendermint::types::BlockID& block_id(const VoteSetMaj23* msg);
};

const ::tendermint::types::BlockID&
VoteSetMaj23::_Internal::block_id(const VoteSetMaj23* msg) {
  return *msg->block_id_;
}
void VoteSetMaj23::clear_block_id() {
  if (GetArenaForAllocation() == nullptr && block_id_ != nullptr) {
    delete block_id_;
  }
  block_id_ = nullptr;
}
VoteSetMaj23::VoteSetMaj23(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.VoteSetMaj23)
}
VoteSetMaj23::VoteSetMaj23(const VoteSetMaj23& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_id()) {
    block_id_ = new ::tendermint::types::BlockID(*from.block_id_);
  } else {
    block_id_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&height_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.VoteSetMaj23)
}

inline void VoteSetMaj23::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&block_id_)) + sizeof(type_));
}

VoteSetMaj23::~VoteSetMaj23() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.VoteSetMaj23)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VoteSetMaj23::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_id_;
}

void VoteSetMaj23::ArenaDtor(void* object) {
  VoteSetMaj23* _this = reinterpret_cast< VoteSetMaj23* >(object);
  (void)_this;
}
void VoteSetMaj23::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteSetMaj23::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VoteSetMaj23::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.VoteSetMaj23)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && block_id_ != nullptr) {
    delete block_id_;
  }
  block_id_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&height_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteSetMaj23::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 round = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.SignedMsgType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tendermint::types::SignedMsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.BlockID block_id = 4 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoteSetMaj23::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.VoteSetMaj23)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_height(), target);
  }

  // int32 round = 2;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_round(), target);
  }

  // .tendermint.types.SignedMsgType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // .tendermint.types.BlockID block_id = 4 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  if (this->_internal_has_block_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::block_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.VoteSetMaj23)
  return target;
}

size_t VoteSetMaj23::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.VoteSetMaj23)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.BlockID block_id = 4 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  if (this->_internal_has_block_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_id_);
  }

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // int32 round = 2;
  if (this->_internal_round() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_round());
  }

  // .tendermint.types.SignedMsgType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteSetMaj23::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VoteSetMaj23::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteSetMaj23::GetClassData() const { return &_class_data_; }

void VoteSetMaj23::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VoteSetMaj23 *>(to)->MergeFrom(
      static_cast<const VoteSetMaj23 &>(from));
}


void VoteSetMaj23::MergeFrom(const VoteSetMaj23& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.VoteSetMaj23)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block_id()) {
    _internal_mutable_block_id()->::tendermint::types::BlockID::MergeFrom(from._internal_block_id());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _internal_set_round(from._internal_round());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteSetMaj23::CopyFrom(const VoteSetMaj23& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.VoteSetMaj23)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteSetMaj23::IsInitialized() const {
  return true;
}

void VoteSetMaj23::InternalSwap(VoteSetMaj23* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteSetMaj23, type_)
      + sizeof(VoteSetMaj23::type_)
      - PROTOBUF_FIELD_OFFSET(VoteSetMaj23, block_id_)>(
          reinterpret_cast<char*>(&block_id_),
          reinterpret_cast<char*>(&other->block_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteSetMaj23::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[7]);
}

// ===================================================================

class VoteSetBits::_Internal {
 public:
  static const ::tendermint::types::BlockID& block_id(const VoteSetBits* msg);
  static const ::tendermint::libs::bits::BitArray& votes(const VoteSetBits* msg);
};

const ::tendermint::types::BlockID&
VoteSetBits::_Internal::block_id(const VoteSetBits* msg) {
  return *msg->block_id_;
}
const ::tendermint::libs::bits::BitArray&
VoteSetBits::_Internal::votes(const VoteSetBits* msg) {
  return *msg->votes_;
}
void VoteSetBits::clear_block_id() {
  if (GetArenaForAllocation() == nullptr && block_id_ != nullptr) {
    delete block_id_;
  }
  block_id_ = nullptr;
}
void VoteSetBits::clear_votes() {
  if (GetArenaForAllocation() == nullptr && votes_ != nullptr) {
    delete votes_;
  }
  votes_ = nullptr;
}
VoteSetBits::VoteSetBits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.VoteSetBits)
}
VoteSetBits::VoteSetBits(const VoteSetBits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_id()) {
    block_id_ = new ::tendermint::types::BlockID(*from.block_id_);
  } else {
    block_id_ = nullptr;
  }
  if (from._internal_has_votes()) {
    votes_ = new ::tendermint::libs::bits::BitArray(*from.votes_);
  } else {
    votes_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&height_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.VoteSetBits)
}

inline void VoteSetBits::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&block_id_)) + sizeof(type_));
}

VoteSetBits::~VoteSetBits() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.VoteSetBits)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VoteSetBits::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_id_;
  if (this != internal_default_instance()) delete votes_;
}

void VoteSetBits::ArenaDtor(void* object) {
  VoteSetBits* _this = reinterpret_cast< VoteSetBits* >(object);
  (void)_this;
}
void VoteSetBits::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteSetBits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VoteSetBits::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.VoteSetBits)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && block_id_ != nullptr) {
    delete block_id_;
  }
  block_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && votes_ != nullptr) {
    delete votes_;
  }
  votes_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&height_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteSetBits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 round = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.SignedMsgType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tendermint::types::SignedMsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.BlockID block_id = 4 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.libs.bits.BitArray votes = 5 [(.gogoproto.nullable) = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_votes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoteSetBits::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.VoteSetBits)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_height(), target);
  }

  // int32 round = 2;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_round(), target);
  }

  // .tendermint.types.SignedMsgType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // .tendermint.types.BlockID block_id = 4 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  if (this->_internal_has_block_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::block_id(this), target, stream);
  }

  // .tendermint.libs.bits.BitArray votes = 5 [(.gogoproto.nullable) = false];
  if (this->_internal_has_votes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::votes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.VoteSetBits)
  return target;
}

size_t VoteSetBits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.VoteSetBits)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.BlockID block_id = 4 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  if (this->_internal_has_block_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_id_);
  }

  // .tendermint.libs.bits.BitArray votes = 5 [(.gogoproto.nullable) = false];
  if (this->_internal_has_votes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *votes_);
  }

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // int32 round = 2;
  if (this->_internal_round() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_round());
  }

  // .tendermint.types.SignedMsgType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteSetBits::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VoteSetBits::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteSetBits::GetClassData() const { return &_class_data_; }

void VoteSetBits::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VoteSetBits *>(to)->MergeFrom(
      static_cast<const VoteSetBits &>(from));
}


void VoteSetBits::MergeFrom(const VoteSetBits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.VoteSetBits)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block_id()) {
    _internal_mutable_block_id()->::tendermint::types::BlockID::MergeFrom(from._internal_block_id());
  }
  if (from._internal_has_votes()) {
    _internal_mutable_votes()->::tendermint::libs::bits::BitArray::MergeFrom(from._internal_votes());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _internal_set_round(from._internal_round());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteSetBits::CopyFrom(const VoteSetBits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.VoteSetBits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteSetBits::IsInitialized() const {
  return true;
}

void VoteSetBits::InternalSwap(VoteSetBits* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteSetBits, type_)
      + sizeof(VoteSetBits::type_)
      - PROTOBUF_FIELD_OFFSET(VoteSetBits, block_id_)>(
          reinterpret_cast<char*>(&block_id_),
          reinterpret_cast<char*>(&other->block_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteSetBits::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[8]);
}

// ===================================================================

class Message::_Internal {
 public:
  static const ::tendermint::consensus::NewRoundStep& new_round_step(const Message* msg);
  static const ::tendermint::consensus::NewValidBlock& new_valid_block(const Message* msg);
  static const ::tendermint::consensus::Proposal& proposal(const Message* msg);
  static const ::tendermint::consensus::ProposalPOL& proposal_pol(const Message* msg);
  static const ::tendermint::consensus::BlockPart& block_part(const Message* msg);
  static const ::tendermint::consensus::Vote& vote(const Message* msg);
  static const ::tendermint::consensus::HasVote& has_vote(const Message* msg);
  static const ::tendermint::consensus::VoteSetMaj23& vote_set_maj23(const Message* msg);
  static const ::tendermint::consensus::VoteSetBits& vote_set_bits(const Message* msg);
};

const ::tendermint::consensus::NewRoundStep&
Message::_Internal::new_round_step(const Message* msg) {
  return *msg->sum_.new_round_step_;
}
const ::tendermint::consensus::NewValidBlock&
Message::_Internal::new_valid_block(const Message* msg) {
  return *msg->sum_.new_valid_block_;
}
const ::tendermint::consensus::Proposal&
Message::_Internal::proposal(const Message* msg) {
  return *msg->sum_.proposal_;
}
const ::tendermint::consensus::ProposalPOL&
Message::_Internal::proposal_pol(const Message* msg) {
  return *msg->sum_.proposal_pol_;
}
const ::tendermint::consensus::BlockPart&
Message::_Internal::block_part(const Message* msg) {
  return *msg->sum_.block_part_;
}
const ::tendermint::consensus::Vote&
Message::_Internal::vote(const Message* msg) {
  return *msg->sum_.vote_;
}
const ::tendermint::consensus::HasVote&
Message::_Internal::has_vote(const Message* msg) {
  return *msg->sum_.has_vote_;
}
const ::tendermint::consensus::VoteSetMaj23&
Message::_Internal::vote_set_maj23(const Message* msg) {
  return *msg->sum_.vote_set_maj23_;
}
const ::tendermint::consensus::VoteSetBits&
Message::_Internal::vote_set_bits(const Message* msg) {
  return *msg->sum_.vote_set_bits_;
}
void Message::set_allocated_new_round_step(::tendermint::consensus::NewRoundStep* new_round_step) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (new_round_step) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::consensus::NewRoundStep>::GetOwningArena(new_round_step);
    if (message_arena != submessage_arena) {
      new_round_step = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_round_step, submessage_arena);
    }
    set_has_new_round_step();
    sum_.new_round_step_ = new_round_step;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.Message.new_round_step)
}
void Message::set_allocated_new_valid_block(::tendermint::consensus::NewValidBlock* new_valid_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (new_valid_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::consensus::NewValidBlock>::GetOwningArena(new_valid_block);
    if (message_arena != submessage_arena) {
      new_valid_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_valid_block, submessage_arena);
    }
    set_has_new_valid_block();
    sum_.new_valid_block_ = new_valid_block;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.Message.new_valid_block)
}
void Message::set_allocated_proposal(::tendermint::consensus::Proposal* proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::consensus::Proposal>::GetOwningArena(proposal);
    if (message_arena != submessage_arena) {
      proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal, submessage_arena);
    }
    set_has_proposal();
    sum_.proposal_ = proposal;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.Message.proposal)
}
void Message::set_allocated_proposal_pol(::tendermint::consensus::ProposalPOL* proposal_pol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (proposal_pol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::consensus::ProposalPOL>::GetOwningArena(proposal_pol);
    if (message_arena != submessage_arena) {
      proposal_pol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal_pol, submessage_arena);
    }
    set_has_proposal_pol();
    sum_.proposal_pol_ = proposal_pol;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.Message.proposal_pol)
}
void Message::set_allocated_block_part(::tendermint::consensus::BlockPart* block_part) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (block_part) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::consensus::BlockPart>::GetOwningArena(block_part);
    if (message_arena != submessage_arena) {
      block_part = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_part, submessage_arena);
    }
    set_has_block_part();
    sum_.block_part_ = block_part;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.Message.block_part)
}
void Message::set_allocated_vote(::tendermint::consensus::Vote* vote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (vote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::consensus::Vote>::GetOwningArena(vote);
    if (message_arena != submessage_arena) {
      vote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote, submessage_arena);
    }
    set_has_vote();
    sum_.vote_ = vote;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.Message.vote)
}
void Message::set_allocated_has_vote(::tendermint::consensus::HasVote* has_vote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (has_vote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::consensus::HasVote>::GetOwningArena(has_vote);
    if (message_arena != submessage_arena) {
      has_vote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, has_vote, submessage_arena);
    }
    set_has_has_vote();
    sum_.has_vote_ = has_vote;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.Message.has_vote)
}
void Message::set_allocated_vote_set_maj23(::tendermint::consensus::VoteSetMaj23* vote_set_maj23) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (vote_set_maj23) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::consensus::VoteSetMaj23>::GetOwningArena(vote_set_maj23);
    if (message_arena != submessage_arena) {
      vote_set_maj23 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote_set_maj23, submessage_arena);
    }
    set_has_vote_set_maj23();
    sum_.vote_set_maj23_ = vote_set_maj23;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.Message.vote_set_maj23)
}
void Message::set_allocated_vote_set_bits(::tendermint::consensus::VoteSetBits* vote_set_bits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (vote_set_bits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::consensus::VoteSetBits>::GetOwningArena(vote_set_bits);
    if (message_arena != submessage_arena) {
      vote_set_bits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote_set_bits, submessage_arena);
    }
    set_has_vote_set_bits();
    sum_.vote_set_bits_ = vote_set_bits;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.Message.vote_set_bits)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_sum();
  switch (from.sum_case()) {
    case kNewRoundStep: {
      _internal_mutable_new_round_step()->::tendermint::consensus::NewRoundStep::MergeFrom(from._internal_new_round_step());
      break;
    }
    case kNewValidBlock: {
      _internal_mutable_new_valid_block()->::tendermint::consensus::NewValidBlock::MergeFrom(from._internal_new_valid_block());
      break;
    }
    case kProposal: {
      _internal_mutable_proposal()->::tendermint::consensus::Proposal::MergeFrom(from._internal_proposal());
      break;
    }
    case kProposalPol: {
      _internal_mutable_proposal_pol()->::tendermint::consensus::ProposalPOL::MergeFrom(from._internal_proposal_pol());
      break;
    }
    case kBlockPart: {
      _internal_mutable_block_part()->::tendermint::consensus::BlockPart::MergeFrom(from._internal_block_part());
      break;
    }
    case kVote: {
      _internal_mutable_vote()->::tendermint::consensus::Vote::MergeFrom(from._internal_vote());
      break;
    }
    case kHasVote: {
      _internal_mutable_has_vote()->::tendermint::consensus::HasVote::MergeFrom(from._internal_has_vote());
      break;
    }
    case kVoteSetMaj23: {
      _internal_mutable_vote_set_maj23()->::tendermint::consensus::VoteSetMaj23::MergeFrom(from._internal_vote_set_maj23());
      break;
    }
    case kVoteSetBits: {
      _internal_mutable_vote_set_bits()->::tendermint::consensus::VoteSetBits::MergeFrom(from._internal_vote_set_bits());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.Message)
}

inline void Message::SharedCtor() {
clear_has_sum();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.Message)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_sum()) {
    clear_sum();
  }
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:tendermint.consensus.Message)
  switch (sum_case()) {
    case kNewRoundStep: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.new_round_step_;
      }
      break;
    }
    case kNewValidBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.new_valid_block_;
      }
      break;
    }
    case kProposal: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.proposal_;
      }
      break;
    }
    case kProposalPol: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.proposal_pol_;
      }
      break;
    }
    case kBlockPart: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.block_part_;
      }
      break;
    }
    case kVote: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.vote_;
      }
      break;
    }
    case kHasVote: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.has_vote_;
      }
      break;
    }
    case kVoteSetMaj23: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.vote_set_maj23_;
      }
      break;
    }
    case kVoteSetBits: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.vote_set_bits_;
      }
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SUM_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.consensus.NewRoundStep new_round_step = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_round_step(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.consensus.NewValidBlock new_valid_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_valid_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.consensus.Proposal proposal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.consensus.ProposalPOL proposal_pol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal_pol(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.consensus.BlockPart block_part = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_part(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.consensus.Vote vote = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.consensus.HasVote has_vote = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_has_vote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.consensus.VoteSetMaj23 vote_set_maj23 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote_set_maj23(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.consensus.VoteSetBits vote_set_bits = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote_set_bits(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.consensus.NewRoundStep new_round_step = 1;
  if (_internal_has_new_round_step()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::new_round_step(this), target, stream);
  }

  // .tendermint.consensus.NewValidBlock new_valid_block = 2;
  if (_internal_has_new_valid_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::new_valid_block(this), target, stream);
  }

  // .tendermint.consensus.Proposal proposal = 3;
  if (_internal_has_proposal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::proposal(this), target, stream);
  }

  // .tendermint.consensus.ProposalPOL proposal_pol = 4;
  if (_internal_has_proposal_pol()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::proposal_pol(this), target, stream);
  }

  // .tendermint.consensus.BlockPart block_part = 5;
  if (_internal_has_block_part()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::block_part(this), target, stream);
  }

  // .tendermint.consensus.Vote vote = 6;
  if (_internal_has_vote()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::vote(this), target, stream);
  }

  // .tendermint.consensus.HasVote has_vote = 7;
  if (_internal_has_has_vote()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::has_vote(this), target, stream);
  }

  // .tendermint.consensus.VoteSetMaj23 vote_set_maj23 = 8;
  if (_internal_has_vote_set_maj23()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::vote_set_maj23(this), target, stream);
  }

  // .tendermint.consensus.VoteSetBits vote_set_bits = 9;
  if (_internal_has_vote_set_bits()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::vote_set_bits(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sum_case()) {
    // .tendermint.consensus.NewRoundStep new_round_step = 1;
    case kNewRoundStep: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.new_round_step_);
      break;
    }
    // .tendermint.consensus.NewValidBlock new_valid_block = 2;
    case kNewValidBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.new_valid_block_);
      break;
    }
    // .tendermint.consensus.Proposal proposal = 3;
    case kProposal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.proposal_);
      break;
    }
    // .tendermint.consensus.ProposalPOL proposal_pol = 4;
    case kProposalPol: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.proposal_pol_);
      break;
    }
    // .tendermint.consensus.BlockPart block_part = 5;
    case kBlockPart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.block_part_);
      break;
    }
    // .tendermint.consensus.Vote vote = 6;
    case kVote: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.vote_);
      break;
    }
    // .tendermint.consensus.HasVote has_vote = 7;
    case kHasVote: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.has_vote_);
      break;
    }
    // .tendermint.consensus.VoteSetMaj23 vote_set_maj23 = 8;
    case kVoteSetMaj23: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.vote_set_maj23_);
      break;
    }
    // .tendermint.consensus.VoteSetBits vote_set_bits = 9;
    case kVoteSetBits: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.vote_set_bits_);
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }

void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message *>(to)->MergeFrom(
      static_cast<const Message &>(from));
}


void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.Message)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sum_case()) {
    case kNewRoundStep: {
      _internal_mutable_new_round_step()->::tendermint::consensus::NewRoundStep::MergeFrom(from._internal_new_round_step());
      break;
    }
    case kNewValidBlock: {
      _internal_mutable_new_valid_block()->::tendermint::consensus::NewValidBlock::MergeFrom(from._internal_new_valid_block());
      break;
    }
    case kProposal: {
      _internal_mutable_proposal()->::tendermint::consensus::Proposal::MergeFrom(from._internal_proposal());
      break;
    }
    case kProposalPol: {
      _internal_mutable_proposal_pol()->::tendermint::consensus::ProposalPOL::MergeFrom(from._internal_proposal_pol());
      break;
    }
    case kBlockPart: {
      _internal_mutable_block_part()->::tendermint::consensus::BlockPart::MergeFrom(from._internal_block_part());
      break;
    }
    case kVote: {
      _internal_mutable_vote()->::tendermint::consensus::Vote::MergeFrom(from._internal_vote());
      break;
    }
    case kHasVote: {
      _internal_mutable_has_vote()->::tendermint::consensus::HasVote::MergeFrom(from._internal_has_vote());
      break;
    }
    case kVoteSetMaj23: {
      _internal_mutable_vote_set_maj23()->::tendermint::consensus::VoteSetMaj23::MergeFrom(from._internal_vote_set_maj23());
      break;
    }
    case kVoteSetBits: {
      _internal_mutable_vote_set_bits()->::tendermint::consensus::VoteSetBits::MergeFrom(from._internal_vote_set_bits());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(sum_, other->sum_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace consensus
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::consensus::NewRoundStep* Arena::CreateMaybeMessage< ::tendermint::consensus::NewRoundStep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::NewRoundStep >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::NewValidBlock* Arena::CreateMaybeMessage< ::tendermint::consensus::NewValidBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::NewValidBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::Proposal* Arena::CreateMaybeMessage< ::tendermint::consensus::Proposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::Proposal >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::ProposalPOL* Arena::CreateMaybeMessage< ::tendermint::consensus::ProposalPOL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::ProposalPOL >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::BlockPart* Arena::CreateMaybeMessage< ::tendermint::consensus::BlockPart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::BlockPart >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::Vote* Arena::CreateMaybeMessage< ::tendermint::consensus::Vote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::Vote >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::HasVote* Arena::CreateMaybeMessage< ::tendermint::consensus::HasVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::HasVote >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::VoteSetMaj23* Arena::CreateMaybeMessage< ::tendermint::consensus::VoteSetMaj23 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::VoteSetMaj23 >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::VoteSetBits* Arena::CreateMaybeMessage< ::tendermint::consensus::VoteSetBits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::VoteSetBits >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::Message* Arena::CreateMaybeMessage< ::tendermint::consensus::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
