// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/libs/bits/types.proto

#include "tendermint/libs/bits/types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tendermint {
namespace libs {
namespace bits {
constexpr BitArray::BitArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : elems_()
  , _elems_cached_byte_size_(0)
  , bits_(int64_t{0}){}
struct BitArrayDefaultTypeInternal {
  constexpr BitArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BitArrayDefaultTypeInternal() {}
  union {
    BitArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BitArrayDefaultTypeInternal _BitArray_default_instance_;
}  // namespace bits
}  // namespace libs
}  // namespace tendermint
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tendermint_2flibs_2fbits_2ftypes_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tendermint_2flibs_2fbits_2ftypes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tendermint_2flibs_2fbits_2ftypes_2eproto = nullptr;

const uint32_t TableStruct_tendermint_2flibs_2fbits_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::libs::bits::BitArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::libs::bits::BitArray, bits_),
  PROTOBUF_FIELD_OFFSET(::tendermint::libs::bits::BitArray, elems_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tendermint::libs::bits::BitArray)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::libs::bits::_BitArray_default_instance_),
};

const char descriptor_table_protodef_tendermint_2flibs_2fbits_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n tendermint/libs/bits/types.proto\022\024tend"
  "ermint.libs.bits\"\'\n\010BitArray\022\014\n\004bits\030\001 \001"
  "(\003\022\r\n\005elems\030\002 \003(\004B=Z;github.com/tendermi"
  "nt/tendermint/proto/tendermint/libs/bits"
  "b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tendermint_2flibs_2fbits_2ftypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2flibs_2fbits_2ftypes_2eproto = {
  false, false, 168, descriptor_table_protodef_tendermint_2flibs_2fbits_2ftypes_2eproto, "tendermint/libs/bits/types.proto", 
  &descriptor_table_tendermint_2flibs_2fbits_2ftypes_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_tendermint_2flibs_2fbits_2ftypes_2eproto::offsets,
  file_level_metadata_tendermint_2flibs_2fbits_2ftypes_2eproto, file_level_enum_descriptors_tendermint_2flibs_2fbits_2ftypes_2eproto, file_level_service_descriptors_tendermint_2flibs_2fbits_2ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tendermint_2flibs_2fbits_2ftypes_2eproto_getter() {
  return &descriptor_table_tendermint_2flibs_2fbits_2ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tendermint_2flibs_2fbits_2ftypes_2eproto(&descriptor_table_tendermint_2flibs_2fbits_2ftypes_2eproto);
namespace tendermint {
namespace libs {
namespace bits {

// ===================================================================

class BitArray::_Internal {
 public:
};

BitArray::BitArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  elems_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.libs.bits.BitArray)
}
BitArray::BitArray(const BitArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      elems_(from.elems_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bits_ = from.bits_;
  // @@protoc_insertion_point(copy_constructor:tendermint.libs.bits.BitArray)
}

inline void BitArray::SharedCtor() {
bits_ = int64_t{0};
}

BitArray::~BitArray() {
  // @@protoc_insertion_point(destructor:tendermint.libs.bits.BitArray)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BitArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BitArray::ArenaDtor(void* object) {
  BitArray* _this = reinterpret_cast< BitArray* >(object);
  (void)_this;
}
void BitArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BitArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BitArray::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.libs.bits.BitArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elems_.Clear();
  bits_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BitArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 bits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 elems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_elems(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_elems(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BitArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.libs.bits.BitArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bits = 1;
  if (this->_internal_bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_bits(), target);
  }

  // repeated uint64 elems = 2;
  {
    int byte_size = _elems_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_elems(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.libs.bits.BitArray)
  return target;
}

size_t BitArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.libs.bits.BitArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 elems = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->elems_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _elems_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 bits = 1;
  if (this->_internal_bits() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_bits());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BitArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BitArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BitArray::GetClassData() const { return &_class_data_; }

void BitArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BitArray *>(to)->MergeFrom(
      static_cast<const BitArray &>(from));
}


void BitArray::MergeFrom(const BitArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.libs.bits.BitArray)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  elems_.MergeFrom(from.elems_);
  if (from._internal_bits() != 0) {
    _internal_set_bits(from._internal_bits());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BitArray::CopyFrom(const BitArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.libs.bits.BitArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitArray::IsInitialized() const {
  return true;
}

void BitArray::InternalSwap(BitArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  elems_.InternalSwap(&other->elems_);
  swap(bits_, other->bits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BitArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2flibs_2fbits_2ftypes_2eproto_getter, &descriptor_table_tendermint_2flibs_2fbits_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2flibs_2fbits_2ftypes_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace bits
}  // namespace libs
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::libs::bits::BitArray* Arena::CreateMaybeMessage< ::tendermint::libs::bits::BitArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::libs::bits::BitArray >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
