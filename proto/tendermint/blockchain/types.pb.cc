// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/blockchain/types.proto

#include "tendermint/blockchain/types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tendermint {
namespace blockchain {
constexpr BlockRequest::BlockRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(int64_t{0}){}
struct BlockRequestDefaultTypeInternal {
  constexpr BlockRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockRequestDefaultTypeInternal() {}
  union {
    BlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockRequestDefaultTypeInternal _BlockRequest_default_instance_;
constexpr NoBlockResponse::NoBlockResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(int64_t{0}){}
struct NoBlockResponseDefaultTypeInternal {
  constexpr NoBlockResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NoBlockResponseDefaultTypeInternal() {}
  union {
    NoBlockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NoBlockResponseDefaultTypeInternal _NoBlockResponse_default_instance_;
constexpr BlockResponse::BlockResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_(nullptr){}
struct BlockResponseDefaultTypeInternal {
  constexpr BlockResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockResponseDefaultTypeInternal() {}
  union {
    BlockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockResponseDefaultTypeInternal _BlockResponse_default_instance_;
constexpr StatusRequest::StatusRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StatusRequestDefaultTypeInternal {
  constexpr StatusRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusRequestDefaultTypeInternal() {}
  union {
    StatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
constexpr StatusResponse::StatusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(int64_t{0})
  , base_(int64_t{0}){}
struct StatusResponseDefaultTypeInternal {
  constexpr StatusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusResponseDefaultTypeInternal() {}
  union {
    StatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
constexpr Message::Message(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct MessageDefaultTypeInternal {
  constexpr MessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace blockchain
}  // namespace tendermint
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tendermint_2fblockchain_2ftypes_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tendermint_2fblockchain_2ftypes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tendermint_2fblockchain_2ftypes_2eproto = nullptr;

const uint32_t TableStruct_tendermint_2fblockchain_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::blockchain::BlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::blockchain::BlockRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::blockchain::NoBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::blockchain::NoBlockResponse, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::blockchain::BlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::blockchain::BlockResponse, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::blockchain::StatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::blockchain::StatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::blockchain::StatusResponse, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::blockchain::StatusResponse, base_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::blockchain::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tendermint::blockchain::Message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tendermint::blockchain::Message, sum_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tendermint::blockchain::BlockRequest)},
  { 7, -1, -1, sizeof(::tendermint::blockchain::NoBlockResponse)},
  { 14, -1, -1, sizeof(::tendermint::blockchain::BlockResponse)},
  { 21, -1, -1, sizeof(::tendermint::blockchain::StatusRequest)},
  { 27, -1, -1, sizeof(::tendermint::blockchain::StatusResponse)},
  { 35, -1, -1, sizeof(::tendermint::blockchain::Message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::blockchain::_BlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::blockchain::_NoBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::blockchain::_BlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::blockchain::_StatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::blockchain::_StatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::blockchain::_Message_default_instance_),
};

const char descriptor_table_protodef_tendermint_2fblockchain_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!tendermint/blockchain/types.proto\022\025ten"
  "dermint.blockchain\032\034tendermint/types/blo"
  "ck.proto\"\036\n\014BlockRequest\022\016\n\006height\030\001 \001(\003"
  "\"!\n\017NoBlockResponse\022\016\n\006height\030\001 \001(\003\"7\n\rB"
  "lockResponse\022&\n\005block\030\001 \001(\0132\027.tendermint"
  ".types.Block\"\017\n\rStatusRequest\".\n\016StatusR"
  "esponse\022\016\n\006height\030\001 \001(\003\022\014\n\004base\030\002 \001(\003\"\325\002"
  "\n\007Message\022<\n\rblock_request\030\001 \001(\0132#.tende"
  "rmint.blockchain.BlockRequestH\000\022C\n\021no_bl"
  "ock_response\030\002 \001(\0132&.tendermint.blockcha"
  "in.NoBlockResponseH\000\022>\n\016block_response\030\003"
  " \001(\0132$.tendermint.blockchain.BlockRespon"
  "seH\000\022>\n\016status_request\030\004 \001(\0132$.tendermin"
  "t.blockchain.StatusRequestH\000\022@\n\017status_r"
  "esponse\030\005 \001(\0132%.tendermint.blockchain.St"
  "atusResponseH\000B\005\n\003sumB>Z<github.com/tend"
  "ermint/tendermint/proto/tendermint/block"
  "chainb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tendermint_2fblockchain_2ftypes_2eproto_deps[1] = {
  &::descriptor_table_tendermint_2ftypes_2fblock_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tendermint_2fblockchain_2ftypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2fblockchain_2ftypes_2eproto = {
  false, false, 693, descriptor_table_protodef_tendermint_2fblockchain_2ftypes_2eproto, "tendermint/blockchain/types.proto", 
  &descriptor_table_tendermint_2fblockchain_2ftypes_2eproto_once, descriptor_table_tendermint_2fblockchain_2ftypes_2eproto_deps, 1, 6,
  schemas, file_default_instances, TableStruct_tendermint_2fblockchain_2ftypes_2eproto::offsets,
  file_level_metadata_tendermint_2fblockchain_2ftypes_2eproto, file_level_enum_descriptors_tendermint_2fblockchain_2ftypes_2eproto, file_level_service_descriptors_tendermint_2fblockchain_2ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tendermint_2fblockchain_2ftypes_2eproto_getter() {
  return &descriptor_table_tendermint_2fblockchain_2ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tendermint_2fblockchain_2ftypes_2eproto(&descriptor_table_tendermint_2fblockchain_2ftypes_2eproto);
namespace tendermint {
namespace blockchain {

// ===================================================================

class BlockRequest::_Internal {
 public:
};

BlockRequest::BlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.blockchain.BlockRequest)
}
BlockRequest::BlockRequest(const BlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:tendermint.blockchain.BlockRequest)
}

inline void BlockRequest::SharedCtor() {
height_ = int64_t{0};
}

BlockRequest::~BlockRequest() {
  // @@protoc_insertion_point(destructor:tendermint.blockchain.BlockRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockRequest::ArenaDtor(void* object) {
  BlockRequest* _this = reinterpret_cast< BlockRequest* >(object);
  (void)_this;
}
void BlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.blockchain.BlockRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  height_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.blockchain.BlockRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.blockchain.BlockRequest)
  return target;
}

size_t BlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.blockchain.BlockRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockRequest::GetClassData() const { return &_class_data_; }

void BlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockRequest *>(to)->MergeFrom(
      static_cast<const BlockRequest &>(from));
}


void BlockRequest::MergeFrom(const BlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.blockchain.BlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockRequest::CopyFrom(const BlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.blockchain.BlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRequest::IsInitialized() const {
  return true;
}

void BlockRequest::InternalSwap(BlockRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fblockchain_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fblockchain_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fblockchain_2ftypes_2eproto[0]);
}

// ===================================================================

class NoBlockResponse::_Internal {
 public:
};

NoBlockResponse::NoBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.blockchain.NoBlockResponse)
}
NoBlockResponse::NoBlockResponse(const NoBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:tendermint.blockchain.NoBlockResponse)
}

inline void NoBlockResponse::SharedCtor() {
height_ = int64_t{0};
}

NoBlockResponse::~NoBlockResponse() {
  // @@protoc_insertion_point(destructor:tendermint.blockchain.NoBlockResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NoBlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NoBlockResponse::ArenaDtor(void* object) {
  NoBlockResponse* _this = reinterpret_cast< NoBlockResponse* >(object);
  (void)_this;
}
void NoBlockResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NoBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NoBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.blockchain.NoBlockResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  height_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NoBlockResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.blockchain.NoBlockResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.blockchain.NoBlockResponse)
  return target;
}

size_t NoBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.blockchain.NoBlockResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NoBlockResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NoBlockResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NoBlockResponse::GetClassData() const { return &_class_data_; }

void NoBlockResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NoBlockResponse *>(to)->MergeFrom(
      static_cast<const NoBlockResponse &>(from));
}


void NoBlockResponse::MergeFrom(const NoBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.blockchain.NoBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NoBlockResponse::CopyFrom(const NoBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.blockchain.NoBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoBlockResponse::IsInitialized() const {
  return true;
}

void NoBlockResponse::InternalSwap(NoBlockResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoBlockResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fblockchain_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fblockchain_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fblockchain_2ftypes_2eproto[1]);
}

// ===================================================================

class BlockResponse::_Internal {
 public:
  static const ::tendermint::types::Block& block(const BlockResponse* msg);
};

const ::tendermint::types::Block&
BlockResponse::_Internal::block(const BlockResponse* msg) {
  return *msg->block_;
}
void BlockResponse::clear_block() {
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
BlockResponse::BlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.blockchain.BlockResponse)
}
BlockResponse::BlockResponse(const BlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::tendermint::types::Block(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.blockchain.BlockResponse)
}

inline void BlockResponse::SharedCtor() {
block_ = nullptr;
}

BlockResponse::~BlockResponse() {
  // @@protoc_insertion_point(destructor:tendermint.blockchain.BlockResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void BlockResponse::ArenaDtor(void* object) {
  BlockResponse* _this = reinterpret_cast< BlockResponse* >(object);
  (void)_this;
}
void BlockResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.blockchain.BlockResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.Block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.blockchain.BlockResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.Block block = 1;
  if (this->_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.blockchain.BlockResponse)
  return target;
}

size_t BlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.blockchain.BlockResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.Block block = 1;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockResponse::GetClassData() const { return &_class_data_; }

void BlockResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockResponse *>(to)->MergeFrom(
      static_cast<const BlockResponse &>(from));
}


void BlockResponse::MergeFrom(const BlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.blockchain.BlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _internal_mutable_block()->::tendermint::types::Block::MergeFrom(from._internal_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockResponse::CopyFrom(const BlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.blockchain.BlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockResponse::IsInitialized() const {
  return true;
}

void BlockResponse::InternalSwap(BlockResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fblockchain_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fblockchain_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fblockchain_2ftypes_2eproto[2]);
}

// ===================================================================

class StatusRequest::_Internal {
 public:
};

StatusRequest::StatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tendermint.blockchain.StatusRequest)
}
StatusRequest::StatusRequest(const StatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.blockchain.StatusRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StatusRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fblockchain_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fblockchain_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fblockchain_2ftypes_2eproto[3]);
}

// ===================================================================

class StatusResponse::_Internal {
 public:
};

StatusResponse::StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.blockchain.StatusResponse)
}
StatusResponse::StatusResponse(const StatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&base_) -
    reinterpret_cast<char*>(&height_)) + sizeof(base_));
  // @@protoc_insertion_point(copy_constructor:tendermint.blockchain.StatusResponse)
}

inline void StatusResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&base_) -
    reinterpret_cast<char*>(&height_)) + sizeof(base_));
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:tendermint.blockchain.StatusResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatusResponse::ArenaDtor(void* object) {
  StatusResponse* _this = reinterpret_cast< StatusResponse* >(object);
  (void)_this;
}
void StatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.blockchain.StatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&base_) -
      reinterpret_cast<char*>(&height_)) + sizeof(base_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.blockchain.StatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_height(), target);
  }

  // int64 base = 2;
  if (this->_internal_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_base(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.blockchain.StatusResponse)
  return target;
}

size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.blockchain.StatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // int64 base = 2;
  if (this->_internal_base() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_base());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusResponse::GetClassData() const { return &_class_data_; }

void StatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatusResponse *>(to)->MergeFrom(
      static_cast<const StatusResponse &>(from));
}


void StatusResponse::MergeFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.blockchain.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_base() != 0) {
    _internal_set_base(from._internal_base());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.blockchain.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  return true;
}

void StatusResponse::InternalSwap(StatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusResponse, base_)
      + sizeof(StatusResponse::base_)
      - PROTOBUF_FIELD_OFFSET(StatusResponse, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fblockchain_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fblockchain_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fblockchain_2ftypes_2eproto[4]);
}

// ===================================================================

class Message::_Internal {
 public:
  static const ::tendermint::blockchain::BlockRequest& block_request(const Message* msg);
  static const ::tendermint::blockchain::NoBlockResponse& no_block_response(const Message* msg);
  static const ::tendermint::blockchain::BlockResponse& block_response(const Message* msg);
  static const ::tendermint::blockchain::StatusRequest& status_request(const Message* msg);
  static const ::tendermint::blockchain::StatusResponse& status_response(const Message* msg);
};

const ::tendermint::blockchain::BlockRequest&
Message::_Internal::block_request(const Message* msg) {
  return *msg->sum_.block_request_;
}
const ::tendermint::blockchain::NoBlockResponse&
Message::_Internal::no_block_response(const Message* msg) {
  return *msg->sum_.no_block_response_;
}
const ::tendermint::blockchain::BlockResponse&
Message::_Internal::block_response(const Message* msg) {
  return *msg->sum_.block_response_;
}
const ::tendermint::blockchain::StatusRequest&
Message::_Internal::status_request(const Message* msg) {
  return *msg->sum_.status_request_;
}
const ::tendermint::blockchain::StatusResponse&
Message::_Internal::status_response(const Message* msg) {
  return *msg->sum_.status_response_;
}
void Message::set_allocated_block_request(::tendermint::blockchain::BlockRequest* block_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (block_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::blockchain::BlockRequest>::GetOwningArena(block_request);
    if (message_arena != submessage_arena) {
      block_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_request, submessage_arena);
    }
    set_has_block_request();
    sum_.block_request_ = block_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.blockchain.Message.block_request)
}
void Message::set_allocated_no_block_response(::tendermint::blockchain::NoBlockResponse* no_block_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (no_block_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::blockchain::NoBlockResponse>::GetOwningArena(no_block_response);
    if (message_arena != submessage_arena) {
      no_block_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_block_response, submessage_arena);
    }
    set_has_no_block_response();
    sum_.no_block_response_ = no_block_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.blockchain.Message.no_block_response)
}
void Message::set_allocated_block_response(::tendermint::blockchain::BlockResponse* block_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (block_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::blockchain::BlockResponse>::GetOwningArena(block_response);
    if (message_arena != submessage_arena) {
      block_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_response, submessage_arena);
    }
    set_has_block_response();
    sum_.block_response_ = block_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.blockchain.Message.block_response)
}
void Message::set_allocated_status_request(::tendermint::blockchain::StatusRequest* status_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (status_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::blockchain::StatusRequest>::GetOwningArena(status_request);
    if (message_arena != submessage_arena) {
      status_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status_request, submessage_arena);
    }
    set_has_status_request();
    sum_.status_request_ = status_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.blockchain.Message.status_request)
}
void Message::set_allocated_status_response(::tendermint::blockchain::StatusResponse* status_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (status_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::blockchain::StatusResponse>::GetOwningArena(status_response);
    if (message_arena != submessage_arena) {
      status_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status_response, submessage_arena);
    }
    set_has_status_response();
    sum_.status_response_ = status_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.blockchain.Message.status_response)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.blockchain.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_sum();
  switch (from.sum_case()) {
    case kBlockRequest: {
      _internal_mutable_block_request()->::tendermint::blockchain::BlockRequest::MergeFrom(from._internal_block_request());
      break;
    }
    case kNoBlockResponse: {
      _internal_mutable_no_block_response()->::tendermint::blockchain::NoBlockResponse::MergeFrom(from._internal_no_block_response());
      break;
    }
    case kBlockResponse: {
      _internal_mutable_block_response()->::tendermint::blockchain::BlockResponse::MergeFrom(from._internal_block_response());
      break;
    }
    case kStatusRequest: {
      _internal_mutable_status_request()->::tendermint::blockchain::StatusRequest::MergeFrom(from._internal_status_request());
      break;
    }
    case kStatusResponse: {
      _internal_mutable_status_response()->::tendermint::blockchain::StatusResponse::MergeFrom(from._internal_status_response());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.blockchain.Message)
}

inline void Message::SharedCtor() {
clear_has_sum();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:tendermint.blockchain.Message)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_sum()) {
    clear_sum();
  }
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:tendermint.blockchain.Message)
  switch (sum_case()) {
    case kBlockRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.block_request_;
      }
      break;
    }
    case kNoBlockResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.no_block_response_;
      }
      break;
    }
    case kBlockResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.block_response_;
      }
      break;
    }
    case kStatusRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.status_request_;
      }
      break;
    }
    case kStatusResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.status_response_;
      }
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SUM_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.blockchain.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.blockchain.BlockRequest block_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.blockchain.NoBlockResponse no_block_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_block_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.blockchain.BlockResponse block_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.blockchain.StatusRequest status_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.blockchain.StatusResponse status_response = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.blockchain.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.blockchain.BlockRequest block_request = 1;
  if (_internal_has_block_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block_request(this), target, stream);
  }

  // .tendermint.blockchain.NoBlockResponse no_block_response = 2;
  if (_internal_has_no_block_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::no_block_response(this), target, stream);
  }

  // .tendermint.blockchain.BlockResponse block_response = 3;
  if (_internal_has_block_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::block_response(this), target, stream);
  }

  // .tendermint.blockchain.StatusRequest status_request = 4;
  if (_internal_has_status_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::status_request(this), target, stream);
  }

  // .tendermint.blockchain.StatusResponse status_response = 5;
  if (_internal_has_status_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::status_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.blockchain.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.blockchain.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sum_case()) {
    // .tendermint.blockchain.BlockRequest block_request = 1;
    case kBlockRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.block_request_);
      break;
    }
    // .tendermint.blockchain.NoBlockResponse no_block_response = 2;
    case kNoBlockResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.no_block_response_);
      break;
    }
    // .tendermint.blockchain.BlockResponse block_response = 3;
    case kBlockResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.block_response_);
      break;
    }
    // .tendermint.blockchain.StatusRequest status_request = 4;
    case kStatusRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.status_request_);
      break;
    }
    // .tendermint.blockchain.StatusResponse status_response = 5;
    case kStatusResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.status_response_);
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }

void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message *>(to)->MergeFrom(
      static_cast<const Message &>(from));
}


void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.blockchain.Message)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sum_case()) {
    case kBlockRequest: {
      _internal_mutable_block_request()->::tendermint::blockchain::BlockRequest::MergeFrom(from._internal_block_request());
      break;
    }
    case kNoBlockResponse: {
      _internal_mutable_no_block_response()->::tendermint::blockchain::NoBlockResponse::MergeFrom(from._internal_no_block_response());
      break;
    }
    case kBlockResponse: {
      _internal_mutable_block_response()->::tendermint::blockchain::BlockResponse::MergeFrom(from._internal_block_response());
      break;
    }
    case kStatusRequest: {
      _internal_mutable_status_request()->::tendermint::blockchain::StatusRequest::MergeFrom(from._internal_status_request());
      break;
    }
    case kStatusResponse: {
      _internal_mutable_status_response()->::tendermint::blockchain::StatusResponse::MergeFrom(from._internal_status_response());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.blockchain.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(sum_, other->sum_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fblockchain_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fblockchain_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fblockchain_2ftypes_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace blockchain
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::blockchain::BlockRequest* Arena::CreateMaybeMessage< ::tendermint::blockchain::BlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::blockchain::BlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::blockchain::NoBlockResponse* Arena::CreateMaybeMessage< ::tendermint::blockchain::NoBlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::blockchain::NoBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::blockchain::BlockResponse* Arena::CreateMaybeMessage< ::tendermint::blockchain::BlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::blockchain::BlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::blockchain::StatusRequest* Arena::CreateMaybeMessage< ::tendermint::blockchain::StatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::blockchain::StatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::blockchain::StatusResponse* Arena::CreateMaybeMessage< ::tendermint::blockchain::StatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::blockchain::StatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::blockchain::Message* Arena::CreateMaybeMessage< ::tendermint::blockchain::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::blockchain::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
