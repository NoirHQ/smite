// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/types/evidence.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2fevidence_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2fevidence_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "tendermint/types/types.pb.h"
#include "tendermint/types/validator.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tendermint_2ftypes_2fevidence_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2ftypes_2fevidence_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2ftypes_2fevidence_2eproto;
namespace tendermint {
namespace types {
class DuplicateVoteEvidence;
struct DuplicateVoteEvidenceDefaultTypeInternal;
extern DuplicateVoteEvidenceDefaultTypeInternal _DuplicateVoteEvidence_default_instance_;
class Evidence;
struct EvidenceDefaultTypeInternal;
extern EvidenceDefaultTypeInternal _Evidence_default_instance_;
class EvidenceList;
struct EvidenceListDefaultTypeInternal;
extern EvidenceListDefaultTypeInternal _EvidenceList_default_instance_;
class LightClientAttackEvidence;
struct LightClientAttackEvidenceDefaultTypeInternal;
extern LightClientAttackEvidenceDefaultTypeInternal _LightClientAttackEvidence_default_instance_;
}  // namespace types
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> ::tendermint::types::DuplicateVoteEvidence* Arena::CreateMaybeMessage<::tendermint::types::DuplicateVoteEvidence>(Arena*);
template<> ::tendermint::types::Evidence* Arena::CreateMaybeMessage<::tendermint::types::Evidence>(Arena*);
template<> ::tendermint::types::EvidenceList* Arena::CreateMaybeMessage<::tendermint::types::EvidenceList>(Arena*);
template<> ::tendermint::types::LightClientAttackEvidence* Arena::CreateMaybeMessage<::tendermint::types::LightClientAttackEvidence>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tendermint {
namespace types {

// ===================================================================

class Evidence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.Evidence) */ {
 public:
  inline Evidence() : Evidence(nullptr) {}
  ~Evidence() override;
  explicit constexpr Evidence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Evidence(const Evidence& from);
  Evidence(Evidence&& from) noexcept
    : Evidence() {
    *this = ::std::move(from);
  }

  inline Evidence& operator=(const Evidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline Evidence& operator=(Evidence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Evidence& default_instance() {
    return *internal_default_instance();
  }
  enum SumCase {
    kDuplicateVoteEvidence = 1,
    kLightClientAttackEvidence = 2,
    SUM_NOT_SET = 0,
  };

  static inline const Evidence* internal_default_instance() {
    return reinterpret_cast<const Evidence*>(
               &_Evidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Evidence& a, Evidence& b) {
    a.Swap(&b);
  }
  inline void Swap(Evidence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Evidence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Evidence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Evidence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Evidence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Evidence& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Evidence* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.types.Evidence";
  }
  protected:
  explicit Evidence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDuplicateVoteEvidenceFieldNumber = 1,
    kLightClientAttackEvidenceFieldNumber = 2,
  };
  // .tendermint.types.DuplicateVoteEvidence duplicate_vote_evidence = 1;
  bool has_duplicate_vote_evidence() const;
  private:
  bool _internal_has_duplicate_vote_evidence() const;
  public:
  void clear_duplicate_vote_evidence();
  const ::tendermint::types::DuplicateVoteEvidence& duplicate_vote_evidence() const;
  PROTOBUF_NODISCARD ::tendermint::types::DuplicateVoteEvidence* release_duplicate_vote_evidence();
  ::tendermint::types::DuplicateVoteEvidence* mutable_duplicate_vote_evidence();
  void set_allocated_duplicate_vote_evidence(::tendermint::types::DuplicateVoteEvidence* duplicate_vote_evidence);
  private:
  const ::tendermint::types::DuplicateVoteEvidence& _internal_duplicate_vote_evidence() const;
  ::tendermint::types::DuplicateVoteEvidence* _internal_mutable_duplicate_vote_evidence();
  public:
  void unsafe_arena_set_allocated_duplicate_vote_evidence(
      ::tendermint::types::DuplicateVoteEvidence* duplicate_vote_evidence);
  ::tendermint::types::DuplicateVoteEvidence* unsafe_arena_release_duplicate_vote_evidence();

  // .tendermint.types.LightClientAttackEvidence light_client_attack_evidence = 2;
  bool has_light_client_attack_evidence() const;
  private:
  bool _internal_has_light_client_attack_evidence() const;
  public:
  void clear_light_client_attack_evidence();
  const ::tendermint::types::LightClientAttackEvidence& light_client_attack_evidence() const;
  PROTOBUF_NODISCARD ::tendermint::types::LightClientAttackEvidence* release_light_client_attack_evidence();
  ::tendermint::types::LightClientAttackEvidence* mutable_light_client_attack_evidence();
  void set_allocated_light_client_attack_evidence(::tendermint::types::LightClientAttackEvidence* light_client_attack_evidence);
  private:
  const ::tendermint::types::LightClientAttackEvidence& _internal_light_client_attack_evidence() const;
  ::tendermint::types::LightClientAttackEvidence* _internal_mutable_light_client_attack_evidence();
  public:
  void unsafe_arena_set_allocated_light_client_attack_evidence(
      ::tendermint::types::LightClientAttackEvidence* light_client_attack_evidence);
  ::tendermint::types::LightClientAttackEvidence* unsafe_arena_release_light_client_attack_evidence();

  void clear_sum();
  SumCase sum_case() const;
  // @@protoc_insertion_point(class_scope:tendermint.types.Evidence)
 private:
  class _Internal;
  void set_has_duplicate_vote_evidence();
  void set_has_light_client_attack_evidence();

  inline bool has_sum() const;
  inline void clear_has_sum();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union SumUnion {
    constexpr SumUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::tendermint::types::DuplicateVoteEvidence* duplicate_vote_evidence_;
    ::tendermint::types::LightClientAttackEvidence* light_client_attack_evidence_;
  } sum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_tendermint_2ftypes_2fevidence_2eproto;
};
// -------------------------------------------------------------------

class DuplicateVoteEvidence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.DuplicateVoteEvidence) */ {
 public:
  inline DuplicateVoteEvidence() : DuplicateVoteEvidence(nullptr) {}
  ~DuplicateVoteEvidence() override;
  explicit constexpr DuplicateVoteEvidence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DuplicateVoteEvidence(const DuplicateVoteEvidence& from);
  DuplicateVoteEvidence(DuplicateVoteEvidence&& from) noexcept
    : DuplicateVoteEvidence() {
    *this = ::std::move(from);
  }

  inline DuplicateVoteEvidence& operator=(const DuplicateVoteEvidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline DuplicateVoteEvidence& operator=(DuplicateVoteEvidence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DuplicateVoteEvidence& default_instance() {
    return *internal_default_instance();
  }
  static inline const DuplicateVoteEvidence* internal_default_instance() {
    return reinterpret_cast<const DuplicateVoteEvidence*>(
               &_DuplicateVoteEvidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DuplicateVoteEvidence& a, DuplicateVoteEvidence& b) {
    a.Swap(&b);
  }
  inline void Swap(DuplicateVoteEvidence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DuplicateVoteEvidence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DuplicateVoteEvidence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DuplicateVoteEvidence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DuplicateVoteEvidence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DuplicateVoteEvidence& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DuplicateVoteEvidence* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.types.DuplicateVoteEvidence";
  }
  protected:
  explicit DuplicateVoteEvidence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoteAFieldNumber = 1,
    kVoteBFieldNumber = 2,
    kTimestampFieldNumber = 5,
    kTotalVotingPowerFieldNumber = 3,
    kValidatorPowerFieldNumber = 4,
  };
  // .tendermint.types.Vote vote_a = 1;
  bool has_vote_a() const;
  private:
  bool _internal_has_vote_a() const;
  public:
  void clear_vote_a();
  const ::tendermint::types::Vote& vote_a() const;
  PROTOBUF_NODISCARD ::tendermint::types::Vote* release_vote_a();
  ::tendermint::types::Vote* mutable_vote_a();
  void set_allocated_vote_a(::tendermint::types::Vote* vote_a);
  private:
  const ::tendermint::types::Vote& _internal_vote_a() const;
  ::tendermint::types::Vote* _internal_mutable_vote_a();
  public:
  void unsafe_arena_set_allocated_vote_a(
      ::tendermint::types::Vote* vote_a);
  ::tendermint::types::Vote* unsafe_arena_release_vote_a();

  // .tendermint.types.Vote vote_b = 2;
  bool has_vote_b() const;
  private:
  bool _internal_has_vote_b() const;
  public:
  void clear_vote_b();
  const ::tendermint::types::Vote& vote_b() const;
  PROTOBUF_NODISCARD ::tendermint::types::Vote* release_vote_b();
  ::tendermint::types::Vote* mutable_vote_b();
  void set_allocated_vote_b(::tendermint::types::Vote* vote_b);
  private:
  const ::tendermint::types::Vote& _internal_vote_b() const;
  ::tendermint::types::Vote* _internal_mutable_vote_b();
  public:
  void unsafe_arena_set_allocated_vote_b(
      ::tendermint::types::Vote* vote_b);
  ::tendermint::types::Vote* unsafe_arena_release_vote_b();

  // .google.protobuf.Timestamp timestamp = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // int64 total_voting_power = 3;
  void clear_total_voting_power();
  int64_t total_voting_power() const;
  void set_total_voting_power(int64_t value);
  private:
  int64_t _internal_total_voting_power() const;
  void _internal_set_total_voting_power(int64_t value);
  public:

  // int64 validator_power = 4;
  void clear_validator_power();
  int64_t validator_power() const;
  void set_validator_power(int64_t value);
  private:
  int64_t _internal_validator_power() const;
  void _internal_set_validator_power(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.types.DuplicateVoteEvidence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tendermint::types::Vote* vote_a_;
  ::tendermint::types::Vote* vote_b_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  int64_t total_voting_power_;
  int64_t validator_power_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2ftypes_2fevidence_2eproto;
};
// -------------------------------------------------------------------

class LightClientAttackEvidence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.LightClientAttackEvidence) */ {
 public:
  inline LightClientAttackEvidence() : LightClientAttackEvidence(nullptr) {}
  ~LightClientAttackEvidence() override;
  explicit constexpr LightClientAttackEvidence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LightClientAttackEvidence(const LightClientAttackEvidence& from);
  LightClientAttackEvidence(LightClientAttackEvidence&& from) noexcept
    : LightClientAttackEvidence() {
    *this = ::std::move(from);
  }

  inline LightClientAttackEvidence& operator=(const LightClientAttackEvidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightClientAttackEvidence& operator=(LightClientAttackEvidence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LightClientAttackEvidence& default_instance() {
    return *internal_default_instance();
  }
  static inline const LightClientAttackEvidence* internal_default_instance() {
    return reinterpret_cast<const LightClientAttackEvidence*>(
               &_LightClientAttackEvidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LightClientAttackEvidence& a, LightClientAttackEvidence& b) {
    a.Swap(&b);
  }
  inline void Swap(LightClientAttackEvidence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LightClientAttackEvidence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LightClientAttackEvidence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LightClientAttackEvidence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LightClientAttackEvidence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LightClientAttackEvidence& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightClientAttackEvidence* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.types.LightClientAttackEvidence";
  }
  protected:
  explicit LightClientAttackEvidence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kByzantineValidatorsFieldNumber = 3,
    kConflictingBlockFieldNumber = 1,
    kTimestampFieldNumber = 5,
    kCommonHeightFieldNumber = 2,
    kTotalVotingPowerFieldNumber = 4,
  };
  // repeated .tendermint.types.Validator byzantine_validators = 3;
  int byzantine_validators_size() const;
  private:
  int _internal_byzantine_validators_size() const;
  public:
  void clear_byzantine_validators();
  ::tendermint::types::Validator* mutable_byzantine_validators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::types::Validator >*
      mutable_byzantine_validators();
  private:
  const ::tendermint::types::Validator& _internal_byzantine_validators(int index) const;
  ::tendermint::types::Validator* _internal_add_byzantine_validators();
  public:
  const ::tendermint::types::Validator& byzantine_validators(int index) const;
  ::tendermint::types::Validator* add_byzantine_validators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::types::Validator >&
      byzantine_validators() const;

  // .tendermint.types.LightBlock conflicting_block = 1;
  bool has_conflicting_block() const;
  private:
  bool _internal_has_conflicting_block() const;
  public:
  void clear_conflicting_block();
  const ::tendermint::types::LightBlock& conflicting_block() const;
  PROTOBUF_NODISCARD ::tendermint::types::LightBlock* release_conflicting_block();
  ::tendermint::types::LightBlock* mutable_conflicting_block();
  void set_allocated_conflicting_block(::tendermint::types::LightBlock* conflicting_block);
  private:
  const ::tendermint::types::LightBlock& _internal_conflicting_block() const;
  ::tendermint::types::LightBlock* _internal_mutable_conflicting_block();
  public:
  void unsafe_arena_set_allocated_conflicting_block(
      ::tendermint::types::LightBlock* conflicting_block);
  ::tendermint::types::LightBlock* unsafe_arena_release_conflicting_block();

  // .google.protobuf.Timestamp timestamp = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // int64 common_height = 2;
  void clear_common_height();
  int64_t common_height() const;
  void set_common_height(int64_t value);
  private:
  int64_t _internal_common_height() const;
  void _internal_set_common_height(int64_t value);
  public:

  // int64 total_voting_power = 4;
  void clear_total_voting_power();
  int64_t total_voting_power() const;
  void set_total_voting_power(int64_t value);
  private:
  int64_t _internal_total_voting_power() const;
  void _internal_set_total_voting_power(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.types.LightClientAttackEvidence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::types::Validator > byzantine_validators_;
  ::tendermint::types::LightBlock* conflicting_block_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  int64_t common_height_;
  int64_t total_voting_power_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2ftypes_2fevidence_2eproto;
};
// -------------------------------------------------------------------

class EvidenceList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.EvidenceList) */ {
 public:
  inline EvidenceList() : EvidenceList(nullptr) {}
  ~EvidenceList() override;
  explicit constexpr EvidenceList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EvidenceList(const EvidenceList& from);
  EvidenceList(EvidenceList&& from) noexcept
    : EvidenceList() {
    *this = ::std::move(from);
  }

  inline EvidenceList& operator=(const EvidenceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvidenceList& operator=(EvidenceList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EvidenceList& default_instance() {
    return *internal_default_instance();
  }
  static inline const EvidenceList* internal_default_instance() {
    return reinterpret_cast<const EvidenceList*>(
               &_EvidenceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EvidenceList& a, EvidenceList& b) {
    a.Swap(&b);
  }
  inline void Swap(EvidenceList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvidenceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EvidenceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EvidenceList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EvidenceList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EvidenceList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvidenceList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.types.EvidenceList";
  }
  protected:
  explicit EvidenceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvidenceFieldNumber = 1,
  };
  // repeated .tendermint.types.Evidence evidence = 1 [(.gogoproto.nullable) = false];
  int evidence_size() const;
  private:
  int _internal_evidence_size() const;
  public:
  void clear_evidence();
  ::tendermint::types::Evidence* mutable_evidence(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::types::Evidence >*
      mutable_evidence();
  private:
  const ::tendermint::types::Evidence& _internal_evidence(int index) const;
  ::tendermint::types::Evidence* _internal_add_evidence();
  public:
  const ::tendermint::types::Evidence& evidence(int index) const;
  ::tendermint::types::Evidence* add_evidence();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::types::Evidence >&
      evidence() const;

  // @@protoc_insertion_point(class_scope:tendermint.types.EvidenceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::types::Evidence > evidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2ftypes_2fevidence_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Evidence

// .tendermint.types.DuplicateVoteEvidence duplicate_vote_evidence = 1;
inline bool Evidence::_internal_has_duplicate_vote_evidence() const {
  return sum_case() == kDuplicateVoteEvidence;
}
inline bool Evidence::has_duplicate_vote_evidence() const {
  return _internal_has_duplicate_vote_evidence();
}
inline void Evidence::set_has_duplicate_vote_evidence() {
  _oneof_case_[0] = kDuplicateVoteEvidence;
}
inline void Evidence::clear_duplicate_vote_evidence() {
  if (_internal_has_duplicate_vote_evidence()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sum_.duplicate_vote_evidence_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::types::DuplicateVoteEvidence* Evidence::release_duplicate_vote_evidence() {
  // @@protoc_insertion_point(field_release:tendermint.types.Evidence.duplicate_vote_evidence)
  if (_internal_has_duplicate_vote_evidence()) {
    clear_has_sum();
      ::tendermint::types::DuplicateVoteEvidence* temp = sum_.duplicate_vote_evidence_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sum_.duplicate_vote_evidence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::types::DuplicateVoteEvidence& Evidence::_internal_duplicate_vote_evidence() const {
  return _internal_has_duplicate_vote_evidence()
      ? *sum_.duplicate_vote_evidence_
      : reinterpret_cast< ::tendermint::types::DuplicateVoteEvidence&>(::tendermint::types::_DuplicateVoteEvidence_default_instance_);
}
inline const ::tendermint::types::DuplicateVoteEvidence& Evidence::duplicate_vote_evidence() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Evidence.duplicate_vote_evidence)
  return _internal_duplicate_vote_evidence();
}
inline ::tendermint::types::DuplicateVoteEvidence* Evidence::unsafe_arena_release_duplicate_vote_evidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.types.Evidence.duplicate_vote_evidence)
  if (_internal_has_duplicate_vote_evidence()) {
    clear_has_sum();
    ::tendermint::types::DuplicateVoteEvidence* temp = sum_.duplicate_vote_evidence_;
    sum_.duplicate_vote_evidence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Evidence::unsafe_arena_set_allocated_duplicate_vote_evidence(::tendermint::types::DuplicateVoteEvidence* duplicate_vote_evidence) {
  clear_sum();
  if (duplicate_vote_evidence) {
    set_has_duplicate_vote_evidence();
    sum_.duplicate_vote_evidence_ = duplicate_vote_evidence;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Evidence.duplicate_vote_evidence)
}
inline ::tendermint::types::DuplicateVoteEvidence* Evidence::_internal_mutable_duplicate_vote_evidence() {
  if (!_internal_has_duplicate_vote_evidence()) {
    clear_sum();
    set_has_duplicate_vote_evidence();
    sum_.duplicate_vote_evidence_ = CreateMaybeMessage< ::tendermint::types::DuplicateVoteEvidence >(GetArenaForAllocation());
  }
  return sum_.duplicate_vote_evidence_;
}
inline ::tendermint::types::DuplicateVoteEvidence* Evidence::mutable_duplicate_vote_evidence() {
  ::tendermint::types::DuplicateVoteEvidence* _msg = _internal_mutable_duplicate_vote_evidence();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Evidence.duplicate_vote_evidence)
  return _msg;
}

// .tendermint.types.LightClientAttackEvidence light_client_attack_evidence = 2;
inline bool Evidence::_internal_has_light_client_attack_evidence() const {
  return sum_case() == kLightClientAttackEvidence;
}
inline bool Evidence::has_light_client_attack_evidence() const {
  return _internal_has_light_client_attack_evidence();
}
inline void Evidence::set_has_light_client_attack_evidence() {
  _oneof_case_[0] = kLightClientAttackEvidence;
}
inline void Evidence::clear_light_client_attack_evidence() {
  if (_internal_has_light_client_attack_evidence()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sum_.light_client_attack_evidence_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::types::LightClientAttackEvidence* Evidence::release_light_client_attack_evidence() {
  // @@protoc_insertion_point(field_release:tendermint.types.Evidence.light_client_attack_evidence)
  if (_internal_has_light_client_attack_evidence()) {
    clear_has_sum();
      ::tendermint::types::LightClientAttackEvidence* temp = sum_.light_client_attack_evidence_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sum_.light_client_attack_evidence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::types::LightClientAttackEvidence& Evidence::_internal_light_client_attack_evidence() const {
  return _internal_has_light_client_attack_evidence()
      ? *sum_.light_client_attack_evidence_
      : reinterpret_cast< ::tendermint::types::LightClientAttackEvidence&>(::tendermint::types::_LightClientAttackEvidence_default_instance_);
}
inline const ::tendermint::types::LightClientAttackEvidence& Evidence::light_client_attack_evidence() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Evidence.light_client_attack_evidence)
  return _internal_light_client_attack_evidence();
}
inline ::tendermint::types::LightClientAttackEvidence* Evidence::unsafe_arena_release_light_client_attack_evidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.types.Evidence.light_client_attack_evidence)
  if (_internal_has_light_client_attack_evidence()) {
    clear_has_sum();
    ::tendermint::types::LightClientAttackEvidence* temp = sum_.light_client_attack_evidence_;
    sum_.light_client_attack_evidence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Evidence::unsafe_arena_set_allocated_light_client_attack_evidence(::tendermint::types::LightClientAttackEvidence* light_client_attack_evidence) {
  clear_sum();
  if (light_client_attack_evidence) {
    set_has_light_client_attack_evidence();
    sum_.light_client_attack_evidence_ = light_client_attack_evidence;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Evidence.light_client_attack_evidence)
}
inline ::tendermint::types::LightClientAttackEvidence* Evidence::_internal_mutable_light_client_attack_evidence() {
  if (!_internal_has_light_client_attack_evidence()) {
    clear_sum();
    set_has_light_client_attack_evidence();
    sum_.light_client_attack_evidence_ = CreateMaybeMessage< ::tendermint::types::LightClientAttackEvidence >(GetArenaForAllocation());
  }
  return sum_.light_client_attack_evidence_;
}
inline ::tendermint::types::LightClientAttackEvidence* Evidence::mutable_light_client_attack_evidence() {
  ::tendermint::types::LightClientAttackEvidence* _msg = _internal_mutable_light_client_attack_evidence();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Evidence.light_client_attack_evidence)
  return _msg;
}

inline bool Evidence::has_sum() const {
  return sum_case() != SUM_NOT_SET;
}
inline void Evidence::clear_has_sum() {
  _oneof_case_[0] = SUM_NOT_SET;
}
inline Evidence::SumCase Evidence::sum_case() const {
  return Evidence::SumCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DuplicateVoteEvidence

// .tendermint.types.Vote vote_a = 1;
inline bool DuplicateVoteEvidence::_internal_has_vote_a() const {
  return this != internal_default_instance() && vote_a_ != nullptr;
}
inline bool DuplicateVoteEvidence::has_vote_a() const {
  return _internal_has_vote_a();
}
inline const ::tendermint::types::Vote& DuplicateVoteEvidence::_internal_vote_a() const {
  const ::tendermint::types::Vote* p = vote_a_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Vote&>(
      ::tendermint::types::_Vote_default_instance_);
}
inline const ::tendermint::types::Vote& DuplicateVoteEvidence::vote_a() const {
  // @@protoc_insertion_point(field_get:tendermint.types.DuplicateVoteEvidence.vote_a)
  return _internal_vote_a();
}
inline void DuplicateVoteEvidence::unsafe_arena_set_allocated_vote_a(
    ::tendermint::types::Vote* vote_a) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote_a_);
  }
  vote_a_ = vote_a;
  if (vote_a) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.DuplicateVoteEvidence.vote_a)
}
inline ::tendermint::types::Vote* DuplicateVoteEvidence::release_vote_a() {
  
  ::tendermint::types::Vote* temp = vote_a_;
  vote_a_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::Vote* DuplicateVoteEvidence::unsafe_arena_release_vote_a() {
  // @@protoc_insertion_point(field_release:tendermint.types.DuplicateVoteEvidence.vote_a)
  
  ::tendermint::types::Vote* temp = vote_a_;
  vote_a_ = nullptr;
  return temp;
}
inline ::tendermint::types::Vote* DuplicateVoteEvidence::_internal_mutable_vote_a() {
  
  if (vote_a_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::Vote>(GetArenaForAllocation());
    vote_a_ = p;
  }
  return vote_a_;
}
inline ::tendermint::types::Vote* DuplicateVoteEvidence::mutable_vote_a() {
  ::tendermint::types::Vote* _msg = _internal_mutable_vote_a();
  // @@protoc_insertion_point(field_mutable:tendermint.types.DuplicateVoteEvidence.vote_a)
  return _msg;
}
inline void DuplicateVoteEvidence::set_allocated_vote_a(::tendermint::types::Vote* vote_a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote_a_);
  }
  if (vote_a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote_a));
    if (message_arena != submessage_arena) {
      vote_a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote_a, submessage_arena);
    }
    
  } else {
    
  }
  vote_a_ = vote_a;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.DuplicateVoteEvidence.vote_a)
}

// .tendermint.types.Vote vote_b = 2;
inline bool DuplicateVoteEvidence::_internal_has_vote_b() const {
  return this != internal_default_instance() && vote_b_ != nullptr;
}
inline bool DuplicateVoteEvidence::has_vote_b() const {
  return _internal_has_vote_b();
}
inline const ::tendermint::types::Vote& DuplicateVoteEvidence::_internal_vote_b() const {
  const ::tendermint::types::Vote* p = vote_b_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Vote&>(
      ::tendermint::types::_Vote_default_instance_);
}
inline const ::tendermint::types::Vote& DuplicateVoteEvidence::vote_b() const {
  // @@protoc_insertion_point(field_get:tendermint.types.DuplicateVoteEvidence.vote_b)
  return _internal_vote_b();
}
inline void DuplicateVoteEvidence::unsafe_arena_set_allocated_vote_b(
    ::tendermint::types::Vote* vote_b) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote_b_);
  }
  vote_b_ = vote_b;
  if (vote_b) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.DuplicateVoteEvidence.vote_b)
}
inline ::tendermint::types::Vote* DuplicateVoteEvidence::release_vote_b() {
  
  ::tendermint::types::Vote* temp = vote_b_;
  vote_b_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::Vote* DuplicateVoteEvidence::unsafe_arena_release_vote_b() {
  // @@protoc_insertion_point(field_release:tendermint.types.DuplicateVoteEvidence.vote_b)
  
  ::tendermint::types::Vote* temp = vote_b_;
  vote_b_ = nullptr;
  return temp;
}
inline ::tendermint::types::Vote* DuplicateVoteEvidence::_internal_mutable_vote_b() {
  
  if (vote_b_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::Vote>(GetArenaForAllocation());
    vote_b_ = p;
  }
  return vote_b_;
}
inline ::tendermint::types::Vote* DuplicateVoteEvidence::mutable_vote_b() {
  ::tendermint::types::Vote* _msg = _internal_mutable_vote_b();
  // @@protoc_insertion_point(field_mutable:tendermint.types.DuplicateVoteEvidence.vote_b)
  return _msg;
}
inline void DuplicateVoteEvidence::set_allocated_vote_b(::tendermint::types::Vote* vote_b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote_b_);
  }
  if (vote_b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote_b));
    if (message_arena != submessage_arena) {
      vote_b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote_b, submessage_arena);
    }
    
  } else {
    
  }
  vote_b_ = vote_b;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.DuplicateVoteEvidence.vote_b)
}

// int64 total_voting_power = 3;
inline void DuplicateVoteEvidence::clear_total_voting_power() {
  total_voting_power_ = int64_t{0};
}
inline int64_t DuplicateVoteEvidence::_internal_total_voting_power() const {
  return total_voting_power_;
}
inline int64_t DuplicateVoteEvidence::total_voting_power() const {
  // @@protoc_insertion_point(field_get:tendermint.types.DuplicateVoteEvidence.total_voting_power)
  return _internal_total_voting_power();
}
inline void DuplicateVoteEvidence::_internal_set_total_voting_power(int64_t value) {
  
  total_voting_power_ = value;
}
inline void DuplicateVoteEvidence::set_total_voting_power(int64_t value) {
  _internal_set_total_voting_power(value);
  // @@protoc_insertion_point(field_set:tendermint.types.DuplicateVoteEvidence.total_voting_power)
}

// int64 validator_power = 4;
inline void DuplicateVoteEvidence::clear_validator_power() {
  validator_power_ = int64_t{0};
}
inline int64_t DuplicateVoteEvidence::_internal_validator_power() const {
  return validator_power_;
}
inline int64_t DuplicateVoteEvidence::validator_power() const {
  // @@protoc_insertion_point(field_get:tendermint.types.DuplicateVoteEvidence.validator_power)
  return _internal_validator_power();
}
inline void DuplicateVoteEvidence::_internal_set_validator_power(int64_t value) {
  
  validator_power_ = value;
}
inline void DuplicateVoteEvidence::set_validator_power(int64_t value) {
  _internal_set_validator_power(value);
  // @@protoc_insertion_point(field_set:tendermint.types.DuplicateVoteEvidence.validator_power)
}

// .google.protobuf.Timestamp timestamp = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool DuplicateVoteEvidence::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool DuplicateVoteEvidence::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& DuplicateVoteEvidence::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& DuplicateVoteEvidence::timestamp() const {
  // @@protoc_insertion_point(field_get:tendermint.types.DuplicateVoteEvidence.timestamp)
  return _internal_timestamp();
}
inline void DuplicateVoteEvidence::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.DuplicateVoteEvidence.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DuplicateVoteEvidence::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DuplicateVoteEvidence::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:tendermint.types.DuplicateVoteEvidence.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DuplicateVoteEvidence::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DuplicateVoteEvidence::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:tendermint.types.DuplicateVoteEvidence.timestamp)
  return _msg;
}
inline void DuplicateVoteEvidence::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.DuplicateVoteEvidence.timestamp)
}

// -------------------------------------------------------------------

// LightClientAttackEvidence

// .tendermint.types.LightBlock conflicting_block = 1;
inline bool LightClientAttackEvidence::_internal_has_conflicting_block() const {
  return this != internal_default_instance() && conflicting_block_ != nullptr;
}
inline bool LightClientAttackEvidence::has_conflicting_block() const {
  return _internal_has_conflicting_block();
}
inline const ::tendermint::types::LightBlock& LightClientAttackEvidence::_internal_conflicting_block() const {
  const ::tendermint::types::LightBlock* p = conflicting_block_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::LightBlock&>(
      ::tendermint::types::_LightBlock_default_instance_);
}
inline const ::tendermint::types::LightBlock& LightClientAttackEvidence::conflicting_block() const {
  // @@protoc_insertion_point(field_get:tendermint.types.LightClientAttackEvidence.conflicting_block)
  return _internal_conflicting_block();
}
inline void LightClientAttackEvidence::unsafe_arena_set_allocated_conflicting_block(
    ::tendermint::types::LightBlock* conflicting_block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conflicting_block_);
  }
  conflicting_block_ = conflicting_block;
  if (conflicting_block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.LightClientAttackEvidence.conflicting_block)
}
inline ::tendermint::types::LightBlock* LightClientAttackEvidence::release_conflicting_block() {
  
  ::tendermint::types::LightBlock* temp = conflicting_block_;
  conflicting_block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::LightBlock* LightClientAttackEvidence::unsafe_arena_release_conflicting_block() {
  // @@protoc_insertion_point(field_release:tendermint.types.LightClientAttackEvidence.conflicting_block)
  
  ::tendermint::types::LightBlock* temp = conflicting_block_;
  conflicting_block_ = nullptr;
  return temp;
}
inline ::tendermint::types::LightBlock* LightClientAttackEvidence::_internal_mutable_conflicting_block() {
  
  if (conflicting_block_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::LightBlock>(GetArenaForAllocation());
    conflicting_block_ = p;
  }
  return conflicting_block_;
}
inline ::tendermint::types::LightBlock* LightClientAttackEvidence::mutable_conflicting_block() {
  ::tendermint::types::LightBlock* _msg = _internal_mutable_conflicting_block();
  // @@protoc_insertion_point(field_mutable:tendermint.types.LightClientAttackEvidence.conflicting_block)
  return _msg;
}
inline void LightClientAttackEvidence::set_allocated_conflicting_block(::tendermint::types::LightBlock* conflicting_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(conflicting_block_);
  }
  if (conflicting_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conflicting_block));
    if (message_arena != submessage_arena) {
      conflicting_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conflicting_block, submessage_arena);
    }
    
  } else {
    
  }
  conflicting_block_ = conflicting_block;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.LightClientAttackEvidence.conflicting_block)
}

// int64 common_height = 2;
inline void LightClientAttackEvidence::clear_common_height() {
  common_height_ = int64_t{0};
}
inline int64_t LightClientAttackEvidence::_internal_common_height() const {
  return common_height_;
}
inline int64_t LightClientAttackEvidence::common_height() const {
  // @@protoc_insertion_point(field_get:tendermint.types.LightClientAttackEvidence.common_height)
  return _internal_common_height();
}
inline void LightClientAttackEvidence::_internal_set_common_height(int64_t value) {
  
  common_height_ = value;
}
inline void LightClientAttackEvidence::set_common_height(int64_t value) {
  _internal_set_common_height(value);
  // @@protoc_insertion_point(field_set:tendermint.types.LightClientAttackEvidence.common_height)
}

// repeated .tendermint.types.Validator byzantine_validators = 3;
inline int LightClientAttackEvidence::_internal_byzantine_validators_size() const {
  return byzantine_validators_.size();
}
inline int LightClientAttackEvidence::byzantine_validators_size() const {
  return _internal_byzantine_validators_size();
}
inline ::tendermint::types::Validator* LightClientAttackEvidence::mutable_byzantine_validators(int index) {
  // @@protoc_insertion_point(field_mutable:tendermint.types.LightClientAttackEvidence.byzantine_validators)
  return byzantine_validators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::types::Validator >*
LightClientAttackEvidence::mutable_byzantine_validators() {
  // @@protoc_insertion_point(field_mutable_list:tendermint.types.LightClientAttackEvidence.byzantine_validators)
  return &byzantine_validators_;
}
inline const ::tendermint::types::Validator& LightClientAttackEvidence::_internal_byzantine_validators(int index) const {
  return byzantine_validators_.Get(index);
}
inline const ::tendermint::types::Validator& LightClientAttackEvidence::byzantine_validators(int index) const {
  // @@protoc_insertion_point(field_get:tendermint.types.LightClientAttackEvidence.byzantine_validators)
  return _internal_byzantine_validators(index);
}
inline ::tendermint::types::Validator* LightClientAttackEvidence::_internal_add_byzantine_validators() {
  return byzantine_validators_.Add();
}
inline ::tendermint::types::Validator* LightClientAttackEvidence::add_byzantine_validators() {
  ::tendermint::types::Validator* _add = _internal_add_byzantine_validators();
  // @@protoc_insertion_point(field_add:tendermint.types.LightClientAttackEvidence.byzantine_validators)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::types::Validator >&
LightClientAttackEvidence::byzantine_validators() const {
  // @@protoc_insertion_point(field_list:tendermint.types.LightClientAttackEvidence.byzantine_validators)
  return byzantine_validators_;
}

// int64 total_voting_power = 4;
inline void LightClientAttackEvidence::clear_total_voting_power() {
  total_voting_power_ = int64_t{0};
}
inline int64_t LightClientAttackEvidence::_internal_total_voting_power() const {
  return total_voting_power_;
}
inline int64_t LightClientAttackEvidence::total_voting_power() const {
  // @@protoc_insertion_point(field_get:tendermint.types.LightClientAttackEvidence.total_voting_power)
  return _internal_total_voting_power();
}
inline void LightClientAttackEvidence::_internal_set_total_voting_power(int64_t value) {
  
  total_voting_power_ = value;
}
inline void LightClientAttackEvidence::set_total_voting_power(int64_t value) {
  _internal_set_total_voting_power(value);
  // @@protoc_insertion_point(field_set:tendermint.types.LightClientAttackEvidence.total_voting_power)
}

// .google.protobuf.Timestamp timestamp = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool LightClientAttackEvidence::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool LightClientAttackEvidence::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LightClientAttackEvidence::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LightClientAttackEvidence::timestamp() const {
  // @@protoc_insertion_point(field_get:tendermint.types.LightClientAttackEvidence.timestamp)
  return _internal_timestamp();
}
inline void LightClientAttackEvidence::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.LightClientAttackEvidence.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LightClientAttackEvidence::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LightClientAttackEvidence::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:tendermint.types.LightClientAttackEvidence.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LightClientAttackEvidence::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LightClientAttackEvidence::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:tendermint.types.LightClientAttackEvidence.timestamp)
  return _msg;
}
inline void LightClientAttackEvidence::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.LightClientAttackEvidence.timestamp)
}

// -------------------------------------------------------------------

// EvidenceList

// repeated .tendermint.types.Evidence evidence = 1 [(.gogoproto.nullable) = false];
inline int EvidenceList::_internal_evidence_size() const {
  return evidence_.size();
}
inline int EvidenceList::evidence_size() const {
  return _internal_evidence_size();
}
inline void EvidenceList::clear_evidence() {
  evidence_.Clear();
}
inline ::tendermint::types::Evidence* EvidenceList::mutable_evidence(int index) {
  // @@protoc_insertion_point(field_mutable:tendermint.types.EvidenceList.evidence)
  return evidence_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::types::Evidence >*
EvidenceList::mutable_evidence() {
  // @@protoc_insertion_point(field_mutable_list:tendermint.types.EvidenceList.evidence)
  return &evidence_;
}
inline const ::tendermint::types::Evidence& EvidenceList::_internal_evidence(int index) const {
  return evidence_.Get(index);
}
inline const ::tendermint::types::Evidence& EvidenceList::evidence(int index) const {
  // @@protoc_insertion_point(field_get:tendermint.types.EvidenceList.evidence)
  return _internal_evidence(index);
}
inline ::tendermint::types::Evidence* EvidenceList::_internal_add_evidence() {
  return evidence_.Add();
}
inline ::tendermint::types::Evidence* EvidenceList::add_evidence() {
  ::tendermint::types::Evidence* _add = _internal_add_evidence();
  // @@protoc_insertion_point(field_add:tendermint.types.EvidenceList.evidence)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::types::Evidence >&
EvidenceList::evidence() const {
  // @@protoc_insertion_point(field_list:tendermint.types.EvidenceList.evidence)
  return evidence_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace tendermint

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2fevidence_2eproto
