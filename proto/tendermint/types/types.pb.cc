// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/types/types.proto

#include "tendermint/types/types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tendermint {
namespace types {
constexpr PartSetHeader::PartSetHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_(0u){}
struct PartSetHeaderDefaultTypeInternal {
  constexpr PartSetHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PartSetHeaderDefaultTypeInternal() {}
  union {
    PartSetHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PartSetHeaderDefaultTypeInternal _PartSetHeader_default_instance_;
constexpr Part::Part(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proof_(nullptr)
  , index_(0u){}
struct PartDefaultTypeInternal {
  constexpr PartDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PartDefaultTypeInternal() {}
  union {
    Part _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PartDefaultTypeInternal _Part_default_instance_;
constexpr BlockID::BlockID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , part_set_header_(nullptr){}
struct BlockIDDefaultTypeInternal {
  constexpr BlockIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockIDDefaultTypeInternal() {}
  union {
    BlockID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockIDDefaultTypeInternal _BlockID_default_instance_;
constexpr Header::Header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_commit_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , validators_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , next_validators_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , consensus_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_results_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , evidence_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proposer_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(nullptr)
  , time_(nullptr)
  , last_block_id_(nullptr)
  , height_(int64_t{0}){}
struct HeaderDefaultTypeInternal {
  constexpr HeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderDefaultTypeInternal _Header_default_instance_;
constexpr Data::Data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : txs_(){}
struct DataDefaultTypeInternal {
  constexpr DataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataDefaultTypeInternal() {}
  union {
    Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataDefaultTypeInternal _Data_default_instance_;
constexpr Vote::Vote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : validator_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_id_(nullptr)
  , timestamp_(nullptr)
  , height_(int64_t{0})
  , type_(0)

  , round_(0)
  , validator_index_(0){}
struct VoteDefaultTypeInternal {
  constexpr VoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoteDefaultTypeInternal() {}
  union {
    Vote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoteDefaultTypeInternal _Vote_default_instance_;
constexpr Commit::Commit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signatures_()
  , block_id_(nullptr)
  , height_(int64_t{0})
  , round_(0){}
struct CommitDefaultTypeInternal {
  constexpr CommitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommitDefaultTypeInternal() {}
  union {
    Commit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommitDefaultTypeInternal _Commit_default_instance_;
constexpr CommitSig::CommitSig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : validator_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(nullptr)
  , block_id_flag_(0)
{}
struct CommitSigDefaultTypeInternal {
  constexpr CommitSigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommitSigDefaultTypeInternal() {}
  union {
    CommitSig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommitSigDefaultTypeInternal _CommitSig_default_instance_;
constexpr Proposal::Proposal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_id_(nullptr)
  , timestamp_(nullptr)
  , height_(int64_t{0})
  , type_(0)

  , round_(0)
  , pol_round_(0){}
struct ProposalDefaultTypeInternal {
  constexpr ProposalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProposalDefaultTypeInternal() {}
  union {
    Proposal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProposalDefaultTypeInternal _Proposal_default_instance_;
constexpr SignedHeader::SignedHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , commit_(nullptr){}
struct SignedHeaderDefaultTypeInternal {
  constexpr SignedHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignedHeaderDefaultTypeInternal() {}
  union {
    SignedHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignedHeaderDefaultTypeInternal _SignedHeader_default_instance_;
constexpr LightBlock::LightBlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signed_header_(nullptr)
  , validator_set_(nullptr){}
struct LightBlockDefaultTypeInternal {
  constexpr LightBlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LightBlockDefaultTypeInternal() {}
  union {
    LightBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LightBlockDefaultTypeInternal _LightBlock_default_instance_;
constexpr BlockMeta::BlockMeta(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_id_(nullptr)
  , header_(nullptr)
  , block_size_(int64_t{0})
  , num_txs_(int64_t{0}){}
struct BlockMetaDefaultTypeInternal {
  constexpr BlockMetaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockMetaDefaultTypeInternal() {}
  union {
    BlockMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockMetaDefaultTypeInternal _BlockMeta_default_instance_;
constexpr TxProof::TxProof(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : root_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proof_(nullptr){}
struct TxProofDefaultTypeInternal {
  constexpr TxProofDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TxProofDefaultTypeInternal() {}
  union {
    TxProof _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TxProofDefaultTypeInternal _TxProof_default_instance_;
}  // namespace types
}  // namespace tendermint
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tendermint_2ftypes_2ftypes_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tendermint_2ftypes_2ftypes_2eproto = nullptr;

const uint32_t TableStruct_tendermint_2ftypes_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::PartSetHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::PartSetHeader, total_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::PartSetHeader, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Part, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Part, index_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Part, bytes_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Part, proof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockID, hash_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockID, part_set_header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, version_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, chain_id_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, time_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, last_block_id_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, last_commit_hash_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, data_hash_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, validators_hash_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, next_validators_hash_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, consensus_hash_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, app_hash_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, last_results_hash_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, evidence_hash_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, proposer_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Data, txs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, type_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, round_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, block_id_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, timestamp_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, validator_address_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, validator_index_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Commit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Commit, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Commit, round_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Commit, block_id_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Commit, signatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CommitSig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CommitSig, block_id_flag_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CommitSig, validator_address_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CommitSig, timestamp_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CommitSig, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, type_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, round_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, pol_round_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, block_id_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, timestamp_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::SignedHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::SignedHeader, header_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::SignedHeader, commit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::LightBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::LightBlock, signed_header_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::LightBlock, validator_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockMeta, block_id_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockMeta, block_size_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockMeta, header_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockMeta, num_txs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::TxProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::TxProof, root_hash_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::TxProof, data_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::TxProof, proof_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tendermint::types::PartSetHeader)},
  { 8, -1, -1, sizeof(::tendermint::types::Part)},
  { 17, -1, -1, sizeof(::tendermint::types::BlockID)},
  { 25, -1, -1, sizeof(::tendermint::types::Header)},
  { 45, -1, -1, sizeof(::tendermint::types::Data)},
  { 52, -1, -1, sizeof(::tendermint::types::Vote)},
  { 66, -1, -1, sizeof(::tendermint::types::Commit)},
  { 76, -1, -1, sizeof(::tendermint::types::CommitSig)},
  { 86, -1, -1, sizeof(::tendermint::types::Proposal)},
  { 99, -1, -1, sizeof(::tendermint::types::SignedHeader)},
  { 107, -1, -1, sizeof(::tendermint::types::LightBlock)},
  { 115, -1, -1, sizeof(::tendermint::types::BlockMeta)},
  { 125, -1, -1, sizeof(::tendermint::types::TxProof)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_PartSetHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_Part_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_BlockID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_Vote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_Commit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_CommitSig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_Proposal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_SignedHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_LightBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_BlockMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_TxProof_default_instance_),
};

const char descriptor_table_protodef_tendermint_2ftypes_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034tendermint/types/types.proto\022\020tendermi"
  "nt.types\032\024gogoproto/gogo.proto\032\037google/p"
  "rotobuf/timestamp.proto\032\035tendermint/cryp"
  "to/proof.proto\032\036tendermint/version/types"
  ".proto\032 tendermint/types/validator.proto"
  "\",\n\rPartSetHeader\022\r\n\005total\030\001 \001(\r\022\014\n\004hash"
  "\030\002 \001(\014\"S\n\004Part\022\r\n\005index\030\001 \001(\r\022\r\n\005bytes\030\002"
  " \001(\014\022-\n\005proof\030\003 \001(\0132\030.tendermint.crypto."
  "ProofB\004\310\336\037\000\"W\n\007BlockID\022\014\n\004hash\030\001 \001(\014\022>\n\017"
  "part_set_header\030\002 \001(\0132\037.tendermint.types"
  ".PartSetHeaderB\004\310\336\037\000\"\263\003\n\006Header\0224\n\007versi"
  "on\030\001 \001(\0132\035.tendermint.version.ConsensusB"
  "\004\310\336\037\000\022\035\n\010chain_id\030\002 \001(\tB\013\342\336\037\007ChainID\022\016\n\006"
  "height\030\003 \001(\003\0222\n\004time\030\004 \001(\0132\032.google.prot"
  "obuf.TimestampB\010\310\336\037\000\220\337\037\001\0226\n\rlast_block_i"
  "d\030\005 \001(\0132\031.tendermint.types.BlockIDB\004\310\336\037\000"
  "\022\030\n\020last_commit_hash\030\006 \001(\014\022\021\n\tdata_hash\030"
  "\007 \001(\014\022\027\n\017validators_hash\030\010 \001(\014\022\034\n\024next_v"
  "alidators_hash\030\t \001(\014\022\026\n\016consensus_hash\030\n"
  " \001(\014\022\020\n\010app_hash\030\013 \001(\014\022\031\n\021last_results_h"
  "ash\030\014 \001(\014\022\025\n\revidence_hash\030\r \001(\014\022\030\n\020prop"
  "oser_address\030\016 \001(\014\"\023\n\004Data\022\013\n\003txs\030\001 \003(\014\""
  "\222\002\n\004Vote\022-\n\004type\030\001 \001(\0162\037.tendermint.type"
  "s.SignedMsgType\022\016\n\006height\030\002 \001(\003\022\r\n\005round"
  "\030\003 \001(\005\022<\n\010block_id\030\004 \001(\0132\031.tendermint.ty"
  "pes.BlockIDB\017\310\336\037\000\342\336\037\007BlockID\0227\n\ttimestam"
  "p\030\005 \001(\0132\032.google.protobuf.TimestampB\010\310\336\037"
  "\000\220\337\037\001\022\031\n\021validator_address\030\006 \001(\014\022\027\n\017vali"
  "dator_index\030\007 \001(\005\022\021\n\tsignature\030\010 \001(\014\"\234\001\n"
  "\006Commit\022\016\n\006height\030\001 \001(\003\022\r\n\005round\030\002 \001(\005\022<"
  "\n\010block_id\030\003 \001(\0132\031.tendermint.types.Bloc"
  "kIDB\017\310\336\037\000\342\336\037\007BlockID\0225\n\nsignatures\030\004 \003(\013"
  "2\033.tendermint.types.CommitSigB\004\310\336\037\000\"\250\001\n\t"
  "CommitSig\0224\n\rblock_id_flag\030\001 \001(\0162\035.tende"
  "rmint.types.BlockIDFlag\022\031\n\021validator_add"
  "ress\030\002 \001(\014\0227\n\ttimestamp\030\003 \001(\0132\032.google.p"
  "rotobuf.TimestampB\010\310\336\037\000\220\337\037\001\022\021\n\tsignature"
  "\030\004 \001(\014\"\365\001\n\010Proposal\022-\n\004type\030\001 \001(\0162\037.tend"
  "ermint.types.SignedMsgType\022\016\n\006height\030\002 \001"
  "(\003\022\r\n\005round\030\003 \001(\005\022\021\n\tpol_round\030\004 \001(\005\022<\n\010"
  "block_id\030\005 \001(\0132\031.tendermint.types.BlockI"
  "DB\017\342\336\037\007BlockID\310\336\037\000\0227\n\ttimestamp\030\006 \001(\0132\032."
  "google.protobuf.TimestampB\010\310\336\037\000\220\337\037\001\022\021\n\ts"
  "ignature\030\007 \001(\014\"b\n\014SignedHeader\022(\n\006header"
  "\030\001 \001(\0132\030.tendermint.types.Header\022(\n\006comm"
  "it\030\002 \001(\0132\030.tendermint.types.Commit\"z\n\nLi"
  "ghtBlock\0225\n\rsigned_header\030\001 \001(\0132\036.tender"
  "mint.types.SignedHeader\0225\n\rvalidator_set"
  "\030\002 \001(\0132\036.tendermint.types.ValidatorSet\"\236"
  "\001\n\tBlockMeta\022<\n\010block_id\030\001 \001(\0132\031.tenderm"
  "int.types.BlockIDB\017\342\336\037\007BlockID\310\336\037\000\022\022\n\nbl"
  "ock_size\030\002 \001(\003\022.\n\006header\030\003 \001(\0132\030.tenderm"
  "int.types.HeaderB\004\310\336\037\000\022\017\n\007num_txs\030\004 \001(\003\""
  "S\n\007TxProof\022\021\n\troot_hash\030\001 \001(\014\022\014\n\004data\030\002 "
  "\001(\014\022\'\n\005proof\030\003 \001(\0132\030.tendermint.crypto.P"
  "roof*\327\001\n\013BlockIDFlag\0221\n\025BLOCK_ID_FLAG_UN"
  "KNOWN\020\000\032\026\212\235 \022BlockIDFlagUnknown\022/\n\024BLOCK"
  "_ID_FLAG_ABSENT\020\001\032\025\212\235 \021BlockIDFlagAbsent"
  "\022/\n\024BLOCK_ID_FLAG_COMMIT\020\002\032\025\212\235 \021BlockIDF"
  "lagCommit\022)\n\021BLOCK_ID_FLAG_NIL\020\003\032\022\212\235 \016Bl"
  "ockIDFlagNil\032\010\250\244\036\001\210\243\036\000*\327\001\n\rSignedMsgType"
  "\022,\n\027SIGNED_MSG_TYPE_UNKNOWN\020\000\032\017\212\235 \013Unkno"
  "wnType\022,\n\027SIGNED_MSG_TYPE_PREVOTE\020\001\032\017\212\235 "
  "\013PrevoteType\0220\n\031SIGNED_MSG_TYPE_PRECOMMI"
  "T\020\002\032\021\212\235 \rPrecommitType\022.\n\030SIGNED_MSG_TYP"
  "E_PROPOSAL\020 \032\020\212\235 \014ProposalType\032\010\250\244\036\001\210\243\036\000"
  "B9Z7github.com/tendermint/tendermint/pro"
  "to/tendermint/typesb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tendermint_2ftypes_2ftypes_2eproto_deps[5] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_tendermint_2fcrypto_2fproof_2eproto,
  &::descriptor_table_tendermint_2ftypes_2fvalidator_2eproto,
  &::descriptor_table_tendermint_2fversion_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2ftypes_2ftypes_2eproto = {
  false, false, 2707, descriptor_table_protodef_tendermint_2ftypes_2ftypes_2eproto, "tendermint/types/types.proto", 
  &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once, descriptor_table_tendermint_2ftypes_2ftypes_2eproto_deps, 5, 13,
  schemas, file_default_instances, TableStruct_tendermint_2ftypes_2ftypes_2eproto::offsets,
  file_level_metadata_tendermint_2ftypes_2ftypes_2eproto, file_level_enum_descriptors_tendermint_2ftypes_2ftypes_2eproto, file_level_service_descriptors_tendermint_2ftypes_2ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter() {
  return &descriptor_table_tendermint_2ftypes_2ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tendermint_2ftypes_2ftypes_2eproto(&descriptor_table_tendermint_2ftypes_2ftypes_2eproto);
namespace tendermint {
namespace types {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlockIDFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tendermint_2ftypes_2ftypes_2eproto);
  return file_level_enum_descriptors_tendermint_2ftypes_2ftypes_2eproto[0];
}
bool BlockIDFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignedMsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tendermint_2ftypes_2ftypes_2eproto);
  return file_level_enum_descriptors_tendermint_2ftypes_2ftypes_2eproto[1];
}
bool SignedMsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 32:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PartSetHeader::_Internal {
 public:
};

PartSetHeader::PartSetHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.PartSetHeader)
}
PartSetHeader::PartSetHeader(const PartSetHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:tendermint.types.PartSetHeader)
}

inline void PartSetHeader::SharedCtor() {
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
total_ = 0u;
}

PartSetHeader::~PartSetHeader() {
  // @@protoc_insertion_point(destructor:tendermint.types.PartSetHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PartSetHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartSetHeader::ArenaDtor(void* object) {
  PartSetHeader* _this = reinterpret_cast< PartSetHeader* >(object);
  (void)_this;
}
void PartSetHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartSetHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PartSetHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.PartSetHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty();
  total_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartSetHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartSetHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.PartSetHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total = 1;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total(), target);
  }

  // bytes hash = 2;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.PartSetHeader)
  return target;
}

size_t PartSetHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.PartSetHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 2;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // uint32 total = 1;
  if (this->_internal_total() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartSetHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PartSetHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartSetHeader::GetClassData() const { return &_class_data_; }

void PartSetHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PartSetHeader *>(to)->MergeFrom(
      static_cast<const PartSetHeader &>(from));
}


void PartSetHeader::MergeFrom(const PartSetHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.PartSetHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (from._internal_total() != 0) {
    _internal_set_total(from._internal_total());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartSetHeader::CopyFrom(const PartSetHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.PartSetHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartSetHeader::IsInitialized() const {
  return true;
}

void PartSetHeader::InternalSwap(PartSetHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, lhs_arena,
      &other->hash_, rhs_arena
  );
  swap(total_, other->total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartSetHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[0]);
}

// ===================================================================

class Part::_Internal {
 public:
  static const ::tendermint::crypto::Proof& proof(const Part* msg);
};

const ::tendermint::crypto::Proof&
Part::_Internal::proof(const Part* msg) {
  return *msg->proof_;
}
void Part::clear_proof() {
  if (GetArenaForAllocation() == nullptr && proof_ != nullptr) {
    delete proof_;
  }
  proof_ = nullptr;
}
Part::Part(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Part)
}
Part::Part(const Part& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bytes().empty()) {
    bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bytes(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_proof()) {
    proof_ = new ::tendermint::crypto::Proof(*from.proof_);
  } else {
    proof_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:tendermint.types.Part)
}

inline void Part::SharedCtor() {
bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&proof_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&proof_)) + sizeof(index_));
}

Part::~Part() {
  // @@protoc_insertion_point(destructor:tendermint.types.Part)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Part::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete proof_;
}

void Part::ArenaDtor(void* object) {
  Part* _this = reinterpret_cast< Part* >(object);
  (void)_this;
}
void Part::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Part::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Part::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Part)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bytes_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && proof_ != nullptr) {
    delete proof_;
  }
  proof_ = nullptr;
  index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Part::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.crypto.Proof proof = 3 [(.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Part::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Part)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // bytes bytes = 2;
  if (!this->_internal_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_bytes(), target);
  }

  // .tendermint.crypto.Proof proof = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_proof()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::proof(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Part)
  return target;
}

size_t Part::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.Part)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes bytes = 2;
  if (!this->_internal_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bytes());
  }

  // .tendermint.crypto.Proof proof = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_proof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proof_);
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Part::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Part::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Part::GetClassData() const { return &_class_data_; }

void Part::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Part *>(to)->MergeFrom(
      static_cast<const Part &>(from));
}


void Part::MergeFrom(const Part& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Part)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bytes().empty()) {
    _internal_set_bytes(from._internal_bytes());
  }
  if (from._internal_has_proof()) {
    _internal_mutable_proof()->::tendermint::crypto::Proof::MergeFrom(from._internal_proof());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Part::CopyFrom(const Part& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Part)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Part::IsInitialized() const {
  return true;
}

void Part::InternalSwap(Part* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bytes_, lhs_arena,
      &other->bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Part, index_)
      + sizeof(Part::index_)
      - PROTOBUF_FIELD_OFFSET(Part, proof_)>(
          reinterpret_cast<char*>(&proof_),
          reinterpret_cast<char*>(&other->proof_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Part::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[1]);
}

// ===================================================================

class BlockID::_Internal {
 public:
  static const ::tendermint::types::PartSetHeader& part_set_header(const BlockID* msg);
};

const ::tendermint::types::PartSetHeader&
BlockID::_Internal::part_set_header(const BlockID* msg) {
  return *msg->part_set_header_;
}
BlockID::BlockID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.BlockID)
}
BlockID::BlockID(const BlockID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_part_set_header()) {
    part_set_header_ = new ::tendermint::types::PartSetHeader(*from.part_set_header_);
  } else {
    part_set_header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.types.BlockID)
}

inline void BlockID::SharedCtor() {
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
part_set_header_ = nullptr;
}

BlockID::~BlockID() {
  // @@protoc_insertion_point(destructor:tendermint.types.BlockID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete part_set_header_;
}

void BlockID::ArenaDtor(void* object) {
  BlockID* _this = reinterpret_cast< BlockID* >(object);
  (void)_this;
}
void BlockID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockID::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.BlockID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && part_set_header_ != nullptr) {
    delete part_set_header_;
  }
  part_set_header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.PartSetHeader part_set_header = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_part_set_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.BlockID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // .tendermint.types.PartSetHeader part_set_header = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_part_set_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::part_set_header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.BlockID)
  return target;
}

size_t BlockID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.BlockID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // .tendermint.types.PartSetHeader part_set_header = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_part_set_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *part_set_header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockID::GetClassData() const { return &_class_data_; }

void BlockID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockID *>(to)->MergeFrom(
      static_cast<const BlockID &>(from));
}


void BlockID::MergeFrom(const BlockID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.BlockID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (from._internal_has_part_set_header()) {
    _internal_mutable_part_set_header()->::tendermint::types::PartSetHeader::MergeFrom(from._internal_part_set_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockID::CopyFrom(const BlockID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.BlockID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockID::IsInitialized() const {
  return true;
}

void BlockID::InternalSwap(BlockID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, lhs_arena,
      &other->hash_, rhs_arena
  );
  swap(part_set_header_, other->part_set_header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[2]);
}

// ===================================================================

class Header::_Internal {
 public:
  static const ::tendermint::version::Consensus& version(const Header* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const Header* msg);
  static const ::tendermint::types::BlockID& last_block_id(const Header* msg);
};

const ::tendermint::version::Consensus&
Header::_Internal::version(const Header* msg) {
  return *msg->version_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Header::_Internal::time(const Header* msg) {
  return *msg->time_;
}
const ::tendermint::types::BlockID&
Header::_Internal::last_block_id(const Header* msg) {
  return *msg->last_block_id_;
}
void Header::clear_version() {
  if (GetArenaForAllocation() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
void Header::clear_time() {
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArenaForAllocation());
  }
  last_commit_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_commit_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_commit_hash().empty()) {
    last_commit_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_commit_hash(), 
      GetArenaForAllocation());
  }
  data_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_hash().empty()) {
    data_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data_hash(), 
      GetArenaForAllocation());
  }
  validators_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    validators_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validators_hash().empty()) {
    validators_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validators_hash(), 
      GetArenaForAllocation());
  }
  next_validators_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_validators_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_validators_hash().empty()) {
    next_validators_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_validators_hash(), 
      GetArenaForAllocation());
  }
  consensus_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    consensus_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_consensus_hash().empty()) {
    consensus_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_consensus_hash(), 
      GetArenaForAllocation());
  }
  app_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_hash().empty()) {
    app_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_hash(), 
      GetArenaForAllocation());
  }
  last_results_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_results_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_results_hash().empty()) {
    last_results_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_results_hash(), 
      GetArenaForAllocation());
  }
  evidence_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    evidence_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_evidence_hash().empty()) {
    evidence_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_evidence_hash(), 
      GetArenaForAllocation());
  }
  proposer_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    proposer_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proposer_address().empty()) {
    proposer_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proposer_address(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_version()) {
    version_ = new ::tendermint::version::Consensus(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from._internal_has_time()) {
    time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from._internal_has_last_block_id()) {
    last_block_id_ = new ::tendermint::types::BlockID(*from.last_block_id_);
  } else {
    last_block_id_ = nullptr;
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:tendermint.types.Header)
}

inline void Header::SharedCtor() {
chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_commit_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_commit_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
validators_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  validators_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
next_validators_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_validators_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
consensus_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  consensus_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_results_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_results_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
evidence_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  evidence_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
proposer_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  proposer_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&version_)) + sizeof(height_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:tendermint.types.Header)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_commit_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validators_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_validators_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consensus_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_results_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  evidence_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proposer_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete last_block_id_;
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmpty();
  last_commit_hash_.ClearToEmpty();
  data_hash_.ClearToEmpty();
  validators_hash_.ClearToEmpty();
  next_validators_hash_.ClearToEmpty();
  consensus_hash_.ClearToEmpty();
  app_hash_.ClearToEmpty();
  last_results_hash_.ClearToEmpty();
  evidence_hash_.ClearToEmpty();
  proposer_address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_block_id_ != nullptr) {
    delete last_block_id_;
  }
  last_block_id_ = nullptr;
  height_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.version.Consensus version = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chain_id = 2 [(.gogoproto.customname) = "ChainID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.types.Header.chain_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.BlockID last_block_id = 5 [(.gogoproto.nullable) = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_block_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes last_commit_hash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_last_commit_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data_hash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_data_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes validators_hash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_validators_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes next_validators_hash = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_next_validators_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes consensus_hash = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_consensus_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes app_hash = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_app_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes last_results_hash = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_last_results_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes evidence_hash = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_evidence_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes proposer_address = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_proposer_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.version.Consensus version = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::version(this), target, stream);
  }

  // string chain_id = 2 [(.gogoproto.customname) = "ChainID"];
  if (!this->_internal_chain_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.types.Header.chain_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chain_id(), target);
  }

  // int64 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_height(), target);
  }

  // .google.protobuf.Timestamp time = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::time(this), target, stream);
  }

  // .tendermint.types.BlockID last_block_id = 5 [(.gogoproto.nullable) = false];
  if (this->_internal_has_last_block_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::last_block_id(this), target, stream);
  }

  // bytes last_commit_hash = 6;
  if (!this->_internal_last_commit_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_last_commit_hash(), target);
  }

  // bytes data_hash = 7;
  if (!this->_internal_data_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_data_hash(), target);
  }

  // bytes validators_hash = 8;
  if (!this->_internal_validators_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_validators_hash(), target);
  }

  // bytes next_validators_hash = 9;
  if (!this->_internal_next_validators_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_next_validators_hash(), target);
  }

  // bytes consensus_hash = 10;
  if (!this->_internal_consensus_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_consensus_hash(), target);
  }

  // bytes app_hash = 11;
  if (!this->_internal_app_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_app_hash(), target);
  }

  // bytes last_results_hash = 12;
  if (!this->_internal_last_results_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_last_results_hash(), target);
  }

  // bytes evidence_hash = 13;
  if (!this->_internal_evidence_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_evidence_hash(), target);
  }

  // bytes proposer_address = 14;
  if (!this->_internal_proposer_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_proposer_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.Header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain_id = 2 [(.gogoproto.customname) = "ChainID"];
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // bytes last_commit_hash = 6;
  if (!this->_internal_last_commit_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_last_commit_hash());
  }

  // bytes data_hash = 7;
  if (!this->_internal_data_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_hash());
  }

  // bytes validators_hash = 8;
  if (!this->_internal_validators_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_validators_hash());
  }

  // bytes next_validators_hash = 9;
  if (!this->_internal_next_validators_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_next_validators_hash());
  }

  // bytes consensus_hash = 10;
  if (!this->_internal_consensus_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_consensus_hash());
  }

  // bytes app_hash = 11;
  if (!this->_internal_app_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_app_hash());
  }

  // bytes last_results_hash = 12;
  if (!this->_internal_last_results_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_last_results_hash());
  }

  // bytes evidence_hash = 13;
  if (!this->_internal_evidence_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_evidence_hash());
  }

  // bytes proposer_address = 14;
  if (!this->_internal_proposer_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proposer_address());
  }

  // .tendermint.version.Consensus version = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .google.protobuf.Timestamp time = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .tendermint.types.BlockID last_block_id = 5 [(.gogoproto.nullable) = false];
  if (this->_internal_has_last_block_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_block_id_);
  }

  // int64 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }

void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Header *>(to)->MergeFrom(
      static_cast<const Header &>(from));
}


void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Header)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (!from._internal_last_commit_hash().empty()) {
    _internal_set_last_commit_hash(from._internal_last_commit_hash());
  }
  if (!from._internal_data_hash().empty()) {
    _internal_set_data_hash(from._internal_data_hash());
  }
  if (!from._internal_validators_hash().empty()) {
    _internal_set_validators_hash(from._internal_validators_hash());
  }
  if (!from._internal_next_validators_hash().empty()) {
    _internal_set_next_validators_hash(from._internal_next_validators_hash());
  }
  if (!from._internal_consensus_hash().empty()) {
    _internal_set_consensus_hash(from._internal_consensus_hash());
  }
  if (!from._internal_app_hash().empty()) {
    _internal_set_app_hash(from._internal_app_hash());
  }
  if (!from._internal_last_results_hash().empty()) {
    _internal_set_last_results_hash(from._internal_last_results_hash());
  }
  if (!from._internal_evidence_hash().empty()) {
    _internal_set_evidence_hash(from._internal_evidence_hash());
  }
  if (!from._internal_proposer_address().empty()) {
    _internal_set_proposer_address(from._internal_proposer_address());
  }
  if (from._internal_has_version()) {
    _internal_mutable_version()->::tendermint::version::Consensus::MergeFrom(from._internal_version());
  }
  if (from._internal_has_time()) {
    _internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from._internal_has_last_block_id()) {
    _internal_mutable_last_block_id()->::tendermint::types::BlockID::MergeFrom(from._internal_last_block_id());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chain_id_, lhs_arena,
      &other->chain_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_commit_hash_, lhs_arena,
      &other->last_commit_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_hash_, lhs_arena,
      &other->data_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &validators_hash_, lhs_arena,
      &other->validators_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_validators_hash_, lhs_arena,
      &other->next_validators_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &consensus_hash_, lhs_arena,
      &other->consensus_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_hash_, lhs_arena,
      &other->app_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_results_hash_, lhs_arena,
      &other->last_results_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &evidence_hash_, lhs_arena,
      &other->evidence_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proposer_address_, lhs_arena,
      &other->proposer_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, height_)
      + sizeof(Header::height_)
      - PROTOBUF_FIELD_OFFSET(Header, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[3]);
}

// ===================================================================

class Data::_Internal {
 public:
};

Data::Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  txs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Data)
}
Data::Data(const Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      txs_(from.txs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.types.Data)
}

inline void Data::SharedCtor() {
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:tendermint.types.Data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Data::ArenaDtor(void* object) {
  Data* _this = reinterpret_cast< Data* >(object);
  (void)_this;
}
void Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes txs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_txs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes txs = 1;
  for (int i = 0, n = this->_internal_txs_size(); i < n; i++) {
    const auto& s = this->_internal_txs(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes txs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(txs_.size());
  for (int i = 0, n = txs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      txs_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Data::GetClassData() const { return &_class_data_; }

void Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Data *>(to)->MergeFrom(
      static_cast<const Data &>(from));
}


void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Data)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  txs_.MergeFrom(from.txs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  txs_.InternalSwap(&other->txs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[4]);
}

// ===================================================================

class Vote::_Internal {
 public:
  static const ::tendermint::types::BlockID& block_id(const Vote* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Vote* msg);
};

const ::tendermint::types::BlockID&
Vote::_Internal::block_id(const Vote* msg) {
  return *msg->block_id_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Vote::_Internal::timestamp(const Vote* msg) {
  return *msg->timestamp_;
}
void Vote::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
Vote::Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Vote)
}
Vote::Vote(const Vote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  validator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    validator_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validator_address().empty()) {
    validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_address(), 
      GetArenaForAllocation());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_block_id()) {
    block_id_ = new ::tendermint::types::BlockID(*from.block_id_);
  } else {
    block_id_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&validator_index_) -
    reinterpret_cast<char*>(&height_)) + sizeof(validator_index_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.Vote)
}

inline void Vote::SharedCtor() {
validator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  validator_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&validator_index_) -
    reinterpret_cast<char*>(&block_id_)) + sizeof(validator_index_));
}

Vote::~Vote() {
  // @@protoc_insertion_point(destructor:tendermint.types.Vote)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  validator_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete block_id_;
  if (this != internal_default_instance()) delete timestamp_;
}

void Vote::ArenaDtor(void* object) {
  Vote* _this = reinterpret_cast< Vote* >(object);
  (void)_this;
}
void Vote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Vote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validator_address_.ClearToEmpty();
  signature_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && block_id_ != nullptr) {
    delete block_id_;
  }
  block_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validator_index_) -
      reinterpret_cast<char*>(&height_)) + sizeof(validator_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.SignedMsgType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tendermint::types::SignedMsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 round = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.BlockID block_id = 4 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes validator_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 validator_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          validator_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes signature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Vote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.SignedMsgType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int64 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_height(), target);
  }

  // int32 round = 3;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_round(), target);
  }

  // .tendermint.types.BlockID block_id = 4 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  if (this->_internal_has_block_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::block_id(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::timestamp(this), target, stream);
  }

  // bytes validator_address = 6;
  if (!this->_internal_validator_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_validator_address(), target);
  }

  // int32 validator_index = 7;
  if (this->_internal_validator_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_validator_index(), target);
  }

  // bytes signature = 8;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Vote)
  return target;
}

size_t Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.Vote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes validator_address = 6;
  if (!this->_internal_validator_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_validator_address());
  }

  // bytes signature = 8;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .tendermint.types.BlockID block_id = 4 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  if (this->_internal_has_block_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_id_);
  }

  // .google.protobuf.Timestamp timestamp = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // int64 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // .tendermint.types.SignedMsgType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 round = 3;
  if (this->_internal_round() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_round());
  }

  // int32 validator_index = 7;
  if (this->_internal_validator_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_validator_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vote::GetClassData() const { return &_class_data_; }

void Vote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vote *>(to)->MergeFrom(
      static_cast<const Vote &>(from));
}


void Vote::MergeFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_validator_address().empty()) {
    _internal_set_validator_address(from._internal_validator_address());
  }
  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (from._internal_has_block_id()) {
    _internal_mutable_block_id()->::tendermint::types::BlockID::MergeFrom(from._internal_block_id());
  }
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_round() != 0) {
    _internal_set_round(from._internal_round());
  }
  if (from._internal_validator_index() != 0) {
    _internal_set_validator_index(from._internal_validator_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vote::CopyFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vote::IsInitialized() const {
  return true;
}

void Vote::InternalSwap(Vote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &validator_address_, lhs_arena,
      &other->validator_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vote, validator_index_)
      + sizeof(Vote::validator_index_)
      - PROTOBUF_FIELD_OFFSET(Vote, block_id_)>(
          reinterpret_cast<char*>(&block_id_),
          reinterpret_cast<char*>(&other->block_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vote::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[5]);
}

// ===================================================================

class Commit::_Internal {
 public:
  static const ::tendermint::types::BlockID& block_id(const Commit* msg);
};

const ::tendermint::types::BlockID&
Commit::_Internal::block_id(const Commit* msg) {
  return *msg->block_id_;
}
Commit::Commit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  signatures_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Commit)
}
Commit::Commit(const Commit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_id()) {
    block_id_ = new ::tendermint::types::BlockID(*from.block_id_);
  } else {
    block_id_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_) -
    reinterpret_cast<char*>(&height_)) + sizeof(round_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.Commit)
}

inline void Commit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&round_) -
    reinterpret_cast<char*>(&block_id_)) + sizeof(round_));
}

Commit::~Commit() {
  // @@protoc_insertion_point(destructor:tendermint.types.Commit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Commit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_id_;
}

void Commit::ArenaDtor(void* object) {
  Commit* _this = reinterpret_cast< Commit* >(object);
  (void)_this;
}
void Commit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Commit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Commit::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Commit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signatures_.Clear();
  if (GetArenaForAllocation() == nullptr && block_id_ != nullptr) {
    delete block_id_;
  }
  block_id_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_) -
      reinterpret_cast<char*>(&height_)) + sizeof(round_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Commit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 round = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.BlockID block_id = 3 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tendermint.types.CommitSig signatures = 4 [(.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Commit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Commit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_height(), target);
  }

  // int32 round = 2;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_round(), target);
  }

  // .tendermint.types.BlockID block_id = 3 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  if (this->_internal_has_block_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::block_id(this), target, stream);
  }

  // repeated .tendermint.types.CommitSig signatures = 4 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signatures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_signatures(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Commit)
  return target;
}

size_t Commit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.Commit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.types.CommitSig signatures = 4 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_signatures_size();
  for (const auto& msg : this->signatures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tendermint.types.BlockID block_id = 3 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  if (this->_internal_has_block_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_id_);
  }

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // int32 round = 2;
  if (this->_internal_round() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Commit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Commit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Commit::GetClassData() const { return &_class_data_; }

void Commit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Commit *>(to)->MergeFrom(
      static_cast<const Commit &>(from));
}


void Commit::MergeFrom(const Commit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Commit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  signatures_.MergeFrom(from.signatures_);
  if (from._internal_has_block_id()) {
    _internal_mutable_block_id()->::tendermint::types::BlockID::MergeFrom(from._internal_block_id());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _internal_set_round(from._internal_round());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Commit::CopyFrom(const Commit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Commit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commit::IsInitialized() const {
  return true;
}

void Commit::InternalSwap(Commit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  signatures_.InternalSwap(&other->signatures_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Commit, round_)
      + sizeof(Commit::round_)
      - PROTOBUF_FIELD_OFFSET(Commit, block_id_)>(
          reinterpret_cast<char*>(&block_id_),
          reinterpret_cast<char*>(&other->block_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Commit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[6]);
}

// ===================================================================

class CommitSig::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const CommitSig* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CommitSig::_Internal::timestamp(const CommitSig* msg) {
  return *msg->timestamp_;
}
void CommitSig::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
CommitSig::CommitSig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.CommitSig)
}
CommitSig::CommitSig(const CommitSig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  validator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    validator_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validator_address().empty()) {
    validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_address(), 
      GetArenaForAllocation());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  block_id_flag_ = from.block_id_flag_;
  // @@protoc_insertion_point(copy_constructor:tendermint.types.CommitSig)
}

inline void CommitSig::SharedCtor() {
validator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  validator_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&block_id_flag_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(block_id_flag_));
}

CommitSig::~CommitSig() {
  // @@protoc_insertion_point(destructor:tendermint.types.CommitSig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommitSig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  validator_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void CommitSig::ArenaDtor(void* object) {
  CommitSig* _this = reinterpret_cast< CommitSig* >(object);
  (void)_this;
}
void CommitSig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommitSig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommitSig::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.CommitSig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validator_address_.ClearToEmpty();
  signature_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  block_id_flag_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommitSig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.BlockIDFlag block_id_flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_block_id_flag(static_cast<::tendermint::types::BlockIDFlag>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes validator_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 3 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommitSig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.CommitSig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.BlockIDFlag block_id_flag = 1;
  if (this->_internal_block_id_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_block_id_flag(), target);
  }

  // bytes validator_address = 2;
  if (!this->_internal_validator_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_validator_address(), target);
  }

  // .google.protobuf.Timestamp timestamp = 3 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timestamp(this), target, stream);
  }

  // bytes signature = 4;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.CommitSig)
  return target;
}

size_t CommitSig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.CommitSig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes validator_address = 2;
  if (!this->_internal_validator_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_validator_address());
  }

  // bytes signature = 4;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .google.protobuf.Timestamp timestamp = 3 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .tendermint.types.BlockIDFlag block_id_flag = 1;
  if (this->_internal_block_id_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_block_id_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommitSig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommitSig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommitSig::GetClassData() const { return &_class_data_; }

void CommitSig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CommitSig *>(to)->MergeFrom(
      static_cast<const CommitSig &>(from));
}


void CommitSig::MergeFrom(const CommitSig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.CommitSig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_validator_address().empty()) {
    _internal_set_validator_address(from._internal_validator_address());
  }
  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from._internal_block_id_flag() != 0) {
    _internal_set_block_id_flag(from._internal_block_id_flag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommitSig::CopyFrom(const CommitSig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.CommitSig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitSig::IsInitialized() const {
  return true;
}

void CommitSig::InternalSwap(CommitSig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &validator_address_, lhs_arena,
      &other->validator_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommitSig, block_id_flag_)
      + sizeof(CommitSig::block_id_flag_)
      - PROTOBUF_FIELD_OFFSET(CommitSig, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitSig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[7]);
}

// ===================================================================

class Proposal::_Internal {
 public:
  static const ::tendermint::types::BlockID& block_id(const Proposal* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Proposal* msg);
};

const ::tendermint::types::BlockID&
Proposal::_Internal::block_id(const Proposal* msg) {
  return *msg->block_id_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Proposal::_Internal::timestamp(const Proposal* msg) {
  return *msg->timestamp_;
}
void Proposal::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
Proposal::Proposal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Proposal)
}
Proposal::Proposal(const Proposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_block_id()) {
    block_id_ = new ::tendermint::types::BlockID(*from.block_id_);
  } else {
    block_id_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&pol_round_) -
    reinterpret_cast<char*>(&height_)) + sizeof(pol_round_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.Proposal)
}

inline void Proposal::SharedCtor() {
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pol_round_) -
    reinterpret_cast<char*>(&block_id_)) + sizeof(pol_round_));
}

Proposal::~Proposal() {
  // @@protoc_insertion_point(destructor:tendermint.types.Proposal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Proposal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete block_id_;
  if (this != internal_default_instance()) delete timestamp_;
}

void Proposal::ArenaDtor(void* object) {
  Proposal* _this = reinterpret_cast< Proposal* >(object);
  (void)_this;
}
void Proposal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Proposal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Proposal::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Proposal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && block_id_ != nullptr) {
    delete block_id_;
  }
  block_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pol_round_) -
      reinterpret_cast<char*>(&height_)) + sizeof(pol_round_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proposal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.SignedMsgType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tendermint::types::SignedMsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 round = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pol_round = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          pol_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.BlockID block_id = 5 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 6 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes signature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Proposal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Proposal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.SignedMsgType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int64 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_height(), target);
  }

  // int32 round = 3;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_round(), target);
  }

  // int32 pol_round = 4;
  if (this->_internal_pol_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pol_round(), target);
  }

  // .tendermint.types.BlockID block_id = 5 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  if (this->_internal_has_block_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::block_id(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 6 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::timestamp(this), target, stream);
  }

  // bytes signature = 7;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Proposal)
  return target;
}

size_t Proposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.Proposal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 7;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .tendermint.types.BlockID block_id = 5 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  if (this->_internal_has_block_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_id_);
  }

  // .google.protobuf.Timestamp timestamp = 6 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // int64 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // .tendermint.types.SignedMsgType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 round = 3;
  if (this->_internal_round() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_round());
  }

  // int32 pol_round = 4;
  if (this->_internal_pol_round() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pol_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Proposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Proposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Proposal::GetClassData() const { return &_class_data_; }

void Proposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Proposal *>(to)->MergeFrom(
      static_cast<const Proposal &>(from));
}


void Proposal::MergeFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Proposal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (from._internal_has_block_id()) {
    _internal_mutable_block_id()->::tendermint::types::BlockID::MergeFrom(from._internal_block_id());
  }
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_round() != 0) {
    _internal_set_round(from._internal_round());
  }
  if (from._internal_pol_round() != 0) {
    _internal_set_pol_round(from._internal_pol_round());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Proposal::CopyFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposal::IsInitialized() const {
  return true;
}

void Proposal::InternalSwap(Proposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Proposal, pol_round_)
      + sizeof(Proposal::pol_round_)
      - PROTOBUF_FIELD_OFFSET(Proposal, block_id_)>(
          reinterpret_cast<char*>(&block_id_),
          reinterpret_cast<char*>(&other->block_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Proposal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[8]);
}

// ===================================================================

class SignedHeader::_Internal {
 public:
  static const ::tendermint::types::Header& header(const SignedHeader* msg);
  static const ::tendermint::types::Commit& commit(const SignedHeader* msg);
};

const ::tendermint::types::Header&
SignedHeader::_Internal::header(const SignedHeader* msg) {
  return *msg->header_;
}
const ::tendermint::types::Commit&
SignedHeader::_Internal::commit(const SignedHeader* msg) {
  return *msg->commit_;
}
SignedHeader::SignedHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.SignedHeader)
}
SignedHeader::SignedHeader(const SignedHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::tendermint::types::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_commit()) {
    commit_ = new ::tendermint::types::Commit(*from.commit_);
  } else {
    commit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.types.SignedHeader)
}

inline void SignedHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&commit_) -
    reinterpret_cast<char*>(&header_)) + sizeof(commit_));
}

SignedHeader::~SignedHeader() {
  // @@protoc_insertion_point(destructor:tendermint.types.SignedHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SignedHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete commit_;
}

void SignedHeader::ArenaDtor(void* object) {
  SignedHeader* _this = reinterpret_cast< SignedHeader* >(object);
  (void)_this;
}
void SignedHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignedHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignedHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.SignedHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && commit_ != nullptr) {
    delete commit_;
  }
  commit_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignedHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.Commit commit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignedHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.SignedHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.Header header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .tendermint.types.Commit commit = 2;
  if (this->_internal_has_commit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::commit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.SignedHeader)
  return target;
}

size_t SignedHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.SignedHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .tendermint.types.Commit commit = 2;
  if (this->_internal_has_commit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commit_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignedHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SignedHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignedHeader::GetClassData() const { return &_class_data_; }

void SignedHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SignedHeader *>(to)->MergeFrom(
      static_cast<const SignedHeader &>(from));
}


void SignedHeader::MergeFrom(const SignedHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.SignedHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::tendermint::types::Header::MergeFrom(from._internal_header());
  }
  if (from._internal_has_commit()) {
    _internal_mutable_commit()->::tendermint::types::Commit::MergeFrom(from._internal_commit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignedHeader::CopyFrom(const SignedHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.SignedHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedHeader::IsInitialized() const {
  return true;
}

void SignedHeader::InternalSwap(SignedHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignedHeader, commit_)
      + sizeof(SignedHeader::commit_)
      - PROTOBUF_FIELD_OFFSET(SignedHeader, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignedHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[9]);
}

// ===================================================================

class LightBlock::_Internal {
 public:
  static const ::tendermint::types::SignedHeader& signed_header(const LightBlock* msg);
  static const ::tendermint::types::ValidatorSet& validator_set(const LightBlock* msg);
};

const ::tendermint::types::SignedHeader&
LightBlock::_Internal::signed_header(const LightBlock* msg) {
  return *msg->signed_header_;
}
const ::tendermint::types::ValidatorSet&
LightBlock::_Internal::validator_set(const LightBlock* msg) {
  return *msg->validator_set_;
}
void LightBlock::clear_validator_set() {
  if (GetArenaForAllocation() == nullptr && validator_set_ != nullptr) {
    delete validator_set_;
  }
  validator_set_ = nullptr;
}
LightBlock::LightBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.LightBlock)
}
LightBlock::LightBlock(const LightBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_signed_header()) {
    signed_header_ = new ::tendermint::types::SignedHeader(*from.signed_header_);
  } else {
    signed_header_ = nullptr;
  }
  if (from._internal_has_validator_set()) {
    validator_set_ = new ::tendermint::types::ValidatorSet(*from.validator_set_);
  } else {
    validator_set_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.types.LightBlock)
}

inline void LightBlock::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&signed_header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&validator_set_) -
    reinterpret_cast<char*>(&signed_header_)) + sizeof(validator_set_));
}

LightBlock::~LightBlock() {
  // @@protoc_insertion_point(destructor:tendermint.types.LightBlock)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LightBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete signed_header_;
  if (this != internal_default_instance()) delete validator_set_;
}

void LightBlock::ArenaDtor(void* object) {
  LightBlock* _this = reinterpret_cast< LightBlock* >(object);
  (void)_this;
}
void LightBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LightBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LightBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.LightBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && signed_header_ != nullptr) {
    delete signed_header_;
  }
  signed_header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && validator_set_ != nullptr) {
    delete validator_set_;
  }
  validator_set_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LightBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.SignedHeader signed_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_signed_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.ValidatorSet validator_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LightBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.LightBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.SignedHeader signed_header = 1;
  if (this->_internal_has_signed_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::signed_header(this), target, stream);
  }

  // .tendermint.types.ValidatorSet validator_set = 2;
  if (this->_internal_has_validator_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::validator_set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.LightBlock)
  return target;
}

size_t LightBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.LightBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.SignedHeader signed_header = 1;
  if (this->_internal_has_signed_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signed_header_);
  }

  // .tendermint.types.ValidatorSet validator_set = 2;
  if (this->_internal_has_validator_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validator_set_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LightBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LightBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LightBlock::GetClassData() const { return &_class_data_; }

void LightBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LightBlock *>(to)->MergeFrom(
      static_cast<const LightBlock &>(from));
}


void LightBlock::MergeFrom(const LightBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.LightBlock)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_signed_header()) {
    _internal_mutable_signed_header()->::tendermint::types::SignedHeader::MergeFrom(from._internal_signed_header());
  }
  if (from._internal_has_validator_set()) {
    _internal_mutable_validator_set()->::tendermint::types::ValidatorSet::MergeFrom(from._internal_validator_set());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LightBlock::CopyFrom(const LightBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.LightBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightBlock::IsInitialized() const {
  return true;
}

void LightBlock::InternalSwap(LightBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LightBlock, validator_set_)
      + sizeof(LightBlock::validator_set_)
      - PROTOBUF_FIELD_OFFSET(LightBlock, signed_header_)>(
          reinterpret_cast<char*>(&signed_header_),
          reinterpret_cast<char*>(&other->signed_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LightBlock::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[10]);
}

// ===================================================================

class BlockMeta::_Internal {
 public:
  static const ::tendermint::types::BlockID& block_id(const BlockMeta* msg);
  static const ::tendermint::types::Header& header(const BlockMeta* msg);
};

const ::tendermint::types::BlockID&
BlockMeta::_Internal::block_id(const BlockMeta* msg) {
  return *msg->block_id_;
}
const ::tendermint::types::Header&
BlockMeta::_Internal::header(const BlockMeta* msg) {
  return *msg->header_;
}
BlockMeta::BlockMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.BlockMeta)
}
BlockMeta::BlockMeta(const BlockMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_id()) {
    block_id_ = new ::tendermint::types::BlockID(*from.block_id_);
  } else {
    block_id_ = nullptr;
  }
  if (from._internal_has_header()) {
    header_ = new ::tendermint::types::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&block_size_, &from.block_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_txs_) -
    reinterpret_cast<char*>(&block_size_)) + sizeof(num_txs_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.BlockMeta)
}

inline void BlockMeta::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_txs_) -
    reinterpret_cast<char*>(&block_id_)) + sizeof(num_txs_));
}

BlockMeta::~BlockMeta() {
  // @@protoc_insertion_point(destructor:tendermint.types.BlockMeta)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_id_;
  if (this != internal_default_instance()) delete header_;
}

void BlockMeta::ArenaDtor(void* object) {
  BlockMeta* _this = reinterpret_cast< BlockMeta* >(object);
  (void)_this;
}
void BlockMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.BlockMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && block_id_ != nullptr) {
    delete block_id_;
  }
  block_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&block_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_txs_) -
      reinterpret_cast<char*>(&block_size_)) + sizeof(num_txs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.BlockID block_id = 1 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 block_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.Header header = 3 [(.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num_txs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          num_txs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.BlockMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.BlockID block_id = 1 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  if (this->_internal_has_block_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block_id(this), target, stream);
  }

  // int64 block_size = 2;
  if (this->_internal_block_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_block_size(), target);
  }

  // .tendermint.types.Header header = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::header(this), target, stream);
  }

  // int64 num_txs = 4;
  if (this->_internal_num_txs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_num_txs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.BlockMeta)
  return target;
}

size_t BlockMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.BlockMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.BlockID block_id = 1 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  if (this->_internal_has_block_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_id_);
  }

  // .tendermint.types.Header header = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 block_size = 2;
  if (this->_internal_block_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_block_size());
  }

  // int64 num_txs = 4;
  if (this->_internal_num_txs() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_num_txs());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockMeta::GetClassData() const { return &_class_data_; }

void BlockMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockMeta *>(to)->MergeFrom(
      static_cast<const BlockMeta &>(from));
}


void BlockMeta::MergeFrom(const BlockMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.BlockMeta)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block_id()) {
    _internal_mutable_block_id()->::tendermint::types::BlockID::MergeFrom(from._internal_block_id());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::tendermint::types::Header::MergeFrom(from._internal_header());
  }
  if (from._internal_block_size() != 0) {
    _internal_set_block_size(from._internal_block_size());
  }
  if (from._internal_num_txs() != 0) {
    _internal_set_num_txs(from._internal_num_txs());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockMeta::CopyFrom(const BlockMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.BlockMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMeta::IsInitialized() const {
  return true;
}

void BlockMeta::InternalSwap(BlockMeta* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockMeta, num_txs_)
      + sizeof(BlockMeta::num_txs_)
      - PROTOBUF_FIELD_OFFSET(BlockMeta, block_id_)>(
          reinterpret_cast<char*>(&block_id_),
          reinterpret_cast<char*>(&other->block_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockMeta::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[11]);
}

// ===================================================================

class TxProof::_Internal {
 public:
  static const ::tendermint::crypto::Proof& proof(const TxProof* msg);
};

const ::tendermint::crypto::Proof&
TxProof::_Internal::proof(const TxProof* msg) {
  return *msg->proof_;
}
void TxProof::clear_proof() {
  if (GetArenaForAllocation() == nullptr && proof_ != nullptr) {
    delete proof_;
  }
  proof_ = nullptr;
}
TxProof::TxProof(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.TxProof)
}
TxProof::TxProof(const TxProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  root_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    root_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_root_hash().empty()) {
    root_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_root_hash(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_proof()) {
    proof_ = new ::tendermint::crypto::Proof(*from.proof_);
  } else {
    proof_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.types.TxProof)
}

inline void TxProof::SharedCtor() {
root_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  root_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
proof_ = nullptr;
}

TxProof::~TxProof() {
  // @@protoc_insertion_point(destructor:tendermint.types.TxProof)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TxProof::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  root_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete proof_;
}

void TxProof::ArenaDtor(void* object) {
  TxProof* _this = reinterpret_cast< TxProof* >(object);
  (void)_this;
}
void TxProof::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TxProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TxProof::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.TxProof)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  root_hash_.ClearToEmpty();
  data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && proof_ != nullptr) {
    delete proof_;
  }
  proof_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxProof::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes root_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_root_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.crypto.Proof proof = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxProof::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.TxProof)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes root_hash = 1;
  if (!this->_internal_root_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_root_hash(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // .tendermint.crypto.Proof proof = 3;
  if (this->_internal_has_proof()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::proof(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.TxProof)
  return target;
}

size_t TxProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.TxProof)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes root_hash = 1;
  if (!this->_internal_root_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_root_hash());
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .tendermint.crypto.Proof proof = 3;
  if (this->_internal_has_proof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proof_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxProof::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TxProof::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxProof::GetClassData() const { return &_class_data_; }

void TxProof::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TxProof *>(to)->MergeFrom(
      static_cast<const TxProof &>(from));
}


void TxProof::MergeFrom(const TxProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.TxProof)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_root_hash().empty()) {
    _internal_set_root_hash(from._internal_root_hash());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_has_proof()) {
    _internal_mutable_proof()->::tendermint::crypto::Proof::MergeFrom(from._internal_proof());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxProof::CopyFrom(const TxProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.TxProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxProof::IsInitialized() const {
  return true;
}

void TxProof::InternalSwap(TxProof* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &root_hash_, lhs_arena,
      &other->root_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(proof_, other->proof_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxProof::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::types::PartSetHeader* Arena::CreateMaybeMessage< ::tendermint::types::PartSetHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::PartSetHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::Part* Arena::CreateMaybeMessage< ::tendermint::types::Part >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::Part >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::BlockID* Arena::CreateMaybeMessage< ::tendermint::types::BlockID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::BlockID >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::Header* Arena::CreateMaybeMessage< ::tendermint::types::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::Data* Arena::CreateMaybeMessage< ::tendermint::types::Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::Data >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::Vote* Arena::CreateMaybeMessage< ::tendermint::types::Vote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::Vote >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::Commit* Arena::CreateMaybeMessage< ::tendermint::types::Commit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::Commit >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::CommitSig* Arena::CreateMaybeMessage< ::tendermint::types::CommitSig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::CommitSig >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::Proposal* Arena::CreateMaybeMessage< ::tendermint::types::Proposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::Proposal >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::SignedHeader* Arena::CreateMaybeMessage< ::tendermint::types::SignedHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::SignedHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::LightBlock* Arena::CreateMaybeMessage< ::tendermint::types::LightBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::LightBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::BlockMeta* Arena::CreateMaybeMessage< ::tendermint::types::BlockMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::BlockMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::TxProof* Arena::CreateMaybeMessage< ::tendermint::types::TxProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::TxProof >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
