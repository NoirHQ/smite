// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/types/validator.proto

#include "tendermint/types/validator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tendermint {
namespace types {
constexpr ValidatorSet::ValidatorSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : validators_()
  , proposer_(nullptr)
  , total_voting_power_(int64_t{0}){}
struct ValidatorSetDefaultTypeInternal {
  constexpr ValidatorSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidatorSetDefaultTypeInternal() {}
  union {
    ValidatorSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidatorSetDefaultTypeInternal _ValidatorSet_default_instance_;
constexpr Validator::Validator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pub_key_(nullptr)
  , voting_power_(int64_t{0})
  , proposer_priority_(int64_t{0}){}
struct ValidatorDefaultTypeInternal {
  constexpr ValidatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidatorDefaultTypeInternal() {}
  union {
    Validator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidatorDefaultTypeInternal _Validator_default_instance_;
constexpr SimpleValidator::SimpleValidator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pub_key_(nullptr)
  , voting_power_(int64_t{0}){}
struct SimpleValidatorDefaultTypeInternal {
  constexpr SimpleValidatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimpleValidatorDefaultTypeInternal() {}
  union {
    SimpleValidator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimpleValidatorDefaultTypeInternal _SimpleValidator_default_instance_;
}  // namespace types
}  // namespace tendermint
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tendermint_2ftypes_2fvalidator_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tendermint_2ftypes_2fvalidator_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tendermint_2ftypes_2fvalidator_2eproto = nullptr;

const uint32_t TableStruct_tendermint_2ftypes_2fvalidator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ValidatorSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ValidatorSet, validators_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ValidatorSet, proposer_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ValidatorSet, total_voting_power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Validator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Validator, address_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Validator, pub_key_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Validator, voting_power_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Validator, proposer_priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::SimpleValidator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::SimpleValidator, pub_key_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::SimpleValidator, voting_power_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tendermint::types::ValidatorSet)},
  { 9, -1, -1, sizeof(::tendermint::types::Validator)},
  { 19, -1, -1, sizeof(::tendermint::types::SimpleValidator)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_ValidatorSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_Validator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_SimpleValidator_default_instance_),
};

const char descriptor_table_protodef_tendermint_2ftypes_2fvalidator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n tendermint/types/validator.proto\022\020tend"
  "ermint.types\032\024gogoproto/gogo.proto\032\034tend"
  "ermint/crypto/keys.proto\"\212\001\n\014ValidatorSe"
  "t\022/\n\nvalidators\030\001 \003(\0132\033.tendermint.types"
  ".Validator\022-\n\010proposer\030\002 \001(\0132\033.tendermin"
  "t.types.Validator\022\032\n\022total_voting_power\030"
  "\003 \001(\003\"\202\001\n\tValidator\022\017\n\007address\030\001 \001(\014\0223\n\007"
  "pub_key\030\002 \001(\0132\034.tendermint.crypto.Public"
  "KeyB\004\310\336\037\000\022\024\n\014voting_power\030\003 \001(\003\022\031\n\021propo"
  "ser_priority\030\004 \001(\003\"V\n\017SimpleValidator\022-\n"
  "\007pub_key\030\001 \001(\0132\034.tendermint.crypto.Publi"
  "cKey\022\024\n\014voting_power\030\002 \001(\003B9Z7github.com"
  "/tendermint/tendermint/proto/tendermint/"
  "typesb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_deps[2] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_tendermint_2fcrypto_2fkeys_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2ftypes_2fvalidator_2eproto = {
  false, false, 533, descriptor_table_protodef_tendermint_2ftypes_2fvalidator_2eproto, "tendermint/types/validator.proto", 
  &descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_once, descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_tendermint_2ftypes_2fvalidator_2eproto::offsets,
  file_level_metadata_tendermint_2ftypes_2fvalidator_2eproto, file_level_enum_descriptors_tendermint_2ftypes_2fvalidator_2eproto, file_level_service_descriptors_tendermint_2ftypes_2fvalidator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_getter() {
  return &descriptor_table_tendermint_2ftypes_2fvalidator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tendermint_2ftypes_2fvalidator_2eproto(&descriptor_table_tendermint_2ftypes_2fvalidator_2eproto);
namespace tendermint {
namespace types {

// ===================================================================

class ValidatorSet::_Internal {
 public:
  static const ::tendermint::types::Validator& proposer(const ValidatorSet* msg);
};

const ::tendermint::types::Validator&
ValidatorSet::_Internal::proposer(const ValidatorSet* msg) {
  return *msg->proposer_;
}
ValidatorSet::ValidatorSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  validators_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.ValidatorSet)
}
ValidatorSet::ValidatorSet(const ValidatorSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      validators_(from.validators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_proposer()) {
    proposer_ = new ::tendermint::types::Validator(*from.proposer_);
  } else {
    proposer_ = nullptr;
  }
  total_voting_power_ = from.total_voting_power_;
  // @@protoc_insertion_point(copy_constructor:tendermint.types.ValidatorSet)
}

inline void ValidatorSet::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&proposer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_voting_power_) -
    reinterpret_cast<char*>(&proposer_)) + sizeof(total_voting_power_));
}

ValidatorSet::~ValidatorSet() {
  // @@protoc_insertion_point(destructor:tendermint.types.ValidatorSet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValidatorSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete proposer_;
}

void ValidatorSet::ArenaDtor(void* object) {
  ValidatorSet* _this = reinterpret_cast< ValidatorSet* >(object);
  (void)_this;
}
void ValidatorSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatorSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidatorSet::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.ValidatorSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validators_.Clear();
  if (GetArenaForAllocation() == nullptr && proposer_ != nullptr) {
    delete proposer_;
  }
  proposer_ = nullptr;
  total_voting_power_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tendermint.types.Validator validators = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.Validator proposer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_voting_power = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          total_voting_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValidatorSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.ValidatorSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tendermint.types.Validator validators = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_validators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_validators(i), target, stream);
  }

  // .tendermint.types.Validator proposer = 2;
  if (this->_internal_has_proposer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::proposer(this), target, stream);
  }

  // int64 total_voting_power = 3;
  if (this->_internal_total_voting_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_total_voting_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.ValidatorSet)
  return target;
}

size_t ValidatorSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.ValidatorSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.types.Validator validators = 1;
  total_size += 1UL * this->_internal_validators_size();
  for (const auto& msg : this->validators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tendermint.types.Validator proposer = 2;
  if (this->_internal_has_proposer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proposer_);
  }

  // int64 total_voting_power = 3;
  if (this->_internal_total_voting_power() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_total_voting_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValidatorSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorSet::GetClassData() const { return &_class_data_; }

void ValidatorSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ValidatorSet *>(to)->MergeFrom(
      static_cast<const ValidatorSet &>(from));
}


void ValidatorSet::MergeFrom(const ValidatorSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.ValidatorSet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  validators_.MergeFrom(from.validators_);
  if (from._internal_has_proposer()) {
    _internal_mutable_proposer()->::tendermint::types::Validator::MergeFrom(from._internal_proposer());
  }
  if (from._internal_total_voting_power() != 0) {
    _internal_set_total_voting_power(from._internal_total_voting_power());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorSet::CopyFrom(const ValidatorSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.ValidatorSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorSet::IsInitialized() const {
  return true;
}

void ValidatorSet::InternalSwap(ValidatorSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  validators_.InternalSwap(&other->validators_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidatorSet, total_voting_power_)
      + sizeof(ValidatorSet::total_voting_power_)
      - PROTOBUF_FIELD_OFFSET(ValidatorSet, proposer_)>(
          reinterpret_cast<char*>(&proposer_),
          reinterpret_cast<char*>(&other->proposer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorSet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fvalidator_2eproto[0]);
}

// ===================================================================

class Validator::_Internal {
 public:
  static const ::tendermint::crypto::PublicKey& pub_key(const Validator* msg);
};

const ::tendermint::crypto::PublicKey&
Validator::_Internal::pub_key(const Validator* msg) {
  return *msg->pub_key_;
}
void Validator::clear_pub_key() {
  if (GetArenaForAllocation() == nullptr && pub_key_ != nullptr) {
    delete pub_key_;
  }
  pub_key_ = nullptr;
}
Validator::Validator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Validator)
}
Validator::Validator(const Validator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pub_key()) {
    pub_key_ = new ::tendermint::crypto::PublicKey(*from.pub_key_);
  } else {
    pub_key_ = nullptr;
  }
  ::memcpy(&voting_power_, &from.voting_power_,
    static_cast<size_t>(reinterpret_cast<char*>(&proposer_priority_) -
    reinterpret_cast<char*>(&voting_power_)) + sizeof(proposer_priority_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.Validator)
}

inline void Validator::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pub_key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&proposer_priority_) -
    reinterpret_cast<char*>(&pub_key_)) + sizeof(proposer_priority_));
}

Validator::~Validator() {
  // @@protoc_insertion_point(destructor:tendermint.types.Validator)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Validator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pub_key_;
}

void Validator::ArenaDtor(void* object) {
  Validator* _this = reinterpret_cast< Validator* >(object);
  (void)_this;
}
void Validator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Validator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Validator::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Validator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pub_key_ != nullptr) {
    delete pub_key_;
  }
  pub_key_ = nullptr;
  ::memset(&voting_power_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proposer_priority_) -
      reinterpret_cast<char*>(&voting_power_)) + sizeof(proposer_priority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Validator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.crypto.PublicKey pub_key = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 voting_power = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          voting_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 proposer_priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          proposer_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Validator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Validator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // .tendermint.crypto.PublicKey pub_key = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_pub_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pub_key(this), target, stream);
  }

  // int64 voting_power = 3;
  if (this->_internal_voting_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_voting_power(), target);
  }

  // int64 proposer_priority = 4;
  if (this->_internal_proposer_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_proposer_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Validator)
  return target;
}

size_t Validator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.Validator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // .tendermint.crypto.PublicKey pub_key = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_pub_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pub_key_);
  }

  // int64 voting_power = 3;
  if (this->_internal_voting_power() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_voting_power());
  }

  // int64 proposer_priority = 4;
  if (this->_internal_proposer_priority() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_proposer_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Validator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Validator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Validator::GetClassData() const { return &_class_data_; }

void Validator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Validator *>(to)->MergeFrom(
      static_cast<const Validator &>(from));
}


void Validator::MergeFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Validator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_has_pub_key()) {
    _internal_mutable_pub_key()->::tendermint::crypto::PublicKey::MergeFrom(from._internal_pub_key());
  }
  if (from._internal_voting_power() != 0) {
    _internal_set_voting_power(from._internal_voting_power());
  }
  if (from._internal_proposer_priority() != 0) {
    _internal_set_proposer_priority(from._internal_proposer_priority());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Validator::CopyFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Validator::IsInitialized() const {
  return true;
}

void Validator::InternalSwap(Validator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Validator, proposer_priority_)
      + sizeof(Validator::proposer_priority_)
      - PROTOBUF_FIELD_OFFSET(Validator, pub_key_)>(
          reinterpret_cast<char*>(&pub_key_),
          reinterpret_cast<char*>(&other->pub_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Validator::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fvalidator_2eproto[1]);
}

// ===================================================================

class SimpleValidator::_Internal {
 public:
  static const ::tendermint::crypto::PublicKey& pub_key(const SimpleValidator* msg);
};

const ::tendermint::crypto::PublicKey&
SimpleValidator::_Internal::pub_key(const SimpleValidator* msg) {
  return *msg->pub_key_;
}
void SimpleValidator::clear_pub_key() {
  if (GetArenaForAllocation() == nullptr && pub_key_ != nullptr) {
    delete pub_key_;
  }
  pub_key_ = nullptr;
}
SimpleValidator::SimpleValidator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.SimpleValidator)
}
SimpleValidator::SimpleValidator(const SimpleValidator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pub_key()) {
    pub_key_ = new ::tendermint::crypto::PublicKey(*from.pub_key_);
  } else {
    pub_key_ = nullptr;
  }
  voting_power_ = from.voting_power_;
  // @@protoc_insertion_point(copy_constructor:tendermint.types.SimpleValidator)
}

inline void SimpleValidator::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pub_key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&voting_power_) -
    reinterpret_cast<char*>(&pub_key_)) + sizeof(voting_power_));
}

SimpleValidator::~SimpleValidator() {
  // @@protoc_insertion_point(destructor:tendermint.types.SimpleValidator)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimpleValidator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pub_key_;
}

void SimpleValidator::ArenaDtor(void* object) {
  SimpleValidator* _this = reinterpret_cast< SimpleValidator* >(object);
  (void)_this;
}
void SimpleValidator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleValidator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimpleValidator::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.SimpleValidator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pub_key_ != nullptr) {
    delete pub_key_;
  }
  pub_key_ = nullptr;
  voting_power_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleValidator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.crypto.PublicKey pub_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 voting_power = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          voting_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleValidator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.SimpleValidator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.crypto.PublicKey pub_key = 1;
  if (this->_internal_has_pub_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pub_key(this), target, stream);
  }

  // int64 voting_power = 2;
  if (this->_internal_voting_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_voting_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.SimpleValidator)
  return target;
}

size_t SimpleValidator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.SimpleValidator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.crypto.PublicKey pub_key = 1;
  if (this->_internal_has_pub_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pub_key_);
  }

  // int64 voting_power = 2;
  if (this->_internal_voting_power() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_voting_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleValidator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimpleValidator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleValidator::GetClassData() const { return &_class_data_; }

void SimpleValidator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimpleValidator *>(to)->MergeFrom(
      static_cast<const SimpleValidator &>(from));
}


void SimpleValidator::MergeFrom(const SimpleValidator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.SimpleValidator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pub_key()) {
    _internal_mutable_pub_key()->::tendermint::crypto::PublicKey::MergeFrom(from._internal_pub_key());
  }
  if (from._internal_voting_power() != 0) {
    _internal_set_voting_power(from._internal_voting_power());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleValidator::CopyFrom(const SimpleValidator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.SimpleValidator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleValidator::IsInitialized() const {
  return true;
}

void SimpleValidator::InternalSwap(SimpleValidator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleValidator, voting_power_)
      + sizeof(SimpleValidator::voting_power_)
      - PROTOBUF_FIELD_OFFSET(SimpleValidator, pub_key_)>(
          reinterpret_cast<char*>(&pub_key_),
          reinterpret_cast<char*>(&other->pub_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleValidator::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fvalidator_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::types::ValidatorSet* Arena::CreateMaybeMessage< ::tendermint::types::ValidatorSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::ValidatorSet >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::Validator* Arena::CreateMaybeMessage< ::tendermint::types::Validator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::Validator >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::SimpleValidator* Arena::CreateMaybeMessage< ::tendermint::types::SimpleValidator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::SimpleValidator >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
