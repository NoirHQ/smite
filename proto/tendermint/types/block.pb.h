// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/types/block.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2fblock_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2fblock_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include "tendermint/types/types.pb.h"
#include "tendermint/types/evidence.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tendermint_2ftypes_2fblock_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2ftypes_2fblock_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2ftypes_2fblock_2eproto;
namespace tendermint {
namespace types {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace types
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> ::tendermint::types::Block* Arena::CreateMaybeMessage<::tendermint::types::Block>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tendermint {
namespace types {

// ===================================================================

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit constexpr Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Block& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.types.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kDataFieldNumber = 2,
    kEvidenceFieldNumber = 3,
    kLastCommitFieldNumber = 4,
  };
  // .tendermint.types.Header header = 1 [(.gogoproto.nullable) = false];
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::tendermint::types::Header& header() const;
  PROTOBUF_NODISCARD ::tendermint::types::Header* release_header();
  ::tendermint::types::Header* mutable_header();
  void set_allocated_header(::tendermint::types::Header* header);
  private:
  const ::tendermint::types::Header& _internal_header() const;
  ::tendermint::types::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::tendermint::types::Header* header);
  ::tendermint::types::Header* unsafe_arena_release_header();

  // .tendermint.types.Data data = 2 [(.gogoproto.nullable) = false];
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::tendermint::types::Data& data() const;
  PROTOBUF_NODISCARD ::tendermint::types::Data* release_data();
  ::tendermint::types::Data* mutable_data();
  void set_allocated_data(::tendermint::types::Data* data);
  private:
  const ::tendermint::types::Data& _internal_data() const;
  ::tendermint::types::Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::tendermint::types::Data* data);
  ::tendermint::types::Data* unsafe_arena_release_data();

  // .tendermint.types.EvidenceList evidence = 3 [(.gogoproto.nullable) = false];
  bool has_evidence() const;
  private:
  bool _internal_has_evidence() const;
  public:
  void clear_evidence();
  const ::tendermint::types::EvidenceList& evidence() const;
  PROTOBUF_NODISCARD ::tendermint::types::EvidenceList* release_evidence();
  ::tendermint::types::EvidenceList* mutable_evidence();
  void set_allocated_evidence(::tendermint::types::EvidenceList* evidence);
  private:
  const ::tendermint::types::EvidenceList& _internal_evidence() const;
  ::tendermint::types::EvidenceList* _internal_mutable_evidence();
  public:
  void unsafe_arena_set_allocated_evidence(
      ::tendermint::types::EvidenceList* evidence);
  ::tendermint::types::EvidenceList* unsafe_arena_release_evidence();

  // .tendermint.types.Commit last_commit = 4;
  bool has_last_commit() const;
  private:
  bool _internal_has_last_commit() const;
  public:
  void clear_last_commit();
  const ::tendermint::types::Commit& last_commit() const;
  PROTOBUF_NODISCARD ::tendermint::types::Commit* release_last_commit();
  ::tendermint::types::Commit* mutable_last_commit();
  void set_allocated_last_commit(::tendermint::types::Commit* last_commit);
  private:
  const ::tendermint::types::Commit& _internal_last_commit() const;
  ::tendermint::types::Commit* _internal_mutable_last_commit();
  public:
  void unsafe_arena_set_allocated_last_commit(
      ::tendermint::types::Commit* last_commit);
  ::tendermint::types::Commit* unsafe_arena_release_last_commit();

  // @@protoc_insertion_point(class_scope:tendermint.types.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tendermint::types::Header* header_;
  ::tendermint::types::Data* data_;
  ::tendermint::types::EvidenceList* evidence_;
  ::tendermint::types::Commit* last_commit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2ftypes_2fblock_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block

// .tendermint.types.Header header = 1 [(.gogoproto.nullable) = false];
inline bool Block::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Block::has_header() const {
  return _internal_has_header();
}
inline const ::tendermint::types::Header& Block::_internal_header() const {
  const ::tendermint::types::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Header&>(
      ::tendermint::types::_Header_default_instance_);
}
inline const ::tendermint::types::Header& Block::header() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Block.header)
  return _internal_header();
}
inline void Block::unsafe_arena_set_allocated_header(
    ::tendermint::types::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Block.header)
}
inline ::tendermint::types::Header* Block::release_header() {
  
  ::tendermint::types::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::Header* Block::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:tendermint.types.Block.header)
  
  ::tendermint::types::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::tendermint::types::Header* Block::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::tendermint::types::Header* Block::mutable_header() {
  ::tendermint::types::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Block.header)
  return _msg;
}
inline void Block::set_allocated_header(::tendermint::types::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Block.header)
}

// .tendermint.types.Data data = 2 [(.gogoproto.nullable) = false];
inline bool Block::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Block::has_data() const {
  return _internal_has_data();
}
inline const ::tendermint::types::Data& Block::_internal_data() const {
  const ::tendermint::types::Data* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Data&>(
      ::tendermint::types::_Data_default_instance_);
}
inline const ::tendermint::types::Data& Block::data() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Block.data)
  return _internal_data();
}
inline void Block::unsafe_arena_set_allocated_data(
    ::tendermint::types::Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Block.data)
}
inline ::tendermint::types::Data* Block::release_data() {
  
  ::tendermint::types::Data* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::Data* Block::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:tendermint.types.Block.data)
  
  ::tendermint::types::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::tendermint::types::Data* Block::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::Data>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::tendermint::types::Data* Block::mutable_data() {
  ::tendermint::types::Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Block.data)
  return _msg;
}
inline void Block::set_allocated_data(::tendermint::types::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Block.data)
}

// .tendermint.types.EvidenceList evidence = 3 [(.gogoproto.nullable) = false];
inline bool Block::_internal_has_evidence() const {
  return this != internal_default_instance() && evidence_ != nullptr;
}
inline bool Block::has_evidence() const {
  return _internal_has_evidence();
}
inline const ::tendermint::types::EvidenceList& Block::_internal_evidence() const {
  const ::tendermint::types::EvidenceList* p = evidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::EvidenceList&>(
      ::tendermint::types::_EvidenceList_default_instance_);
}
inline const ::tendermint::types::EvidenceList& Block::evidence() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Block.evidence)
  return _internal_evidence();
}
inline void Block::unsafe_arena_set_allocated_evidence(
    ::tendermint::types::EvidenceList* evidence) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(evidence_);
  }
  evidence_ = evidence;
  if (evidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Block.evidence)
}
inline ::tendermint::types::EvidenceList* Block::release_evidence() {
  
  ::tendermint::types::EvidenceList* temp = evidence_;
  evidence_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::EvidenceList* Block::unsafe_arena_release_evidence() {
  // @@protoc_insertion_point(field_release:tendermint.types.Block.evidence)
  
  ::tendermint::types::EvidenceList* temp = evidence_;
  evidence_ = nullptr;
  return temp;
}
inline ::tendermint::types::EvidenceList* Block::_internal_mutable_evidence() {
  
  if (evidence_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::EvidenceList>(GetArenaForAllocation());
    evidence_ = p;
  }
  return evidence_;
}
inline ::tendermint::types::EvidenceList* Block::mutable_evidence() {
  ::tendermint::types::EvidenceList* _msg = _internal_mutable_evidence();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Block.evidence)
  return _msg;
}
inline void Block::set_allocated_evidence(::tendermint::types::EvidenceList* evidence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(evidence_);
  }
  if (evidence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(evidence));
    if (message_arena != submessage_arena) {
      evidence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, evidence, submessage_arena);
    }
    
  } else {
    
  }
  evidence_ = evidence;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Block.evidence)
}

// .tendermint.types.Commit last_commit = 4;
inline bool Block::_internal_has_last_commit() const {
  return this != internal_default_instance() && last_commit_ != nullptr;
}
inline bool Block::has_last_commit() const {
  return _internal_has_last_commit();
}
inline const ::tendermint::types::Commit& Block::_internal_last_commit() const {
  const ::tendermint::types::Commit* p = last_commit_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Commit&>(
      ::tendermint::types::_Commit_default_instance_);
}
inline const ::tendermint::types::Commit& Block::last_commit() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Block.last_commit)
  return _internal_last_commit();
}
inline void Block::unsafe_arena_set_allocated_last_commit(
    ::tendermint::types::Commit* last_commit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_commit_);
  }
  last_commit_ = last_commit;
  if (last_commit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Block.last_commit)
}
inline ::tendermint::types::Commit* Block::release_last_commit() {
  
  ::tendermint::types::Commit* temp = last_commit_;
  last_commit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::Commit* Block::unsafe_arena_release_last_commit() {
  // @@protoc_insertion_point(field_release:tendermint.types.Block.last_commit)
  
  ::tendermint::types::Commit* temp = last_commit_;
  last_commit_ = nullptr;
  return temp;
}
inline ::tendermint::types::Commit* Block::_internal_mutable_last_commit() {
  
  if (last_commit_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::Commit>(GetArenaForAllocation());
    last_commit_ = p;
  }
  return last_commit_;
}
inline ::tendermint::types::Commit* Block::mutable_last_commit() {
  ::tendermint::types::Commit* _msg = _internal_mutable_last_commit();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Block.last_commit)
  return _msg;
}
inline void Block::set_allocated_last_commit(::tendermint::types::Commit* last_commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_commit_);
  }
  if (last_commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_commit));
    if (message_arena != submessage_arena) {
      last_commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_commit, submessage_arena);
    }
    
  } else {
    
  }
  last_commit_ = last_commit;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Block.last_commit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace tendermint

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2fblock_2eproto
