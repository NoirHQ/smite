// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/types/events.proto

#include "tendermint/types/events.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tendermint {
namespace types {
constexpr EventDataRoundState::EventDataRoundState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : step_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(int64_t{0})
  , round_(0){}
struct EventDataRoundStateDefaultTypeInternal {
  constexpr EventDataRoundStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventDataRoundStateDefaultTypeInternal() {}
  union {
    EventDataRoundState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventDataRoundStateDefaultTypeInternal _EventDataRoundState_default_instance_;
}  // namespace types
}  // namespace tendermint
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tendermint_2ftypes_2fevents_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tendermint_2ftypes_2fevents_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tendermint_2ftypes_2fevents_2eproto = nullptr;

const uint32_t TableStruct_tendermint_2ftypes_2fevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::EventDataRoundState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::EventDataRoundState, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::EventDataRoundState, round_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::EventDataRoundState, step_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tendermint::types::EventDataRoundState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_EventDataRoundState_default_instance_),
};

const char descriptor_table_protodef_tendermint_2ftypes_2fevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035tendermint/types/events.proto\022\020tenderm"
  "int.types\"B\n\023EventDataRoundState\022\016\n\006heig"
  "ht\030\001 \001(\003\022\r\n\005round\030\002 \001(\005\022\014\n\004step\030\003 \001(\tB9Z"
  "7github.com/tendermint/tendermint/proto/"
  "tendermint/typesb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tendermint_2ftypes_2fevents_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2ftypes_2fevents_2eproto = {
  false, false, 184, descriptor_table_protodef_tendermint_2ftypes_2fevents_2eproto, "tendermint/types/events.proto", 
  &descriptor_table_tendermint_2ftypes_2fevents_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_tendermint_2ftypes_2fevents_2eproto::offsets,
  file_level_metadata_tendermint_2ftypes_2fevents_2eproto, file_level_enum_descriptors_tendermint_2ftypes_2fevents_2eproto, file_level_service_descriptors_tendermint_2ftypes_2fevents_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tendermint_2ftypes_2fevents_2eproto_getter() {
  return &descriptor_table_tendermint_2ftypes_2fevents_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tendermint_2ftypes_2fevents_2eproto(&descriptor_table_tendermint_2ftypes_2fevents_2eproto);
namespace tendermint {
namespace types {

// ===================================================================

class EventDataRoundState::_Internal {
 public:
};

EventDataRoundState::EventDataRoundState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.EventDataRoundState)
}
EventDataRoundState::EventDataRoundState(const EventDataRoundState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  step_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    step_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_step().empty()) {
    step_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_step(), 
      GetArenaForAllocation());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_) -
    reinterpret_cast<char*>(&height_)) + sizeof(round_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.EventDataRoundState)
}

inline void EventDataRoundState::SharedCtor() {
step_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  step_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&round_) -
    reinterpret_cast<char*>(&height_)) + sizeof(round_));
}

EventDataRoundState::~EventDataRoundState() {
  // @@protoc_insertion_point(destructor:tendermint.types.EventDataRoundState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EventDataRoundState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  step_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EventDataRoundState::ArenaDtor(void* object) {
  EventDataRoundState* _this = reinterpret_cast< EventDataRoundState* >(object);
  (void)_this;
}
void EventDataRoundState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventDataRoundState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventDataRoundState::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.EventDataRoundState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  step_.ClearToEmpty();
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_) -
      reinterpret_cast<char*>(&height_)) + sizeof(round_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventDataRoundState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 round = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string step = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_step();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.types.EventDataRoundState.step"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventDataRoundState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.EventDataRoundState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_height(), target);
  }

  // int32 round = 2;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_round(), target);
  }

  // string step = 3;
  if (!this->_internal_step().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_step().data(), static_cast<int>(this->_internal_step().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.types.EventDataRoundState.step");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_step(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.EventDataRoundState)
  return target;
}

size_t EventDataRoundState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.EventDataRoundState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string step = 3;
  if (!this->_internal_step().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_step());
  }

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // int32 round = 2;
  if (this->_internal_round() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventDataRoundState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EventDataRoundState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventDataRoundState::GetClassData() const { return &_class_data_; }

void EventDataRoundState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EventDataRoundState *>(to)->MergeFrom(
      static_cast<const EventDataRoundState &>(from));
}


void EventDataRoundState::MergeFrom(const EventDataRoundState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.EventDataRoundState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_step().empty()) {
    _internal_set_step(from._internal_step());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _internal_set_round(from._internal_round());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventDataRoundState::CopyFrom(const EventDataRoundState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.EventDataRoundState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventDataRoundState::IsInitialized() const {
  return true;
}

void EventDataRoundState::InternalSwap(EventDataRoundState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &step_, lhs_arena,
      &other->step_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventDataRoundState, round_)
      + sizeof(EventDataRoundState::round_)
      - PROTOBUF_FIELD_OFFSET(EventDataRoundState, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventDataRoundState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fevents_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fevents_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fevents_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::types::EventDataRoundState* Arena::CreateMaybeMessage< ::tendermint::types::EventDataRoundState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::EventDataRoundState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
