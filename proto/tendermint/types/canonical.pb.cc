// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/types/canonical.proto

#include "tendermint/types/canonical.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tendermint {
namespace types {
constexpr CanonicalBlockID::CanonicalBlockID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , part_set_header_(nullptr){}
struct CanonicalBlockIDDefaultTypeInternal {
  constexpr CanonicalBlockIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CanonicalBlockIDDefaultTypeInternal() {}
  union {
    CanonicalBlockID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CanonicalBlockIDDefaultTypeInternal _CanonicalBlockID_default_instance_;
constexpr CanonicalPartSetHeader::CanonicalPartSetHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_(0u){}
struct CanonicalPartSetHeaderDefaultTypeInternal {
  constexpr CanonicalPartSetHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CanonicalPartSetHeaderDefaultTypeInternal() {}
  union {
    CanonicalPartSetHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CanonicalPartSetHeaderDefaultTypeInternal _CanonicalPartSetHeader_default_instance_;
constexpr CanonicalProposal::CanonicalProposal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_id_(nullptr)
  , timestamp_(nullptr)
  , height_(int64_t{0})
  , round_(int64_t{0})
  , pol_round_(int64_t{0})
  , type_(0)
{}
struct CanonicalProposalDefaultTypeInternal {
  constexpr CanonicalProposalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CanonicalProposalDefaultTypeInternal() {}
  union {
    CanonicalProposal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CanonicalProposalDefaultTypeInternal _CanonicalProposal_default_instance_;
constexpr CanonicalVote::CanonicalVote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_id_(nullptr)
  , timestamp_(nullptr)
  , height_(int64_t{0})
  , round_(int64_t{0})
  , type_(0)
{}
struct CanonicalVoteDefaultTypeInternal {
  constexpr CanonicalVoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CanonicalVoteDefaultTypeInternal() {}
  union {
    CanonicalVote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CanonicalVoteDefaultTypeInternal _CanonicalVote_default_instance_;
}  // namespace types
}  // namespace tendermint
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tendermint_2ftypes_2fcanonical_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tendermint_2ftypes_2fcanonical_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tendermint_2ftypes_2fcanonical_2eproto = nullptr;

const uint32_t TableStruct_tendermint_2ftypes_2fcanonical_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalBlockID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalBlockID, hash_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalBlockID, part_set_header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalPartSetHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalPartSetHeader, total_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalPartSetHeader, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalProposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalProposal, type_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalProposal, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalProposal, round_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalProposal, pol_round_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalProposal, block_id_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalProposal, timestamp_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalProposal, chain_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalVote, type_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalVote, height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalVote, round_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalVote, block_id_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalVote, timestamp_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalVote, chain_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tendermint::types::CanonicalBlockID)},
  { 8, -1, -1, sizeof(::tendermint::types::CanonicalPartSetHeader)},
  { 16, -1, -1, sizeof(::tendermint::types::CanonicalProposal)},
  { 29, -1, -1, sizeof(::tendermint::types::CanonicalVote)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_CanonicalBlockID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_CanonicalPartSetHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_CanonicalProposal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_CanonicalVote_default_instance_),
};

const char descriptor_table_protodef_tendermint_2ftypes_2fcanonical_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n tendermint/types/canonical.proto\022\020tend"
  "ermint.types\032\024gogoproto/gogo.proto\032\034tend"
  "ermint/types/types.proto\032\037google/protobu"
  "f/timestamp.proto\"i\n\020CanonicalBlockID\022\014\n"
  "\004hash\030\001 \001(\014\022G\n\017part_set_header\030\002 \001(\0132(.t"
  "endermint.types.CanonicalPartSetHeaderB\004"
  "\310\336\037\000\"5\n\026CanonicalPartSetHeader\022\r\n\005total\030"
  "\001 \001(\r\022\014\n\004hash\030\002 \001(\014\"\235\002\n\021CanonicalProposa"
  "l\022-\n\004type\030\001 \001(\0162\037.tendermint.types.Signe"
  "dMsgType\022\016\n\006height\030\002 \001(\020\022\r\n\005round\030\003 \001(\020\022"
  "\037\n\tpol_round\030\004 \001(\003B\014\342\336\037\010POLRound\022A\n\010bloc"
  "k_id\030\005 \001(\0132\".tendermint.types.CanonicalB"
  "lockIDB\013\342\336\037\007BlockID\0227\n\ttimestamp\030\006 \001(\0132\032"
  ".google.protobuf.TimestampB\010\310\336\037\000\220\337\037\001\022\035\n\010"
  "chain_id\030\007 \001(\tB\013\342\336\037\007ChainID\"\370\001\n\rCanonica"
  "lVote\022-\n\004type\030\001 \001(\0162\037.tendermint.types.S"
  "ignedMsgType\022\016\n\006height\030\002 \001(\020\022\r\n\005round\030\003 "
  "\001(\020\022A\n\010block_id\030\004 \001(\0132\".tendermint.types"
  ".CanonicalBlockIDB\013\342\336\037\007BlockID\0227\n\ttimest"
  "amp\030\005 \001(\0132\032.google.protobuf.TimestampB\010\310"
  "\336\037\000\220\337\037\001\022\035\n\010chain_id\030\006 \001(\tB\013\342\336\037\007ChainIDB9"
  "Z7github.com/tendermint/tendermint/proto"
  "/tendermint/typesb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_deps[3] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2ftypes_2fcanonical_2eproto = {
  false, false, 905, descriptor_table_protodef_tendermint_2ftypes_2fcanonical_2eproto, "tendermint/types/canonical.proto", 
  &descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_once, descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_deps, 3, 4,
  schemas, file_default_instances, TableStruct_tendermint_2ftypes_2fcanonical_2eproto::offsets,
  file_level_metadata_tendermint_2ftypes_2fcanonical_2eproto, file_level_enum_descriptors_tendermint_2ftypes_2fcanonical_2eproto, file_level_service_descriptors_tendermint_2ftypes_2fcanonical_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_getter() {
  return &descriptor_table_tendermint_2ftypes_2fcanonical_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tendermint_2ftypes_2fcanonical_2eproto(&descriptor_table_tendermint_2ftypes_2fcanonical_2eproto);
namespace tendermint {
namespace types {

// ===================================================================

class CanonicalBlockID::_Internal {
 public:
  static const ::tendermint::types::CanonicalPartSetHeader& part_set_header(const CanonicalBlockID* msg);
};

const ::tendermint::types::CanonicalPartSetHeader&
CanonicalBlockID::_Internal::part_set_header(const CanonicalBlockID* msg) {
  return *msg->part_set_header_;
}
CanonicalBlockID::CanonicalBlockID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.CanonicalBlockID)
}
CanonicalBlockID::CanonicalBlockID(const CanonicalBlockID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_part_set_header()) {
    part_set_header_ = new ::tendermint::types::CanonicalPartSetHeader(*from.part_set_header_);
  } else {
    part_set_header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.types.CanonicalBlockID)
}

inline void CanonicalBlockID::SharedCtor() {
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
part_set_header_ = nullptr;
}

CanonicalBlockID::~CanonicalBlockID() {
  // @@protoc_insertion_point(destructor:tendermint.types.CanonicalBlockID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CanonicalBlockID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete part_set_header_;
}

void CanonicalBlockID::ArenaDtor(void* object) {
  CanonicalBlockID* _this = reinterpret_cast< CanonicalBlockID* >(object);
  (void)_this;
}
void CanonicalBlockID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CanonicalBlockID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CanonicalBlockID::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.CanonicalBlockID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && part_set_header_ != nullptr) {
    delete part_set_header_;
  }
  part_set_header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanonicalBlockID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.CanonicalPartSetHeader part_set_header = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_part_set_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CanonicalBlockID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.CanonicalBlockID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // .tendermint.types.CanonicalPartSetHeader part_set_header = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_part_set_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::part_set_header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.CanonicalBlockID)
  return target;
}

size_t CanonicalBlockID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.CanonicalBlockID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // .tendermint.types.CanonicalPartSetHeader part_set_header = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_part_set_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *part_set_header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanonicalBlockID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CanonicalBlockID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanonicalBlockID::GetClassData() const { return &_class_data_; }

void CanonicalBlockID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CanonicalBlockID *>(to)->MergeFrom(
      static_cast<const CanonicalBlockID &>(from));
}


void CanonicalBlockID::MergeFrom(const CanonicalBlockID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.CanonicalBlockID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (from._internal_has_part_set_header()) {
    _internal_mutable_part_set_header()->::tendermint::types::CanonicalPartSetHeader::MergeFrom(from._internal_part_set_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanonicalBlockID::CopyFrom(const CanonicalBlockID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.CanonicalBlockID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanonicalBlockID::IsInitialized() const {
  return true;
}

void CanonicalBlockID::InternalSwap(CanonicalBlockID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, lhs_arena,
      &other->hash_, rhs_arena
  );
  swap(part_set_header_, other->part_set_header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CanonicalBlockID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fcanonical_2eproto[0]);
}

// ===================================================================

class CanonicalPartSetHeader::_Internal {
 public:
};

CanonicalPartSetHeader::CanonicalPartSetHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.CanonicalPartSetHeader)
}
CanonicalPartSetHeader::CanonicalPartSetHeader(const CanonicalPartSetHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:tendermint.types.CanonicalPartSetHeader)
}

inline void CanonicalPartSetHeader::SharedCtor() {
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
total_ = 0u;
}

CanonicalPartSetHeader::~CanonicalPartSetHeader() {
  // @@protoc_insertion_point(destructor:tendermint.types.CanonicalPartSetHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CanonicalPartSetHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CanonicalPartSetHeader::ArenaDtor(void* object) {
  CanonicalPartSetHeader* _this = reinterpret_cast< CanonicalPartSetHeader* >(object);
  (void)_this;
}
void CanonicalPartSetHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CanonicalPartSetHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CanonicalPartSetHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.CanonicalPartSetHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty();
  total_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanonicalPartSetHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CanonicalPartSetHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.CanonicalPartSetHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total = 1;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total(), target);
  }

  // bytes hash = 2;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.CanonicalPartSetHeader)
  return target;
}

size_t CanonicalPartSetHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.CanonicalPartSetHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 2;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // uint32 total = 1;
  if (this->_internal_total() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanonicalPartSetHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CanonicalPartSetHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanonicalPartSetHeader::GetClassData() const { return &_class_data_; }

void CanonicalPartSetHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CanonicalPartSetHeader *>(to)->MergeFrom(
      static_cast<const CanonicalPartSetHeader &>(from));
}


void CanonicalPartSetHeader::MergeFrom(const CanonicalPartSetHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.CanonicalPartSetHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (from._internal_total() != 0) {
    _internal_set_total(from._internal_total());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanonicalPartSetHeader::CopyFrom(const CanonicalPartSetHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.CanonicalPartSetHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanonicalPartSetHeader::IsInitialized() const {
  return true;
}

void CanonicalPartSetHeader::InternalSwap(CanonicalPartSetHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, lhs_arena,
      &other->hash_, rhs_arena
  );
  swap(total_, other->total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CanonicalPartSetHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fcanonical_2eproto[1]);
}

// ===================================================================

class CanonicalProposal::_Internal {
 public:
  static const ::tendermint::types::CanonicalBlockID& block_id(const CanonicalProposal* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const CanonicalProposal* msg);
};

const ::tendermint::types::CanonicalBlockID&
CanonicalProposal::_Internal::block_id(const CanonicalProposal* msg) {
  return *msg->block_id_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CanonicalProposal::_Internal::timestamp(const CanonicalProposal* msg) {
  return *msg->timestamp_;
}
void CanonicalProposal::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
CanonicalProposal::CanonicalProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.CanonicalProposal)
}
CanonicalProposal::CanonicalProposal(const CanonicalProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_block_id()) {
    block_id_ = new ::tendermint::types::CanonicalBlockID(*from.block_id_);
  } else {
    block_id_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&height_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.CanonicalProposal)
}

inline void CanonicalProposal::SharedCtor() {
chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&block_id_)) + sizeof(type_));
}

CanonicalProposal::~CanonicalProposal() {
  // @@protoc_insertion_point(destructor:tendermint.types.CanonicalProposal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CanonicalProposal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete block_id_;
  if (this != internal_default_instance()) delete timestamp_;
}

void CanonicalProposal::ArenaDtor(void* object) {
  CanonicalProposal* _this = reinterpret_cast< CanonicalProposal* >(object);
  (void)_this;
}
void CanonicalProposal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CanonicalProposal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CanonicalProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.CanonicalProposal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && block_id_ != nullptr) {
    delete block_id_;
  }
  block_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&height_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanonicalProposal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.SignedMsgType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tendermint::types::SignedMsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // sfixed64 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed64 round = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // int64 pol_round = 4 [(.gogoproto.customname) = "POLRound"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          pol_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.CanonicalBlockID block_id = 5 [(.gogoproto.customname) = "BlockID"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 6 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chain_id = 7 [(.gogoproto.customname) = "ChainID"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.types.CanonicalProposal.chain_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CanonicalProposal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.CanonicalProposal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.SignedMsgType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // sfixed64 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(2, this->_internal_height(), target);
  }

  // sfixed64 round = 3;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(3, this->_internal_round(), target);
  }

  // int64 pol_round = 4 [(.gogoproto.customname) = "POLRound"];
  if (this->_internal_pol_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_pol_round(), target);
  }

  // .tendermint.types.CanonicalBlockID block_id = 5 [(.gogoproto.customname) = "BlockID"];
  if (this->_internal_has_block_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::block_id(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 6 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::timestamp(this), target, stream);
  }

  // string chain_id = 7 [(.gogoproto.customname) = "ChainID"];
  if (!this->_internal_chain_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.types.CanonicalProposal.chain_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_chain_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.CanonicalProposal)
  return target;
}

size_t CanonicalProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.CanonicalProposal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain_id = 7 [(.gogoproto.customname) = "ChainID"];
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // .tendermint.types.CanonicalBlockID block_id = 5 [(.gogoproto.customname) = "BlockID"];
  if (this->_internal_has_block_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_id_);
  }

  // .google.protobuf.Timestamp timestamp = 6 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // sfixed64 height = 2;
  if (this->_internal_height() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 round = 3;
  if (this->_internal_round() != 0) {
    total_size += 1 + 8;
  }

  // int64 pol_round = 4 [(.gogoproto.customname) = "POLRound"];
  if (this->_internal_pol_round() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_pol_round());
  }

  // .tendermint.types.SignedMsgType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanonicalProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CanonicalProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanonicalProposal::GetClassData() const { return &_class_data_; }

void CanonicalProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CanonicalProposal *>(to)->MergeFrom(
      static_cast<const CanonicalProposal &>(from));
}


void CanonicalProposal::MergeFrom(const CanonicalProposal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.CanonicalProposal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_has_block_id()) {
    _internal_mutable_block_id()->::tendermint::types::CanonicalBlockID::MergeFrom(from._internal_block_id());
  }
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _internal_set_round(from._internal_round());
  }
  if (from._internal_pol_round() != 0) {
    _internal_set_pol_round(from._internal_pol_round());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanonicalProposal::CopyFrom(const CanonicalProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.CanonicalProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanonicalProposal::IsInitialized() const {
  return true;
}

void CanonicalProposal::InternalSwap(CanonicalProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chain_id_, lhs_arena,
      &other->chain_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CanonicalProposal, type_)
      + sizeof(CanonicalProposal::type_)
      - PROTOBUF_FIELD_OFFSET(CanonicalProposal, block_id_)>(
          reinterpret_cast<char*>(&block_id_),
          reinterpret_cast<char*>(&other->block_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CanonicalProposal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fcanonical_2eproto[2]);
}

// ===================================================================

class CanonicalVote::_Internal {
 public:
  static const ::tendermint::types::CanonicalBlockID& block_id(const CanonicalVote* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const CanonicalVote* msg);
};

const ::tendermint::types::CanonicalBlockID&
CanonicalVote::_Internal::block_id(const CanonicalVote* msg) {
  return *msg->block_id_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CanonicalVote::_Internal::timestamp(const CanonicalVote* msg) {
  return *msg->timestamp_;
}
void CanonicalVote::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
CanonicalVote::CanonicalVote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.CanonicalVote)
}
CanonicalVote::CanonicalVote(const CanonicalVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_block_id()) {
    block_id_ = new ::tendermint::types::CanonicalBlockID(*from.block_id_);
  } else {
    block_id_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&height_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.CanonicalVote)
}

inline void CanonicalVote::SharedCtor() {
chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&block_id_)) + sizeof(type_));
}

CanonicalVote::~CanonicalVote() {
  // @@protoc_insertion_point(destructor:tendermint.types.CanonicalVote)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CanonicalVote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete block_id_;
  if (this != internal_default_instance()) delete timestamp_;
}

void CanonicalVote::ArenaDtor(void* object) {
  CanonicalVote* _this = reinterpret_cast< CanonicalVote* >(object);
  (void)_this;
}
void CanonicalVote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CanonicalVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CanonicalVote::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.CanonicalVote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && block_id_ != nullptr) {
    delete block_id_;
  }
  block_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&height_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanonicalVote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.SignedMsgType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tendermint::types::SignedMsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // sfixed64 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed64 round = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.CanonicalBlockID block_id = 4 [(.gogoproto.customname) = "BlockID"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chain_id = 6 [(.gogoproto.customname) = "ChainID"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.types.CanonicalVote.chain_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CanonicalVote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.CanonicalVote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.SignedMsgType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // sfixed64 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(2, this->_internal_height(), target);
  }

  // sfixed64 round = 3;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(3, this->_internal_round(), target);
  }

  // .tendermint.types.CanonicalBlockID block_id = 4 [(.gogoproto.customname) = "BlockID"];
  if (this->_internal_has_block_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::block_id(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::timestamp(this), target, stream);
  }

  // string chain_id = 6 [(.gogoproto.customname) = "ChainID"];
  if (!this->_internal_chain_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.types.CanonicalVote.chain_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_chain_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.CanonicalVote)
  return target;
}

size_t CanonicalVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.CanonicalVote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain_id = 6 [(.gogoproto.customname) = "ChainID"];
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // .tendermint.types.CanonicalBlockID block_id = 4 [(.gogoproto.customname) = "BlockID"];
  if (this->_internal_has_block_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_id_);
  }

  // .google.protobuf.Timestamp timestamp = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // sfixed64 height = 2;
  if (this->_internal_height() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 round = 3;
  if (this->_internal_round() != 0) {
    total_size += 1 + 8;
  }

  // .tendermint.types.SignedMsgType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanonicalVote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CanonicalVote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanonicalVote::GetClassData() const { return &_class_data_; }

void CanonicalVote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CanonicalVote *>(to)->MergeFrom(
      static_cast<const CanonicalVote &>(from));
}


void CanonicalVote::MergeFrom(const CanonicalVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.CanonicalVote)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_has_block_id()) {
    _internal_mutable_block_id()->::tendermint::types::CanonicalBlockID::MergeFrom(from._internal_block_id());
  }
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _internal_set_round(from._internal_round());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanonicalVote::CopyFrom(const CanonicalVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.CanonicalVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanonicalVote::IsInitialized() const {
  return true;
}

void CanonicalVote::InternalSwap(CanonicalVote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chain_id_, lhs_arena,
      &other->chain_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CanonicalVote, type_)
      + sizeof(CanonicalVote::type_)
      - PROTOBUF_FIELD_OFFSET(CanonicalVote, block_id_)>(
          reinterpret_cast<char*>(&block_id_),
          reinterpret_cast<char*>(&other->block_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CanonicalVote::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fcanonical_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::types::CanonicalBlockID* Arena::CreateMaybeMessage< ::tendermint::types::CanonicalBlockID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::CanonicalBlockID >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::CanonicalPartSetHeader* Arena::CreateMaybeMessage< ::tendermint::types::CanonicalPartSetHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::CanonicalPartSetHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::CanonicalProposal* Arena::CreateMaybeMessage< ::tendermint::types::CanonicalProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::CanonicalProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::CanonicalVote* Arena::CreateMaybeMessage< ::tendermint::types::CanonicalVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::CanonicalVote >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
