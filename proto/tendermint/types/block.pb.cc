// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/types/block.proto

#include "tendermint/types/block.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tendermint {
namespace types {
constexpr Block::Block(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , data_(nullptr)
  , evidence_(nullptr)
  , last_commit_(nullptr){}
struct BlockDefaultTypeInternal {
  constexpr BlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace types
}  // namespace tendermint
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tendermint_2ftypes_2fblock_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tendermint_2ftypes_2fblock_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tendermint_2ftypes_2fblock_2eproto = nullptr;

const uint32_t TableStruct_tendermint_2ftypes_2fblock_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Block, header_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Block, data_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Block, evidence_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Block, last_commit_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tendermint::types::Block)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_Block_default_instance_),
};

const char descriptor_table_protodef_tendermint_2ftypes_2fblock_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034tendermint/types/block.proto\022\020tendermi"
  "nt.types\032\024gogoproto/gogo.proto\032\034tendermi"
  "nt/types/types.proto\032\037tendermint/types/e"
  "vidence.proto\"\312\001\n\005Block\022.\n\006header\030\001 \001(\0132"
  "\030.tendermint.types.HeaderB\004\310\336\037\000\022*\n\004data\030"
  "\002 \001(\0132\026.tendermint.types.DataB\004\310\336\037\000\0226\n\010e"
  "vidence\030\003 \001(\0132\036.tendermint.types.Evidenc"
  "eListB\004\310\336\037\000\022-\n\013last_commit\030\004 \001(\0132\030.tende"
  "rmint.types.CommitB9Z7github.com/tenderm"
  "int/tendermint/proto/tendermint/typesb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tendermint_2ftypes_2fblock_2eproto_deps[3] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_tendermint_2ftypes_2fevidence_2eproto,
  &::descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tendermint_2ftypes_2fblock_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2ftypes_2fblock_2eproto = {
  false, false, 405, descriptor_table_protodef_tendermint_2ftypes_2fblock_2eproto, "tendermint/types/block.proto", 
  &descriptor_table_tendermint_2ftypes_2fblock_2eproto_once, descriptor_table_tendermint_2ftypes_2fblock_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_tendermint_2ftypes_2fblock_2eproto::offsets,
  file_level_metadata_tendermint_2ftypes_2fblock_2eproto, file_level_enum_descriptors_tendermint_2ftypes_2fblock_2eproto, file_level_service_descriptors_tendermint_2ftypes_2fblock_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tendermint_2ftypes_2fblock_2eproto_getter() {
  return &descriptor_table_tendermint_2ftypes_2fblock_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tendermint_2ftypes_2fblock_2eproto(&descriptor_table_tendermint_2ftypes_2fblock_2eproto);
namespace tendermint {
namespace types {

// ===================================================================

class Block::_Internal {
 public:
  static const ::tendermint::types::Header& header(const Block* msg);
  static const ::tendermint::types::Data& data(const Block* msg);
  static const ::tendermint::types::EvidenceList& evidence(const Block* msg);
  static const ::tendermint::types::Commit& last_commit(const Block* msg);
};

const ::tendermint::types::Header&
Block::_Internal::header(const Block* msg) {
  return *msg->header_;
}
const ::tendermint::types::Data&
Block::_Internal::data(const Block* msg) {
  return *msg->data_;
}
const ::tendermint::types::EvidenceList&
Block::_Internal::evidence(const Block* msg) {
  return *msg->evidence_;
}
const ::tendermint::types::Commit&
Block::_Internal::last_commit(const Block* msg) {
  return *msg->last_commit_;
}
void Block::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void Block::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
void Block::clear_evidence() {
  if (GetArenaForAllocation() == nullptr && evidence_ != nullptr) {
    delete evidence_;
  }
  evidence_ = nullptr;
}
void Block::clear_last_commit() {
  if (GetArenaForAllocation() == nullptr && last_commit_ != nullptr) {
    delete last_commit_;
  }
  last_commit_ = nullptr;
}
Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::tendermint::types::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::tendermint::types::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_evidence()) {
    evidence_ = new ::tendermint::types::EvidenceList(*from.evidence_);
  } else {
    evidence_ = nullptr;
  }
  if (from._internal_has_last_commit()) {
    last_commit_ = new ::tendermint::types::Commit(*from.last_commit_);
  } else {
    last_commit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.types.Block)
}

inline void Block::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_commit_) -
    reinterpret_cast<char*>(&header_)) + sizeof(last_commit_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:tendermint.types.Block)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete evidence_;
  if (this != internal_default_instance()) delete last_commit_;
}

void Block::ArenaDtor(void* object) {
  Block* _this = reinterpret_cast< Block* >(object);
  (void)_this;
}
void Block::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && evidence_ != nullptr) {
    delete evidence_;
  }
  evidence_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_commit_ != nullptr) {
    delete last_commit_;
  }
  last_commit_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.Header header = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.Data data = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.EvidenceList evidence = 3 [(.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_evidence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.Commit last_commit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_commit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.Header header = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .tendermint.types.Data data = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // .tendermint.types.EvidenceList evidence = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_evidence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::evidence(this), target, stream);
  }

  // .tendermint.types.Commit last_commit = 4;
  if (this->_internal_has_last_commit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::last_commit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.Block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.Header header = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .tendermint.types.Data data = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .tendermint.types.EvidenceList evidence = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_evidence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *evidence_);
  }

  // .tendermint.types.Commit last_commit = 4;
  if (this->_internal_has_last_commit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_commit_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block::GetClassData() const { return &_class_data_; }

void Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Block *>(to)->MergeFrom(
      static_cast<const Block &>(from));
}


void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Block)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::tendermint::types::Header::MergeFrom(from._internal_header());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::tendermint::types::Data::MergeFrom(from._internal_data());
  }
  if (from._internal_has_evidence()) {
    _internal_mutable_evidence()->::tendermint::types::EvidenceList::MergeFrom(from._internal_evidence());
  }
  if (from._internal_has_last_commit()) {
    _internal_mutable_last_commit()->::tendermint::types::Commit::MergeFrom(from._internal_last_commit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, last_commit_)
      + sizeof(Block::last_commit_)
      - PROTOBUF_FIELD_OFFSET(Block, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fblock_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fblock_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fblock_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::types::Block* Arena::CreateMaybeMessage< ::tendermint::types::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::Block >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
