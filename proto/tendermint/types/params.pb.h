// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/types/params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2fparams_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2fparams_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tendermint_2ftypes_2fparams_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2ftypes_2fparams_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2ftypes_2fparams_2eproto;
namespace tendermint {
namespace types {
class BlockParams;
struct BlockParamsDefaultTypeInternal;
extern BlockParamsDefaultTypeInternal _BlockParams_default_instance_;
class ConsensusParams;
struct ConsensusParamsDefaultTypeInternal;
extern ConsensusParamsDefaultTypeInternal _ConsensusParams_default_instance_;
class EvidenceParams;
struct EvidenceParamsDefaultTypeInternal;
extern EvidenceParamsDefaultTypeInternal _EvidenceParams_default_instance_;
class HashedParams;
struct HashedParamsDefaultTypeInternal;
extern HashedParamsDefaultTypeInternal _HashedParams_default_instance_;
class ValidatorParams;
struct ValidatorParamsDefaultTypeInternal;
extern ValidatorParamsDefaultTypeInternal _ValidatorParams_default_instance_;
class VersionParams;
struct VersionParamsDefaultTypeInternal;
extern VersionParamsDefaultTypeInternal _VersionParams_default_instance_;
}  // namespace types
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> ::tendermint::types::BlockParams* Arena::CreateMaybeMessage<::tendermint::types::BlockParams>(Arena*);
template<> ::tendermint::types::ConsensusParams* Arena::CreateMaybeMessage<::tendermint::types::ConsensusParams>(Arena*);
template<> ::tendermint::types::EvidenceParams* Arena::CreateMaybeMessage<::tendermint::types::EvidenceParams>(Arena*);
template<> ::tendermint::types::HashedParams* Arena::CreateMaybeMessage<::tendermint::types::HashedParams>(Arena*);
template<> ::tendermint::types::ValidatorParams* Arena::CreateMaybeMessage<::tendermint::types::ValidatorParams>(Arena*);
template<> ::tendermint::types::VersionParams* Arena::CreateMaybeMessage<::tendermint::types::VersionParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tendermint {
namespace types {

// ===================================================================

class ConsensusParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.ConsensusParams) */ {
 public:
  inline ConsensusParams() : ConsensusParams(nullptr) {}
  ~ConsensusParams() override;
  explicit constexpr ConsensusParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConsensusParams(const ConsensusParams& from);
  ConsensusParams(ConsensusParams&& from) noexcept
    : ConsensusParams() {
    *this = ::std::move(from);
  }

  inline ConsensusParams& operator=(const ConsensusParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusParams& operator=(ConsensusParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsensusParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsensusParams* internal_default_instance() {
    return reinterpret_cast<const ConsensusParams*>(
               &_ConsensusParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConsensusParams& a, ConsensusParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsensusParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsensusParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConsensusParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConsensusParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConsensusParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConsensusParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.types.ConsensusParams";
  }
  protected:
  explicit ConsensusParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
    kEvidenceFieldNumber = 2,
    kValidatorFieldNumber = 3,
    kVersionFieldNumber = 4,
  };
  // .tendermint.types.BlockParams block = 1 [(.gogoproto.nullable) = false];
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::tendermint::types::BlockParams& block() const;
  PROTOBUF_NODISCARD ::tendermint::types::BlockParams* release_block();
  ::tendermint::types::BlockParams* mutable_block();
  void set_allocated_block(::tendermint::types::BlockParams* block);
  private:
  const ::tendermint::types::BlockParams& _internal_block() const;
  ::tendermint::types::BlockParams* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::tendermint::types::BlockParams* block);
  ::tendermint::types::BlockParams* unsafe_arena_release_block();

  // .tendermint.types.EvidenceParams evidence = 2 [(.gogoproto.nullable) = false];
  bool has_evidence() const;
  private:
  bool _internal_has_evidence() const;
  public:
  void clear_evidence();
  const ::tendermint::types::EvidenceParams& evidence() const;
  PROTOBUF_NODISCARD ::tendermint::types::EvidenceParams* release_evidence();
  ::tendermint::types::EvidenceParams* mutable_evidence();
  void set_allocated_evidence(::tendermint::types::EvidenceParams* evidence);
  private:
  const ::tendermint::types::EvidenceParams& _internal_evidence() const;
  ::tendermint::types::EvidenceParams* _internal_mutable_evidence();
  public:
  void unsafe_arena_set_allocated_evidence(
      ::tendermint::types::EvidenceParams* evidence);
  ::tendermint::types::EvidenceParams* unsafe_arena_release_evidence();

  // .tendermint.types.ValidatorParams validator = 3 [(.gogoproto.nullable) = false];
  bool has_validator() const;
  private:
  bool _internal_has_validator() const;
  public:
  void clear_validator();
  const ::tendermint::types::ValidatorParams& validator() const;
  PROTOBUF_NODISCARD ::tendermint::types::ValidatorParams* release_validator();
  ::tendermint::types::ValidatorParams* mutable_validator();
  void set_allocated_validator(::tendermint::types::ValidatorParams* validator);
  private:
  const ::tendermint::types::ValidatorParams& _internal_validator() const;
  ::tendermint::types::ValidatorParams* _internal_mutable_validator();
  public:
  void unsafe_arena_set_allocated_validator(
      ::tendermint::types::ValidatorParams* validator);
  ::tendermint::types::ValidatorParams* unsafe_arena_release_validator();

  // .tendermint.types.VersionParams version = 4 [(.gogoproto.nullable) = false];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::tendermint::types::VersionParams& version() const;
  PROTOBUF_NODISCARD ::tendermint::types::VersionParams* release_version();
  ::tendermint::types::VersionParams* mutable_version();
  void set_allocated_version(::tendermint::types::VersionParams* version);
  private:
  const ::tendermint::types::VersionParams& _internal_version() const;
  ::tendermint::types::VersionParams* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::tendermint::types::VersionParams* version);
  ::tendermint::types::VersionParams* unsafe_arena_release_version();

  // @@protoc_insertion_point(class_scope:tendermint.types.ConsensusParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tendermint::types::BlockParams* block_;
  ::tendermint::types::EvidenceParams* evidence_;
  ::tendermint::types::ValidatorParams* validator_;
  ::tendermint::types::VersionParams* version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2ftypes_2fparams_2eproto;
};
// -------------------------------------------------------------------

class BlockParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.BlockParams) */ {
 public:
  inline BlockParams() : BlockParams(nullptr) {}
  ~BlockParams() override;
  explicit constexpr BlockParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockParams(const BlockParams& from);
  BlockParams(BlockParams&& from) noexcept
    : BlockParams() {
    *this = ::std::move(from);
  }

  inline BlockParams& operator=(const BlockParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockParams& operator=(BlockParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockParams* internal_default_instance() {
    return reinterpret_cast<const BlockParams*>(
               &_BlockParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlockParams& a, BlockParams& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.types.BlockParams";
  }
  protected:
  explicit BlockParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxBytesFieldNumber = 1,
    kMaxGasFieldNumber = 2,
    kTimeIotaMsFieldNumber = 3,
  };
  // int64 max_bytes = 1;
  void clear_max_bytes();
  int64_t max_bytes() const;
  void set_max_bytes(int64_t value);
  private:
  int64_t _internal_max_bytes() const;
  void _internal_set_max_bytes(int64_t value);
  public:

  // int64 max_gas = 2;
  void clear_max_gas();
  int64_t max_gas() const;
  void set_max_gas(int64_t value);
  private:
  int64_t _internal_max_gas() const;
  void _internal_set_max_gas(int64_t value);
  public:

  // int64 time_iota_ms = 3;
  void clear_time_iota_ms();
  int64_t time_iota_ms() const;
  void set_time_iota_ms(int64_t value);
  private:
  int64_t _internal_time_iota_ms() const;
  void _internal_set_time_iota_ms(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.types.BlockParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t max_bytes_;
  int64_t max_gas_;
  int64_t time_iota_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2ftypes_2fparams_2eproto;
};
// -------------------------------------------------------------------

class EvidenceParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.EvidenceParams) */ {
 public:
  inline EvidenceParams() : EvidenceParams(nullptr) {}
  ~EvidenceParams() override;
  explicit constexpr EvidenceParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EvidenceParams(const EvidenceParams& from);
  EvidenceParams(EvidenceParams&& from) noexcept
    : EvidenceParams() {
    *this = ::std::move(from);
  }

  inline EvidenceParams& operator=(const EvidenceParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvidenceParams& operator=(EvidenceParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EvidenceParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EvidenceParams* internal_default_instance() {
    return reinterpret_cast<const EvidenceParams*>(
               &_EvidenceParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EvidenceParams& a, EvidenceParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EvidenceParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvidenceParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EvidenceParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EvidenceParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EvidenceParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EvidenceParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvidenceParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.types.EvidenceParams";
  }
  protected:
  explicit EvidenceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxAgeDurationFieldNumber = 2,
    kMaxAgeNumBlocksFieldNumber = 1,
    kMaxBytesFieldNumber = 3,
  };
  // .google.protobuf.Duration max_age_duration = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  bool has_max_age_duration() const;
  private:
  bool _internal_has_max_age_duration() const;
  public:
  void clear_max_age_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& max_age_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_max_age_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_max_age_duration();
  void set_allocated_max_age_duration(::PROTOBUF_NAMESPACE_ID::Duration* max_age_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_max_age_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_max_age_duration();
  public:
  void unsafe_arena_set_allocated_max_age_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* max_age_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_max_age_duration();

  // int64 max_age_num_blocks = 1;
  void clear_max_age_num_blocks();
  int64_t max_age_num_blocks() const;
  void set_max_age_num_blocks(int64_t value);
  private:
  int64_t _internal_max_age_num_blocks() const;
  void _internal_set_max_age_num_blocks(int64_t value);
  public:

  // int64 max_bytes = 3;
  void clear_max_bytes();
  int64_t max_bytes() const;
  void set_max_bytes(int64_t value);
  private:
  int64_t _internal_max_bytes() const;
  void _internal_set_max_bytes(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.types.EvidenceParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Duration* max_age_duration_;
  int64_t max_age_num_blocks_;
  int64_t max_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2ftypes_2fparams_2eproto;
};
// -------------------------------------------------------------------

class ValidatorParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.ValidatorParams) */ {
 public:
  inline ValidatorParams() : ValidatorParams(nullptr) {}
  ~ValidatorParams() override;
  explicit constexpr ValidatorParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidatorParams(const ValidatorParams& from);
  ValidatorParams(ValidatorParams&& from) noexcept
    : ValidatorParams() {
    *this = ::std::move(from);
  }

  inline ValidatorParams& operator=(const ValidatorParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorParams& operator=(ValidatorParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidatorParams* internal_default_instance() {
    return reinterpret_cast<const ValidatorParams*>(
               &_ValidatorParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ValidatorParams& a, ValidatorParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatorParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidatorParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidatorParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidatorParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ValidatorParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatorParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.types.ValidatorParams";
  }
  protected:
  explicit ValidatorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeyTypesFieldNumber = 1,
  };
  // repeated string pub_key_types = 1;
  int pub_key_types_size() const;
  private:
  int _internal_pub_key_types_size() const;
  public:
  void clear_pub_key_types();
  const std::string& pub_key_types(int index) const;
  std::string* mutable_pub_key_types(int index);
  void set_pub_key_types(int index, const std::string& value);
  void set_pub_key_types(int index, std::string&& value);
  void set_pub_key_types(int index, const char* value);
  void set_pub_key_types(int index, const char* value, size_t size);
  std::string* add_pub_key_types();
  void add_pub_key_types(const std::string& value);
  void add_pub_key_types(std::string&& value);
  void add_pub_key_types(const char* value);
  void add_pub_key_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pub_key_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pub_key_types();
  private:
  const std::string& _internal_pub_key_types(int index) const;
  std::string* _internal_add_pub_key_types();
  public:

  // @@protoc_insertion_point(class_scope:tendermint.types.ValidatorParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pub_key_types_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2ftypes_2fparams_2eproto;
};
// -------------------------------------------------------------------

class VersionParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.VersionParams) */ {
 public:
  inline VersionParams() : VersionParams(nullptr) {}
  ~VersionParams() override;
  explicit constexpr VersionParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersionParams(const VersionParams& from);
  VersionParams(VersionParams&& from) noexcept
    : VersionParams() {
    *this = ::std::move(from);
  }

  inline VersionParams& operator=(const VersionParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionParams& operator=(VersionParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersionParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersionParams* internal_default_instance() {
    return reinterpret_cast<const VersionParams*>(
               &_VersionParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VersionParams& a, VersionParams& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VersionParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VersionParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VersionParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VersionParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.types.VersionParams";
  }
  protected:
  explicit VersionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppVersionFieldNumber = 1,
  };
  // uint64 app_version = 1;
  void clear_app_version();
  uint64_t app_version() const;
  void set_app_version(uint64_t value);
  private:
  uint64_t _internal_app_version() const;
  void _internal_set_app_version(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.types.VersionParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t app_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2ftypes_2fparams_2eproto;
};
// -------------------------------------------------------------------

class HashedParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.HashedParams) */ {
 public:
  inline HashedParams() : HashedParams(nullptr) {}
  ~HashedParams() override;
  explicit constexpr HashedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HashedParams(const HashedParams& from);
  HashedParams(HashedParams&& from) noexcept
    : HashedParams() {
    *this = ::std::move(from);
  }

  inline HashedParams& operator=(const HashedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashedParams& operator=(HashedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HashedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const HashedParams* internal_default_instance() {
    return reinterpret_cast<const HashedParams*>(
               &_HashedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HashedParams& a, HashedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(HashedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashedParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HashedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HashedParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HashedParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HashedParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tendermint.types.HashedParams";
  }
  protected:
  explicit HashedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockMaxBytesFieldNumber = 1,
    kBlockMaxGasFieldNumber = 2,
  };
  // int64 block_max_bytes = 1;
  void clear_block_max_bytes();
  int64_t block_max_bytes() const;
  void set_block_max_bytes(int64_t value);
  private:
  int64_t _internal_block_max_bytes() const;
  void _internal_set_block_max_bytes(int64_t value);
  public:

  // int64 block_max_gas = 2;
  void clear_block_max_gas();
  int64_t block_max_gas() const;
  void set_block_max_gas(int64_t value);
  private:
  int64_t _internal_block_max_gas() const;
  void _internal_set_block_max_gas(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tendermint.types.HashedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t block_max_bytes_;
  int64_t block_max_gas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tendermint_2ftypes_2fparams_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConsensusParams

// .tendermint.types.BlockParams block = 1 [(.gogoproto.nullable) = false];
inline bool ConsensusParams::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool ConsensusParams::has_block() const {
  return _internal_has_block();
}
inline void ConsensusParams::clear_block() {
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::tendermint::types::BlockParams& ConsensusParams::_internal_block() const {
  const ::tendermint::types::BlockParams* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::BlockParams&>(
      ::tendermint::types::_BlockParams_default_instance_);
}
inline const ::tendermint::types::BlockParams& ConsensusParams::block() const {
  // @@protoc_insertion_point(field_get:tendermint.types.ConsensusParams.block)
  return _internal_block();
}
inline void ConsensusParams::unsafe_arena_set_allocated_block(
    ::tendermint::types::BlockParams* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.ConsensusParams.block)
}
inline ::tendermint::types::BlockParams* ConsensusParams::release_block() {
  
  ::tendermint::types::BlockParams* temp = block_;
  block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::BlockParams* ConsensusParams::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:tendermint.types.ConsensusParams.block)
  
  ::tendermint::types::BlockParams* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::tendermint::types::BlockParams* ConsensusParams::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::BlockParams>(GetArenaForAllocation());
    block_ = p;
  }
  return block_;
}
inline ::tendermint::types::BlockParams* ConsensusParams::mutable_block() {
  ::tendermint::types::BlockParams* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:tendermint.types.ConsensusParams.block)
  return _msg;
}
inline void ConsensusParams::set_allocated_block(::tendermint::types::BlockParams* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::types::BlockParams>::GetOwningArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.ConsensusParams.block)
}

// .tendermint.types.EvidenceParams evidence = 2 [(.gogoproto.nullable) = false];
inline bool ConsensusParams::_internal_has_evidence() const {
  return this != internal_default_instance() && evidence_ != nullptr;
}
inline bool ConsensusParams::has_evidence() const {
  return _internal_has_evidence();
}
inline void ConsensusParams::clear_evidence() {
  if (GetArenaForAllocation() == nullptr && evidence_ != nullptr) {
    delete evidence_;
  }
  evidence_ = nullptr;
}
inline const ::tendermint::types::EvidenceParams& ConsensusParams::_internal_evidence() const {
  const ::tendermint::types::EvidenceParams* p = evidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::EvidenceParams&>(
      ::tendermint::types::_EvidenceParams_default_instance_);
}
inline const ::tendermint::types::EvidenceParams& ConsensusParams::evidence() const {
  // @@protoc_insertion_point(field_get:tendermint.types.ConsensusParams.evidence)
  return _internal_evidence();
}
inline void ConsensusParams::unsafe_arena_set_allocated_evidence(
    ::tendermint::types::EvidenceParams* evidence) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(evidence_);
  }
  evidence_ = evidence;
  if (evidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.ConsensusParams.evidence)
}
inline ::tendermint::types::EvidenceParams* ConsensusParams::release_evidence() {
  
  ::tendermint::types::EvidenceParams* temp = evidence_;
  evidence_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::EvidenceParams* ConsensusParams::unsafe_arena_release_evidence() {
  // @@protoc_insertion_point(field_release:tendermint.types.ConsensusParams.evidence)
  
  ::tendermint::types::EvidenceParams* temp = evidence_;
  evidence_ = nullptr;
  return temp;
}
inline ::tendermint::types::EvidenceParams* ConsensusParams::_internal_mutable_evidence() {
  
  if (evidence_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::EvidenceParams>(GetArenaForAllocation());
    evidence_ = p;
  }
  return evidence_;
}
inline ::tendermint::types::EvidenceParams* ConsensusParams::mutable_evidence() {
  ::tendermint::types::EvidenceParams* _msg = _internal_mutable_evidence();
  // @@protoc_insertion_point(field_mutable:tendermint.types.ConsensusParams.evidence)
  return _msg;
}
inline void ConsensusParams::set_allocated_evidence(::tendermint::types::EvidenceParams* evidence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete evidence_;
  }
  if (evidence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::types::EvidenceParams>::GetOwningArena(evidence);
    if (message_arena != submessage_arena) {
      evidence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, evidence, submessage_arena);
    }
    
  } else {
    
  }
  evidence_ = evidence;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.ConsensusParams.evidence)
}

// .tendermint.types.ValidatorParams validator = 3 [(.gogoproto.nullable) = false];
inline bool ConsensusParams::_internal_has_validator() const {
  return this != internal_default_instance() && validator_ != nullptr;
}
inline bool ConsensusParams::has_validator() const {
  return _internal_has_validator();
}
inline void ConsensusParams::clear_validator() {
  if (GetArenaForAllocation() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
}
inline const ::tendermint::types::ValidatorParams& ConsensusParams::_internal_validator() const {
  const ::tendermint::types::ValidatorParams* p = validator_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::ValidatorParams&>(
      ::tendermint::types::_ValidatorParams_default_instance_);
}
inline const ::tendermint::types::ValidatorParams& ConsensusParams::validator() const {
  // @@protoc_insertion_point(field_get:tendermint.types.ConsensusParams.validator)
  return _internal_validator();
}
inline void ConsensusParams::unsafe_arena_set_allocated_validator(
    ::tendermint::types::ValidatorParams* validator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validator_);
  }
  validator_ = validator;
  if (validator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.ConsensusParams.validator)
}
inline ::tendermint::types::ValidatorParams* ConsensusParams::release_validator() {
  
  ::tendermint::types::ValidatorParams* temp = validator_;
  validator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::ValidatorParams* ConsensusParams::unsafe_arena_release_validator() {
  // @@protoc_insertion_point(field_release:tendermint.types.ConsensusParams.validator)
  
  ::tendermint::types::ValidatorParams* temp = validator_;
  validator_ = nullptr;
  return temp;
}
inline ::tendermint::types::ValidatorParams* ConsensusParams::_internal_mutable_validator() {
  
  if (validator_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::ValidatorParams>(GetArenaForAllocation());
    validator_ = p;
  }
  return validator_;
}
inline ::tendermint::types::ValidatorParams* ConsensusParams::mutable_validator() {
  ::tendermint::types::ValidatorParams* _msg = _internal_mutable_validator();
  // @@protoc_insertion_point(field_mutable:tendermint.types.ConsensusParams.validator)
  return _msg;
}
inline void ConsensusParams::set_allocated_validator(::tendermint::types::ValidatorParams* validator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete validator_;
  }
  if (validator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::types::ValidatorParams>::GetOwningArena(validator);
    if (message_arena != submessage_arena) {
      validator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validator, submessage_arena);
    }
    
  } else {
    
  }
  validator_ = validator;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.ConsensusParams.validator)
}

// .tendermint.types.VersionParams version = 4 [(.gogoproto.nullable) = false];
inline bool ConsensusParams::_internal_has_version() const {
  return this != internal_default_instance() && version_ != nullptr;
}
inline bool ConsensusParams::has_version() const {
  return _internal_has_version();
}
inline void ConsensusParams::clear_version() {
  if (GetArenaForAllocation() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
inline const ::tendermint::types::VersionParams& ConsensusParams::_internal_version() const {
  const ::tendermint::types::VersionParams* p = version_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::VersionParams&>(
      ::tendermint::types::_VersionParams_default_instance_);
}
inline const ::tendermint::types::VersionParams& ConsensusParams::version() const {
  // @@protoc_insertion_point(field_get:tendermint.types.ConsensusParams.version)
  return _internal_version();
}
inline void ConsensusParams::unsafe_arena_set_allocated_version(
    ::tendermint::types::VersionParams* version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  version_ = version;
  if (version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.ConsensusParams.version)
}
inline ::tendermint::types::VersionParams* ConsensusParams::release_version() {
  
  ::tendermint::types::VersionParams* temp = version_;
  version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::VersionParams* ConsensusParams::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:tendermint.types.ConsensusParams.version)
  
  ::tendermint::types::VersionParams* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::tendermint::types::VersionParams* ConsensusParams::_internal_mutable_version() {
  
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::VersionParams>(GetArenaForAllocation());
    version_ = p;
  }
  return version_;
}
inline ::tendermint::types::VersionParams* ConsensusParams::mutable_version() {
  ::tendermint::types::VersionParams* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:tendermint.types.ConsensusParams.version)
  return _msg;
}
inline void ConsensusParams::set_allocated_version(::tendermint::types::VersionParams* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete version_;
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::types::VersionParams>::GetOwningArena(version);
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.ConsensusParams.version)
}

// -------------------------------------------------------------------

// BlockParams

// int64 max_bytes = 1;
inline void BlockParams::clear_max_bytes() {
  max_bytes_ = int64_t{0};
}
inline int64_t BlockParams::_internal_max_bytes() const {
  return max_bytes_;
}
inline int64_t BlockParams::max_bytes() const {
  // @@protoc_insertion_point(field_get:tendermint.types.BlockParams.max_bytes)
  return _internal_max_bytes();
}
inline void BlockParams::_internal_set_max_bytes(int64_t value) {
  
  max_bytes_ = value;
}
inline void BlockParams::set_max_bytes(int64_t value) {
  _internal_set_max_bytes(value);
  // @@protoc_insertion_point(field_set:tendermint.types.BlockParams.max_bytes)
}

// int64 max_gas = 2;
inline void BlockParams::clear_max_gas() {
  max_gas_ = int64_t{0};
}
inline int64_t BlockParams::_internal_max_gas() const {
  return max_gas_;
}
inline int64_t BlockParams::max_gas() const {
  // @@protoc_insertion_point(field_get:tendermint.types.BlockParams.max_gas)
  return _internal_max_gas();
}
inline void BlockParams::_internal_set_max_gas(int64_t value) {
  
  max_gas_ = value;
}
inline void BlockParams::set_max_gas(int64_t value) {
  _internal_set_max_gas(value);
  // @@protoc_insertion_point(field_set:tendermint.types.BlockParams.max_gas)
}

// int64 time_iota_ms = 3;
inline void BlockParams::clear_time_iota_ms() {
  time_iota_ms_ = int64_t{0};
}
inline int64_t BlockParams::_internal_time_iota_ms() const {
  return time_iota_ms_;
}
inline int64_t BlockParams::time_iota_ms() const {
  // @@protoc_insertion_point(field_get:tendermint.types.BlockParams.time_iota_ms)
  return _internal_time_iota_ms();
}
inline void BlockParams::_internal_set_time_iota_ms(int64_t value) {
  
  time_iota_ms_ = value;
}
inline void BlockParams::set_time_iota_ms(int64_t value) {
  _internal_set_time_iota_ms(value);
  // @@protoc_insertion_point(field_set:tendermint.types.BlockParams.time_iota_ms)
}

// -------------------------------------------------------------------

// EvidenceParams

// int64 max_age_num_blocks = 1;
inline void EvidenceParams::clear_max_age_num_blocks() {
  max_age_num_blocks_ = int64_t{0};
}
inline int64_t EvidenceParams::_internal_max_age_num_blocks() const {
  return max_age_num_blocks_;
}
inline int64_t EvidenceParams::max_age_num_blocks() const {
  // @@protoc_insertion_point(field_get:tendermint.types.EvidenceParams.max_age_num_blocks)
  return _internal_max_age_num_blocks();
}
inline void EvidenceParams::_internal_set_max_age_num_blocks(int64_t value) {
  
  max_age_num_blocks_ = value;
}
inline void EvidenceParams::set_max_age_num_blocks(int64_t value) {
  _internal_set_max_age_num_blocks(value);
  // @@protoc_insertion_point(field_set:tendermint.types.EvidenceParams.max_age_num_blocks)
}

// .google.protobuf.Duration max_age_duration = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
inline bool EvidenceParams::_internal_has_max_age_duration() const {
  return this != internal_default_instance() && max_age_duration_ != nullptr;
}
inline bool EvidenceParams::has_max_age_duration() const {
  return _internal_has_max_age_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& EvidenceParams::_internal_max_age_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = max_age_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& EvidenceParams::max_age_duration() const {
  // @@protoc_insertion_point(field_get:tendermint.types.EvidenceParams.max_age_duration)
  return _internal_max_age_duration();
}
inline void EvidenceParams::unsafe_arena_set_allocated_max_age_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* max_age_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_age_duration_);
  }
  max_age_duration_ = max_age_duration;
  if (max_age_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.EvidenceParams.max_age_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* EvidenceParams::release_max_age_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = max_age_duration_;
  max_age_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* EvidenceParams::unsafe_arena_release_max_age_duration() {
  // @@protoc_insertion_point(field_release:tendermint.types.EvidenceParams.max_age_duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = max_age_duration_;
  max_age_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* EvidenceParams::_internal_mutable_max_age_duration() {
  
  if (max_age_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    max_age_duration_ = p;
  }
  return max_age_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* EvidenceParams::mutable_max_age_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_max_age_duration();
  // @@protoc_insertion_point(field_mutable:tendermint.types.EvidenceParams.max_age_duration)
  return _msg;
}
inline void EvidenceParams::set_allocated_max_age_duration(::PROTOBUF_NAMESPACE_ID::Duration* max_age_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_age_duration_);
  }
  if (max_age_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_age_duration));
    if (message_arena != submessage_arena) {
      max_age_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_age_duration, submessage_arena);
    }
    
  } else {
    
  }
  max_age_duration_ = max_age_duration;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.EvidenceParams.max_age_duration)
}

// int64 max_bytes = 3;
inline void EvidenceParams::clear_max_bytes() {
  max_bytes_ = int64_t{0};
}
inline int64_t EvidenceParams::_internal_max_bytes() const {
  return max_bytes_;
}
inline int64_t EvidenceParams::max_bytes() const {
  // @@protoc_insertion_point(field_get:tendermint.types.EvidenceParams.max_bytes)
  return _internal_max_bytes();
}
inline void EvidenceParams::_internal_set_max_bytes(int64_t value) {
  
  max_bytes_ = value;
}
inline void EvidenceParams::set_max_bytes(int64_t value) {
  _internal_set_max_bytes(value);
  // @@protoc_insertion_point(field_set:tendermint.types.EvidenceParams.max_bytes)
}

// -------------------------------------------------------------------

// ValidatorParams

// repeated string pub_key_types = 1;
inline int ValidatorParams::_internal_pub_key_types_size() const {
  return pub_key_types_.size();
}
inline int ValidatorParams::pub_key_types_size() const {
  return _internal_pub_key_types_size();
}
inline void ValidatorParams::clear_pub_key_types() {
  pub_key_types_.Clear();
}
inline std::string* ValidatorParams::add_pub_key_types() {
  std::string* _s = _internal_add_pub_key_types();
  // @@protoc_insertion_point(field_add_mutable:tendermint.types.ValidatorParams.pub_key_types)
  return _s;
}
inline const std::string& ValidatorParams::_internal_pub_key_types(int index) const {
  return pub_key_types_.Get(index);
}
inline const std::string& ValidatorParams::pub_key_types(int index) const {
  // @@protoc_insertion_point(field_get:tendermint.types.ValidatorParams.pub_key_types)
  return _internal_pub_key_types(index);
}
inline std::string* ValidatorParams::mutable_pub_key_types(int index) {
  // @@protoc_insertion_point(field_mutable:tendermint.types.ValidatorParams.pub_key_types)
  return pub_key_types_.Mutable(index);
}
inline void ValidatorParams::set_pub_key_types(int index, const std::string& value) {
  pub_key_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tendermint.types.ValidatorParams.pub_key_types)
}
inline void ValidatorParams::set_pub_key_types(int index, std::string&& value) {
  pub_key_types_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tendermint.types.ValidatorParams.pub_key_types)
}
inline void ValidatorParams::set_pub_key_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pub_key_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tendermint.types.ValidatorParams.pub_key_types)
}
inline void ValidatorParams::set_pub_key_types(int index, const char* value, size_t size) {
  pub_key_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tendermint.types.ValidatorParams.pub_key_types)
}
inline std::string* ValidatorParams::_internal_add_pub_key_types() {
  return pub_key_types_.Add();
}
inline void ValidatorParams::add_pub_key_types(const std::string& value) {
  pub_key_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tendermint.types.ValidatorParams.pub_key_types)
}
inline void ValidatorParams::add_pub_key_types(std::string&& value) {
  pub_key_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tendermint.types.ValidatorParams.pub_key_types)
}
inline void ValidatorParams::add_pub_key_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pub_key_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tendermint.types.ValidatorParams.pub_key_types)
}
inline void ValidatorParams::add_pub_key_types(const char* value, size_t size) {
  pub_key_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tendermint.types.ValidatorParams.pub_key_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ValidatorParams::pub_key_types() const {
  // @@protoc_insertion_point(field_list:tendermint.types.ValidatorParams.pub_key_types)
  return pub_key_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ValidatorParams::mutable_pub_key_types() {
  // @@protoc_insertion_point(field_mutable_list:tendermint.types.ValidatorParams.pub_key_types)
  return &pub_key_types_;
}

// -------------------------------------------------------------------

// VersionParams

// uint64 app_version = 1;
inline void VersionParams::clear_app_version() {
  app_version_ = uint64_t{0u};
}
inline uint64_t VersionParams::_internal_app_version() const {
  return app_version_;
}
inline uint64_t VersionParams::app_version() const {
  // @@protoc_insertion_point(field_get:tendermint.types.VersionParams.app_version)
  return _internal_app_version();
}
inline void VersionParams::_internal_set_app_version(uint64_t value) {
  
  app_version_ = value;
}
inline void VersionParams::set_app_version(uint64_t value) {
  _internal_set_app_version(value);
  // @@protoc_insertion_point(field_set:tendermint.types.VersionParams.app_version)
}

// -------------------------------------------------------------------

// HashedParams

// int64 block_max_bytes = 1;
inline void HashedParams::clear_block_max_bytes() {
  block_max_bytes_ = int64_t{0};
}
inline int64_t HashedParams::_internal_block_max_bytes() const {
  return block_max_bytes_;
}
inline int64_t HashedParams::block_max_bytes() const {
  // @@protoc_insertion_point(field_get:tendermint.types.HashedParams.block_max_bytes)
  return _internal_block_max_bytes();
}
inline void HashedParams::_internal_set_block_max_bytes(int64_t value) {
  
  block_max_bytes_ = value;
}
inline void HashedParams::set_block_max_bytes(int64_t value) {
  _internal_set_block_max_bytes(value);
  // @@protoc_insertion_point(field_set:tendermint.types.HashedParams.block_max_bytes)
}

// int64 block_max_gas = 2;
inline void HashedParams::clear_block_max_gas() {
  block_max_gas_ = int64_t{0};
}
inline int64_t HashedParams::_internal_block_max_gas() const {
  return block_max_gas_;
}
inline int64_t HashedParams::block_max_gas() const {
  // @@protoc_insertion_point(field_get:tendermint.types.HashedParams.block_max_gas)
  return _internal_block_max_gas();
}
inline void HashedParams::_internal_set_block_max_gas(int64_t value) {
  
  block_max_gas_ = value;
}
inline void HashedParams::set_block_max_gas(int64_t value) {
  _internal_set_block_max_gas(value);
  // @@protoc_insertion_point(field_set:tendermint.types.HashedParams.block_max_gas)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace tendermint

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2fparams_2eproto
