// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/types/params.proto

#include "tendermint/types/params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tendermint {
namespace types {
constexpr ConsensusParams::ConsensusParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_(nullptr)
  , evidence_(nullptr)
  , validator_(nullptr)
  , version_(nullptr){}
struct ConsensusParamsDefaultTypeInternal {
  constexpr ConsensusParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConsensusParamsDefaultTypeInternal() {}
  union {
    ConsensusParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConsensusParamsDefaultTypeInternal _ConsensusParams_default_instance_;
constexpr BlockParams::BlockParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_bytes_(int64_t{0})
  , max_gas_(int64_t{0})
  , time_iota_ms_(int64_t{0}){}
struct BlockParamsDefaultTypeInternal {
  constexpr BlockParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockParamsDefaultTypeInternal() {}
  union {
    BlockParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockParamsDefaultTypeInternal _BlockParams_default_instance_;
constexpr EvidenceParams::EvidenceParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_age_duration_(nullptr)
  , max_age_num_blocks_(int64_t{0})
  , max_bytes_(int64_t{0}){}
struct EvidenceParamsDefaultTypeInternal {
  constexpr EvidenceParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EvidenceParamsDefaultTypeInternal() {}
  union {
    EvidenceParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EvidenceParamsDefaultTypeInternal _EvidenceParams_default_instance_;
constexpr ValidatorParams::ValidatorParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pub_key_types_(){}
struct ValidatorParamsDefaultTypeInternal {
  constexpr ValidatorParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidatorParamsDefaultTypeInternal() {}
  union {
    ValidatorParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidatorParamsDefaultTypeInternal _ValidatorParams_default_instance_;
constexpr VersionParams::VersionParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_version_(uint64_t{0u}){}
struct VersionParamsDefaultTypeInternal {
  constexpr VersionParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VersionParamsDefaultTypeInternal() {}
  union {
    VersionParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VersionParamsDefaultTypeInternal _VersionParams_default_instance_;
constexpr HashedParams::HashedParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_max_bytes_(int64_t{0})
  , block_max_gas_(int64_t{0}){}
struct HashedParamsDefaultTypeInternal {
  constexpr HashedParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HashedParamsDefaultTypeInternal() {}
  union {
    HashedParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HashedParamsDefaultTypeInternal _HashedParams_default_instance_;
}  // namespace types
}  // namespace tendermint
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tendermint_2ftypes_2fparams_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tendermint_2ftypes_2fparams_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tendermint_2ftypes_2fparams_2eproto = nullptr;

const uint32_t TableStruct_tendermint_2ftypes_2fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ConsensusParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ConsensusParams, block_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ConsensusParams, evidence_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ConsensusParams, validator_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ConsensusParams, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockParams, max_bytes_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockParams, max_gas_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockParams, time_iota_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::EvidenceParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::EvidenceParams, max_age_num_blocks_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::EvidenceParams, max_age_duration_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::EvidenceParams, max_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ValidatorParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ValidatorParams, pub_key_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::VersionParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::VersionParams, app_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::HashedParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::HashedParams, block_max_bytes_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::HashedParams, block_max_gas_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tendermint::types::ConsensusParams)},
  { 10, -1, -1, sizeof(::tendermint::types::BlockParams)},
  { 19, -1, -1, sizeof(::tendermint::types::EvidenceParams)},
  { 28, -1, -1, sizeof(::tendermint::types::ValidatorParams)},
  { 35, -1, -1, sizeof(::tendermint::types::VersionParams)},
  { 42, -1, -1, sizeof(::tendermint::types::HashedParams)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_ConsensusParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_BlockParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_EvidenceParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_ValidatorParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_VersionParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::types::_HashedParams_default_instance_),
};

const char descriptor_table_protodef_tendermint_2ftypes_2fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035tendermint/types/params.proto\022\020tenderm"
  "int.types\032\024gogoproto/gogo.proto\032\036google/"
  "protobuf/duration.proto\"\363\001\n\017ConsensusPar"
  "ams\0222\n\005block\030\001 \001(\0132\035.tendermint.types.Bl"
  "ockParamsB\004\310\336\037\000\0228\n\010evidence\030\002 \001(\0132 .tend"
  "ermint.types.EvidenceParamsB\004\310\336\037\000\022:\n\tval"
  "idator\030\003 \001(\0132!.tendermint.types.Validato"
  "rParamsB\004\310\336\037\000\0226\n\007version\030\004 \001(\0132\037.tenderm"
  "int.types.VersionParamsB\004\310\336\037\000\"G\n\013BlockPa"
  "rams\022\021\n\tmax_bytes\030\001 \001(\003\022\017\n\007max_gas\030\002 \001(\003"
  "\022\024\n\014time_iota_ms\030\003 \001(\003\"~\n\016EvidenceParams"
  "\022\032\n\022max_age_num_blocks\030\001 \001(\003\022=\n\020max_age_"
  "duration\030\002 \001(\0132\031.google.protobuf.Duratio"
  "nB\010\310\336\037\000\230\337\037\001\022\021\n\tmax_bytes\030\003 \001(\003\"2\n\017Valida"
  "torParams\022\025\n\rpub_key_types\030\001 \003(\t:\010\270\240\037\001\350\240"
  "\037\001\".\n\rVersionParams\022\023\n\013app_version\030\001 \001(\004"
  ":\010\270\240\037\001\350\240\037\001\">\n\014HashedParams\022\027\n\017block_max_"
  "bytes\030\001 \001(\003\022\025\n\rblock_max_gas\030\002 \001(\003B=Z7gi"
  "thub.com/tendermint/tendermint/proto/ten"
  "dermint/types\250\342\036\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tendermint_2ftypes_2fparams_2eproto_deps[2] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tendermint_2ftypes_2fparams_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2ftypes_2fparams_2eproto = {
  false, false, 785, descriptor_table_protodef_tendermint_2ftypes_2fparams_2eproto, "tendermint/types/params.proto", 
  &descriptor_table_tendermint_2ftypes_2fparams_2eproto_once, descriptor_table_tendermint_2ftypes_2fparams_2eproto_deps, 2, 6,
  schemas, file_default_instances, TableStruct_tendermint_2ftypes_2fparams_2eproto::offsets,
  file_level_metadata_tendermint_2ftypes_2fparams_2eproto, file_level_enum_descriptors_tendermint_2ftypes_2fparams_2eproto, file_level_service_descriptors_tendermint_2ftypes_2fparams_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tendermint_2ftypes_2fparams_2eproto_getter() {
  return &descriptor_table_tendermint_2ftypes_2fparams_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tendermint_2ftypes_2fparams_2eproto(&descriptor_table_tendermint_2ftypes_2fparams_2eproto);
namespace tendermint {
namespace types {

// ===================================================================

class ConsensusParams::_Internal {
 public:
  static const ::tendermint::types::BlockParams& block(const ConsensusParams* msg);
  static const ::tendermint::types::EvidenceParams& evidence(const ConsensusParams* msg);
  static const ::tendermint::types::ValidatorParams& validator(const ConsensusParams* msg);
  static const ::tendermint::types::VersionParams& version(const ConsensusParams* msg);
};

const ::tendermint::types::BlockParams&
ConsensusParams::_Internal::block(const ConsensusParams* msg) {
  return *msg->block_;
}
const ::tendermint::types::EvidenceParams&
ConsensusParams::_Internal::evidence(const ConsensusParams* msg) {
  return *msg->evidence_;
}
const ::tendermint::types::ValidatorParams&
ConsensusParams::_Internal::validator(const ConsensusParams* msg) {
  return *msg->validator_;
}
const ::tendermint::types::VersionParams&
ConsensusParams::_Internal::version(const ConsensusParams* msg) {
  return *msg->version_;
}
ConsensusParams::ConsensusParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.ConsensusParams)
}
ConsensusParams::ConsensusParams(const ConsensusParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::tendermint::types::BlockParams(*from.block_);
  } else {
    block_ = nullptr;
  }
  if (from._internal_has_evidence()) {
    evidence_ = new ::tendermint::types::EvidenceParams(*from.evidence_);
  } else {
    evidence_ = nullptr;
  }
  if (from._internal_has_validator()) {
    validator_ = new ::tendermint::types::ValidatorParams(*from.validator_);
  } else {
    validator_ = nullptr;
  }
  if (from._internal_has_version()) {
    version_ = new ::tendermint::types::VersionParams(*from.version_);
  } else {
    version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.types.ConsensusParams)
}

inline void ConsensusParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&block_)) + sizeof(version_));
}

ConsensusParams::~ConsensusParams() {
  // @@protoc_insertion_point(destructor:tendermint.types.ConsensusParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConsensusParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_;
  if (this != internal_default_instance()) delete evidence_;
  if (this != internal_default_instance()) delete validator_;
  if (this != internal_default_instance()) delete version_;
}

void ConsensusParams::ArenaDtor(void* object) {
  ConsensusParams* _this = reinterpret_cast< ConsensusParams* >(object);
  (void)_this;
}
void ConsensusParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConsensusParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConsensusParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.ConsensusParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  if (GetArenaForAllocation() == nullptr && evidence_ != nullptr) {
    delete evidence_;
  }
  evidence_ = nullptr;
  if (GetArenaForAllocation() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
  if (GetArenaForAllocation() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsensusParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.BlockParams block = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.EvidenceParams evidence = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_evidence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.ValidatorParams validator = 3 [(.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.VersionParams version = 4 [(.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConsensusParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.ConsensusParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.BlockParams block = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  // .tendermint.types.EvidenceParams evidence = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_evidence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::evidence(this), target, stream);
  }

  // .tendermint.types.ValidatorParams validator = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_validator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::validator(this), target, stream);
  }

  // .tendermint.types.VersionParams version = 4 [(.gogoproto.nullable) = false];
  if (this->_internal_has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.ConsensusParams)
  return target;
}

size_t ConsensusParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.ConsensusParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.BlockParams block = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  // .tendermint.types.EvidenceParams evidence = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_evidence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *evidence_);
  }

  // .tendermint.types.ValidatorParams validator = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_validator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validator_);
  }

  // .tendermint.types.VersionParams version = 4 [(.gogoproto.nullable) = false];
  if (this->_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConsensusParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConsensusParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConsensusParams::GetClassData() const { return &_class_data_; }

void ConsensusParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConsensusParams *>(to)->MergeFrom(
      static_cast<const ConsensusParams &>(from));
}


void ConsensusParams::MergeFrom(const ConsensusParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.ConsensusParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _internal_mutable_block()->::tendermint::types::BlockParams::MergeFrom(from._internal_block());
  }
  if (from._internal_has_evidence()) {
    _internal_mutable_evidence()->::tendermint::types::EvidenceParams::MergeFrom(from._internal_evidence());
  }
  if (from._internal_has_validator()) {
    _internal_mutable_validator()->::tendermint::types::ValidatorParams::MergeFrom(from._internal_validator());
  }
  if (from._internal_has_version()) {
    _internal_mutable_version()->::tendermint::types::VersionParams::MergeFrom(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConsensusParams::CopyFrom(const ConsensusParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.ConsensusParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusParams::IsInitialized() const {
  return true;
}

void ConsensusParams::InternalSwap(ConsensusParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsensusParams, version_)
      + sizeof(ConsensusParams::version_)
      - PROTOBUF_FIELD_OFFSET(ConsensusParams, block_)>(
          reinterpret_cast<char*>(&block_),
          reinterpret_cast<char*>(&other->block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fparams_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fparams_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fparams_2eproto[0]);
}

// ===================================================================

class BlockParams::_Internal {
 public:
};

BlockParams::BlockParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.BlockParams)
}
BlockParams::BlockParams(const BlockParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_bytes_, &from.max_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_iota_ms_) -
    reinterpret_cast<char*>(&max_bytes_)) + sizeof(time_iota_ms_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.BlockParams)
}

inline void BlockParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_bytes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_iota_ms_) -
    reinterpret_cast<char*>(&max_bytes_)) + sizeof(time_iota_ms_));
}

BlockParams::~BlockParams() {
  // @@protoc_insertion_point(destructor:tendermint.types.BlockParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockParams::ArenaDtor(void* object) {
  BlockParams* _this = reinterpret_cast< BlockParams* >(object);
  (void)_this;
}
void BlockParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.BlockParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_iota_ms_) -
      reinterpret_cast<char*>(&max_bytes_)) + sizeof(time_iota_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 max_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          max_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 max_gas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          max_gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 time_iota_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          time_iota_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.BlockParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_bytes = 1;
  if (this->_internal_max_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_bytes(), target);
  }

  // int64 max_gas = 2;
  if (this->_internal_max_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_max_gas(), target);
  }

  // int64 time_iota_ms = 3;
  if (this->_internal_time_iota_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time_iota_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.BlockParams)
  return target;
}

size_t BlockParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.BlockParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 max_bytes = 1;
  if (this->_internal_max_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_bytes());
  }

  // int64 max_gas = 2;
  if (this->_internal_max_gas() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_gas());
  }

  // int64 time_iota_ms = 3;
  if (this->_internal_time_iota_ms() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_time_iota_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockParams::GetClassData() const { return &_class_data_; }

void BlockParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockParams *>(to)->MergeFrom(
      static_cast<const BlockParams &>(from));
}


void BlockParams::MergeFrom(const BlockParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.BlockParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_bytes() != 0) {
    _internal_set_max_bytes(from._internal_max_bytes());
  }
  if (from._internal_max_gas() != 0) {
    _internal_set_max_gas(from._internal_max_gas());
  }
  if (from._internal_time_iota_ms() != 0) {
    _internal_set_time_iota_ms(from._internal_time_iota_ms());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockParams::CopyFrom(const BlockParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.BlockParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockParams::IsInitialized() const {
  return true;
}

void BlockParams::InternalSwap(BlockParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockParams, time_iota_ms_)
      + sizeof(BlockParams::time_iota_ms_)
      - PROTOBUF_FIELD_OFFSET(BlockParams, max_bytes_)>(
          reinterpret_cast<char*>(&max_bytes_),
          reinterpret_cast<char*>(&other->max_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fparams_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fparams_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fparams_2eproto[1]);
}

// ===================================================================

class EvidenceParams::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& max_age_duration(const EvidenceParams* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
EvidenceParams::_Internal::max_age_duration(const EvidenceParams* msg) {
  return *msg->max_age_duration_;
}
void EvidenceParams::clear_max_age_duration() {
  if (GetArenaForAllocation() == nullptr && max_age_duration_ != nullptr) {
    delete max_age_duration_;
  }
  max_age_duration_ = nullptr;
}
EvidenceParams::EvidenceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.EvidenceParams)
}
EvidenceParams::EvidenceParams(const EvidenceParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_max_age_duration()) {
    max_age_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.max_age_duration_);
  } else {
    max_age_duration_ = nullptr;
  }
  ::memcpy(&max_age_num_blocks_, &from.max_age_num_blocks_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_bytes_) -
    reinterpret_cast<char*>(&max_age_num_blocks_)) + sizeof(max_bytes_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.EvidenceParams)
}

inline void EvidenceParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_age_duration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_bytes_) -
    reinterpret_cast<char*>(&max_age_duration_)) + sizeof(max_bytes_));
}

EvidenceParams::~EvidenceParams() {
  // @@protoc_insertion_point(destructor:tendermint.types.EvidenceParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EvidenceParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete max_age_duration_;
}

void EvidenceParams::ArenaDtor(void* object) {
  EvidenceParams* _this = reinterpret_cast< EvidenceParams* >(object);
  (void)_this;
}
void EvidenceParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EvidenceParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EvidenceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.EvidenceParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && max_age_duration_ != nullptr) {
    delete max_age_duration_;
  }
  max_age_duration_ = nullptr;
  ::memset(&max_age_num_blocks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_bytes_) -
      reinterpret_cast<char*>(&max_age_num_blocks_)) + sizeof(max_bytes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvidenceParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 max_age_num_blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          max_age_num_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration max_age_duration = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_age_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 max_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          max_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EvidenceParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.EvidenceParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_age_num_blocks = 1;
  if (this->_internal_max_age_num_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_age_num_blocks(), target);
  }

  // .google.protobuf.Duration max_age_duration = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (this->_internal_has_max_age_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::max_age_duration(this), target, stream);
  }

  // int64 max_bytes = 3;
  if (this->_internal_max_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_max_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.EvidenceParams)
  return target;
}

size_t EvidenceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.EvidenceParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration max_age_duration = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (this->_internal_has_max_age_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_age_duration_);
  }

  // int64 max_age_num_blocks = 1;
  if (this->_internal_max_age_num_blocks() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_age_num_blocks());
  }

  // int64 max_bytes = 3;
  if (this->_internal_max_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EvidenceParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EvidenceParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EvidenceParams::GetClassData() const { return &_class_data_; }

void EvidenceParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EvidenceParams *>(to)->MergeFrom(
      static_cast<const EvidenceParams &>(from));
}


void EvidenceParams::MergeFrom(const EvidenceParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.EvidenceParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_max_age_duration()) {
    _internal_mutable_max_age_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_max_age_duration());
  }
  if (from._internal_max_age_num_blocks() != 0) {
    _internal_set_max_age_num_blocks(from._internal_max_age_num_blocks());
  }
  if (from._internal_max_bytes() != 0) {
    _internal_set_max_bytes(from._internal_max_bytes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EvidenceParams::CopyFrom(const EvidenceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.EvidenceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvidenceParams::IsInitialized() const {
  return true;
}

void EvidenceParams::InternalSwap(EvidenceParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EvidenceParams, max_bytes_)
      + sizeof(EvidenceParams::max_bytes_)
      - PROTOBUF_FIELD_OFFSET(EvidenceParams, max_age_duration_)>(
          reinterpret_cast<char*>(&max_age_duration_),
          reinterpret_cast<char*>(&other->max_age_duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EvidenceParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fparams_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fparams_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fparams_2eproto[2]);
}

// ===================================================================

class ValidatorParams::_Internal {
 public:
};

ValidatorParams::ValidatorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pub_key_types_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.ValidatorParams)
}
ValidatorParams::ValidatorParams(const ValidatorParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pub_key_types_(from.pub_key_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.types.ValidatorParams)
}

inline void ValidatorParams::SharedCtor() {
}

ValidatorParams::~ValidatorParams() {
  // @@protoc_insertion_point(destructor:tendermint.types.ValidatorParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValidatorParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ValidatorParams::ArenaDtor(void* object) {
  ValidatorParams* _this = reinterpret_cast< ValidatorParams* >(object);
  (void)_this;
}
void ValidatorParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatorParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidatorParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.ValidatorParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_types_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string pub_key_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pub_key_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.types.ValidatorParams.pub_key_types"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValidatorParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.ValidatorParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string pub_key_types = 1;
  for (int i = 0, n = this->_internal_pub_key_types_size(); i < n; i++) {
    const auto& s = this->_internal_pub_key_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.types.ValidatorParams.pub_key_types");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.ValidatorParams)
  return target;
}

size_t ValidatorParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.ValidatorParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pub_key_types = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pub_key_types_.size());
  for (int i = 0, n = pub_key_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      pub_key_types_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValidatorParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorParams::GetClassData() const { return &_class_data_; }

void ValidatorParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ValidatorParams *>(to)->MergeFrom(
      static_cast<const ValidatorParams &>(from));
}


void ValidatorParams::MergeFrom(const ValidatorParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.ValidatorParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pub_key_types_.MergeFrom(from.pub_key_types_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorParams::CopyFrom(const ValidatorParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.ValidatorParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorParams::IsInitialized() const {
  return true;
}

void ValidatorParams::InternalSwap(ValidatorParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pub_key_types_.InternalSwap(&other->pub_key_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fparams_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fparams_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fparams_2eproto[3]);
}

// ===================================================================

class VersionParams::_Internal {
 public:
};

VersionParams::VersionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.VersionParams)
}
VersionParams::VersionParams(const VersionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_version_ = from.app_version_;
  // @@protoc_insertion_point(copy_constructor:tendermint.types.VersionParams)
}

inline void VersionParams::SharedCtor() {
app_version_ = uint64_t{0u};
}

VersionParams::~VersionParams() {
  // @@protoc_insertion_point(destructor:tendermint.types.VersionParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VersionParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VersionParams::ArenaDtor(void* object) {
  VersionParams* _this = reinterpret_cast< VersionParams* >(object);
  (void)_this;
}
void VersionParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VersionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.VersionParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_version_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 app_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          app_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VersionParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.VersionParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 app_version = 1;
  if (this->_internal_app_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_app_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.VersionParams)
  return target;
}

size_t VersionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.VersionParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 app_version = 1;
  if (this->_internal_app_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_app_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersionParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VersionParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersionParams::GetClassData() const { return &_class_data_; }

void VersionParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VersionParams *>(to)->MergeFrom(
      static_cast<const VersionParams &>(from));
}


void VersionParams::MergeFrom(const VersionParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.VersionParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_app_version() != 0) {
    _internal_set_app_version(from._internal_app_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersionParams::CopyFrom(const VersionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.VersionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionParams::IsInitialized() const {
  return true;
}

void VersionParams::InternalSwap(VersionParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(app_version_, other->app_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fparams_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fparams_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fparams_2eproto[4]);
}

// ===================================================================

class HashedParams::_Internal {
 public:
};

HashedParams::HashedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.types.HashedParams)
}
HashedParams::HashedParams(const HashedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&block_max_bytes_, &from.block_max_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_max_gas_) -
    reinterpret_cast<char*>(&block_max_bytes_)) + sizeof(block_max_gas_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.HashedParams)
}

inline void HashedParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_max_bytes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&block_max_gas_) -
    reinterpret_cast<char*>(&block_max_bytes_)) + sizeof(block_max_gas_));
}

HashedParams::~HashedParams() {
  // @@protoc_insertion_point(destructor:tendermint.types.HashedParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HashedParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HashedParams::ArenaDtor(void* object) {
  HashedParams* _this = reinterpret_cast< HashedParams* >(object);
  (void)_this;
}
void HashedParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HashedParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HashedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.HashedParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&block_max_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_max_gas_) -
      reinterpret_cast<char*>(&block_max_bytes_)) + sizeof(block_max_gas_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HashedParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 block_max_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          block_max_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 block_max_gas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          block_max_gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HashedParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.HashedParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 block_max_bytes = 1;
  if (this->_internal_block_max_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_block_max_bytes(), target);
  }

  // int64 block_max_gas = 2;
  if (this->_internal_block_max_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_block_max_gas(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.HashedParams)
  return target;
}

size_t HashedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.HashedParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 block_max_bytes = 1;
  if (this->_internal_block_max_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_block_max_bytes());
  }

  // int64 block_max_gas = 2;
  if (this->_internal_block_max_gas() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_block_max_gas());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HashedParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HashedParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HashedParams::GetClassData() const { return &_class_data_; }

void HashedParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HashedParams *>(to)->MergeFrom(
      static_cast<const HashedParams &>(from));
}


void HashedParams::MergeFrom(const HashedParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.HashedParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_block_max_bytes() != 0) {
    _internal_set_block_max_bytes(from._internal_block_max_bytes());
  }
  if (from._internal_block_max_gas() != 0) {
    _internal_set_block_max_gas(from._internal_block_max_gas());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HashedParams::CopyFrom(const HashedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.HashedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashedParams::IsInitialized() const {
  return true;
}

void HashedParams::InternalSwap(HashedParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HashedParams, block_max_gas_)
      + sizeof(HashedParams::block_max_gas_)
      - PROTOBUF_FIELD_OFFSET(HashedParams, block_max_bytes_)>(
          reinterpret_cast<char*>(&block_max_bytes_),
          reinterpret_cast<char*>(&other->block_max_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HashedParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fparams_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fparams_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fparams_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::types::ConsensusParams* Arena::CreateMaybeMessage< ::tendermint::types::ConsensusParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::ConsensusParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::BlockParams* Arena::CreateMaybeMessage< ::tendermint::types::BlockParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::BlockParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::EvidenceParams* Arena::CreateMaybeMessage< ::tendermint::types::EvidenceParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::EvidenceParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::ValidatorParams* Arena::CreateMaybeMessage< ::tendermint::types::ValidatorParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::ValidatorParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::VersionParams* Arena::CreateMaybeMessage< ::tendermint::types::VersionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::VersionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::HashedParams* Arena::CreateMaybeMessage< ::tendermint::types::HashedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::HashedParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
