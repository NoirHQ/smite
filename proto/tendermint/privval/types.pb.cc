// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/privval/types.proto

#include "tendermint/privval/types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tendermint {
namespace privval {
constexpr RemoteSignerError::RemoteSignerError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(0){}
struct RemoteSignerErrorDefaultTypeInternal {
  constexpr RemoteSignerErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoteSignerErrorDefaultTypeInternal() {}
  union {
    RemoteSignerError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoteSignerErrorDefaultTypeInternal _RemoteSignerError_default_instance_;
constexpr PubKeyRequest::PubKeyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PubKeyRequestDefaultTypeInternal {
  constexpr PubKeyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PubKeyRequestDefaultTypeInternal() {}
  union {
    PubKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PubKeyRequestDefaultTypeInternal _PubKeyRequest_default_instance_;
constexpr PubKeyResponse::PubKeyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pub_key_(nullptr)
  , error_(nullptr){}
struct PubKeyResponseDefaultTypeInternal {
  constexpr PubKeyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PubKeyResponseDefaultTypeInternal() {}
  union {
    PubKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PubKeyResponseDefaultTypeInternal _PubKeyResponse_default_instance_;
constexpr SignVoteRequest::SignVoteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vote_(nullptr){}
struct SignVoteRequestDefaultTypeInternal {
  constexpr SignVoteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignVoteRequestDefaultTypeInternal() {}
  union {
    SignVoteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignVoteRequestDefaultTypeInternal _SignVoteRequest_default_instance_;
constexpr SignedVoteResponse::SignedVoteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vote_(nullptr)
  , error_(nullptr){}
struct SignedVoteResponseDefaultTypeInternal {
  constexpr SignedVoteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignedVoteResponseDefaultTypeInternal() {}
  union {
    SignedVoteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignedVoteResponseDefaultTypeInternal _SignedVoteResponse_default_instance_;
constexpr SignProposalRequest::SignProposalRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proposal_(nullptr){}
struct SignProposalRequestDefaultTypeInternal {
  constexpr SignProposalRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignProposalRequestDefaultTypeInternal() {}
  union {
    SignProposalRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignProposalRequestDefaultTypeInternal _SignProposalRequest_default_instance_;
constexpr SignedProposalResponse::SignedProposalResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : proposal_(nullptr)
  , error_(nullptr){}
struct SignedProposalResponseDefaultTypeInternal {
  constexpr SignedProposalResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignedProposalResponseDefaultTypeInternal() {}
  union {
    SignedProposalResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignedProposalResponseDefaultTypeInternal _SignedProposalResponse_default_instance_;
constexpr PingRequest::PingRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PingRequestDefaultTypeInternal {
  constexpr PingRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PingRequestDefaultTypeInternal() {}
  union {
    PingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PingRequestDefaultTypeInternal _PingRequest_default_instance_;
constexpr PingResponse::PingResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PingResponseDefaultTypeInternal {
  constexpr PingResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PingResponseDefaultTypeInternal() {}
  union {
    PingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PingResponseDefaultTypeInternal _PingResponse_default_instance_;
constexpr Message::Message(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct MessageDefaultTypeInternal {
  constexpr MessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace privval
}  // namespace tendermint
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tendermint_2fprivval_2ftypes_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tendermint_2fprivval_2ftypes_2eproto = nullptr;

const uint32_t TableStruct_tendermint_2fprivval_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::RemoteSignerError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::RemoteSignerError, code_),
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::RemoteSignerError, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::PubKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::PubKeyRequest, chain_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::PubKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::PubKeyResponse, pub_key_),
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::PubKeyResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignVoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignVoteRequest, vote_),
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignVoteRequest, chain_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignedVoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignedVoteResponse, vote_),
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignedVoteResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignProposalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignProposalRequest, proposal_),
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignProposalRequest, chain_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignedProposalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignedProposalResponse, proposal_),
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignedProposalResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::PingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::PingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::Message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tendermint::privval::Message, sum_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tendermint::privval::RemoteSignerError)},
  { 8, -1, -1, sizeof(::tendermint::privval::PubKeyRequest)},
  { 15, -1, -1, sizeof(::tendermint::privval::PubKeyResponse)},
  { 23, -1, -1, sizeof(::tendermint::privval::SignVoteRequest)},
  { 31, -1, -1, sizeof(::tendermint::privval::SignedVoteResponse)},
  { 39, -1, -1, sizeof(::tendermint::privval::SignProposalRequest)},
  { 47, -1, -1, sizeof(::tendermint::privval::SignedProposalResponse)},
  { 55, -1, -1, sizeof(::tendermint::privval::PingRequest)},
  { 61, -1, -1, sizeof(::tendermint::privval::PingResponse)},
  { 67, -1, -1, sizeof(::tendermint::privval::Message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::privval::_RemoteSignerError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::privval::_PubKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::privval::_PubKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::privval::_SignVoteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::privval::_SignedVoteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::privval::_SignProposalRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::privval::_SignedProposalResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::privval::_PingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::privval::_PingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::privval::_Message_default_instance_),
};

const char descriptor_table_protodef_tendermint_2fprivval_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036tendermint/privval/types.proto\022\022tender"
  "mint.privval\032\034tendermint/crypto/keys.pro"
  "to\032\034tendermint/types/types.proto\032\024gogopr"
  "oto/gogo.proto\"6\n\021RemoteSignerError\022\014\n\004c"
  "ode\030\001 \001(\005\022\023\n\013description\030\002 \001(\t\"!\n\rPubKey"
  "Request\022\020\n\010chain_id\030\001 \001(\t\"{\n\016PubKeyRespo"
  "nse\0223\n\007pub_key\030\001 \001(\0132\034.tendermint.crypto"
  ".PublicKeyB\004\310\336\037\000\0224\n\005error\030\002 \001(\0132%.tender"
  "mint.privval.RemoteSignerError\"I\n\017SignVo"
  "teRequest\022$\n\004vote\030\001 \001(\0132\026.tendermint.typ"
  "es.Vote\022\020\n\010chain_id\030\002 \001(\t\"v\n\022SignedVoteR"
  "esponse\022*\n\004vote\030\001 \001(\0132\026.tendermint.types"
  ".VoteB\004\310\336\037\000\0224\n\005error\030\002 \001(\0132%.tendermint."
  "privval.RemoteSignerError\"U\n\023SignProposa"
  "lRequest\022,\n\010proposal\030\001 \001(\0132\032.tendermint."
  "types.Proposal\022\020\n\010chain_id\030\002 \001(\t\"\202\001\n\026Sig"
  "nedProposalResponse\0222\n\010proposal\030\001 \001(\0132\032."
  "tendermint.types.ProposalB\004\310\336\037\000\0224\n\005error"
  "\030\002 \001(\0132%.tendermint.privval.RemoteSigner"
  "Error\"\r\n\013PingRequest\"\016\n\014PingResponse\"\246\004\n"
  "\007Message\022<\n\017pub_key_request\030\001 \001(\0132!.tend"
  "ermint.privval.PubKeyRequestH\000\022>\n\020pub_ke"
  "y_response\030\002 \001(\0132\".tendermint.privval.Pu"
  "bKeyResponseH\000\022@\n\021sign_vote_request\030\003 \001("
  "\0132#.tendermint.privval.SignVoteRequestH\000"
  "\022F\n\024signed_vote_response\030\004 \001(\0132&.tenderm"
  "int.privval.SignedVoteResponseH\000\022H\n\025sign"
  "_proposal_request\030\005 \001(\0132\'.tendermint.pri"
  "vval.SignProposalRequestH\000\022N\n\030signed_pro"
  "posal_response\030\006 \001(\0132*.tendermint.privva"
  "l.SignedProposalResponseH\000\0227\n\014ping_reque"
  "st\030\007 \001(\0132\037.tendermint.privval.PingReques"
  "tH\000\0229\n\rping_response\030\010 \001(\0132 .tendermint."
  "privval.PingResponseH\000B\005\n\003sum*\250\001\n\006Errors"
  "\022\022\n\016ERRORS_UNKNOWN\020\000\022\036\n\032ERRORS_UNEXPECTE"
  "D_RESPONSE\020\001\022\030\n\024ERRORS_NO_CONNECTION\020\002\022\035"
  "\n\031ERRORS_CONNECTION_TIMEOUT\020\003\022\027\n\023ERRORS_"
  "READ_TIMEOUT\020\004\022\030\n\024ERRORS_WRITE_TIMEOUT\020\005"
  "B;Z9github.com/tendermint/tendermint/pro"
  "to/tendermint/privvalb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tendermint_2fprivval_2ftypes_2eproto_deps[3] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_tendermint_2fcrypto_2fkeys_2eproto,
  &::descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2fprivval_2ftypes_2eproto = {
  false, false, 1589, descriptor_table_protodef_tendermint_2fprivval_2ftypes_2eproto, "tendermint/privval/types.proto", 
  &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once, descriptor_table_tendermint_2fprivval_2ftypes_2eproto_deps, 3, 10,
  schemas, file_default_instances, TableStruct_tendermint_2fprivval_2ftypes_2eproto::offsets,
  file_level_metadata_tendermint_2fprivval_2ftypes_2eproto, file_level_enum_descriptors_tendermint_2fprivval_2ftypes_2eproto, file_level_service_descriptors_tendermint_2fprivval_2ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter() {
  return &descriptor_table_tendermint_2fprivval_2ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tendermint_2fprivval_2ftypes_2eproto(&descriptor_table_tendermint_2fprivval_2ftypes_2eproto);
namespace tendermint {
namespace privval {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Errors_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tendermint_2fprivval_2ftypes_2eproto);
  return file_level_enum_descriptors_tendermint_2fprivval_2ftypes_2eproto[0];
}
bool Errors_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RemoteSignerError::_Internal {
 public:
};

RemoteSignerError::RemoteSignerError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.privval.RemoteSignerError)
}
RemoteSignerError::RemoteSignerError(const RemoteSignerError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:tendermint.privval.RemoteSignerError)
}

inline void RemoteSignerError::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
code_ = 0;
}

RemoteSignerError::~RemoteSignerError() {
  // @@protoc_insertion_point(destructor:tendermint.privval.RemoteSignerError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RemoteSignerError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoteSignerError::ArenaDtor(void* object) {
  RemoteSignerError* _this = reinterpret_cast< RemoteSignerError* >(object);
  (void)_this;
}
void RemoteSignerError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteSignerError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoteSignerError::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.privval.RemoteSignerError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteSignerError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.privval.RemoteSignerError.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoteSignerError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.privval.RemoteSignerError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.privval.RemoteSignerError.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.privval.RemoteSignerError)
  return target;
}

size_t RemoteSignerError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.privval.RemoteSignerError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoteSignerError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoteSignerError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoteSignerError::GetClassData() const { return &_class_data_; }

void RemoteSignerError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RemoteSignerError *>(to)->MergeFrom(
      static_cast<const RemoteSignerError &>(from));
}


void RemoteSignerError::MergeFrom(const RemoteSignerError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.privval.RemoteSignerError)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteSignerError::CopyFrom(const RemoteSignerError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.privval.RemoteSignerError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteSignerError::IsInitialized() const {
  return true;
}

void RemoteSignerError::InternalSwap(RemoteSignerError* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteSignerError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[0]);
}

// ===================================================================

class PubKeyRequest::_Internal {
 public:
};

PubKeyRequest::PubKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.privval.PubKeyRequest)
}
PubKeyRequest::PubKeyRequest(const PubKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.privval.PubKeyRequest)
}

inline void PubKeyRequest::SharedCtor() {
chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PubKeyRequest::~PubKeyRequest() {
  // @@protoc_insertion_point(destructor:tendermint.privval.PubKeyRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PubKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PubKeyRequest::ArenaDtor(void* object) {
  PubKeyRequest* _this = reinterpret_cast< PubKeyRequest* >(object);
  (void)_this;
}
void PubKeyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PubKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PubKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.privval.PubKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PubKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string chain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.privval.PubKeyRequest.chain_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PubKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.privval.PubKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string chain_id = 1;
  if (!this->_internal_chain_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.privval.PubKeyRequest.chain_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chain_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.privval.PubKeyRequest)
  return target;
}

size_t PubKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.privval.PubKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain_id = 1;
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PubKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PubKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PubKeyRequest::GetClassData() const { return &_class_data_; }

void PubKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PubKeyRequest *>(to)->MergeFrom(
      static_cast<const PubKeyRequest &>(from));
}


void PubKeyRequest::MergeFrom(const PubKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.privval.PubKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PubKeyRequest::CopyFrom(const PubKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.privval.PubKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubKeyRequest::IsInitialized() const {
  return true;
}

void PubKeyRequest::InternalSwap(PubKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chain_id_, lhs_arena,
      &other->chain_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PubKeyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[1]);
}

// ===================================================================

class PubKeyResponse::_Internal {
 public:
  static const ::tendermint::crypto::PublicKey& pub_key(const PubKeyResponse* msg);
  static const ::tendermint::privval::RemoteSignerError& error(const PubKeyResponse* msg);
};

const ::tendermint::crypto::PublicKey&
PubKeyResponse::_Internal::pub_key(const PubKeyResponse* msg) {
  return *msg->pub_key_;
}
const ::tendermint::privval::RemoteSignerError&
PubKeyResponse::_Internal::error(const PubKeyResponse* msg) {
  return *msg->error_;
}
void PubKeyResponse::clear_pub_key() {
  if (GetArenaForAllocation() == nullptr && pub_key_ != nullptr) {
    delete pub_key_;
  }
  pub_key_ = nullptr;
}
PubKeyResponse::PubKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.privval.PubKeyResponse)
}
PubKeyResponse::PubKeyResponse(const PubKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pub_key()) {
    pub_key_ = new ::tendermint::crypto::PublicKey(*from.pub_key_);
  } else {
    pub_key_ = nullptr;
  }
  if (from._internal_has_error()) {
    error_ = new ::tendermint::privval::RemoteSignerError(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.privval.PubKeyResponse)
}

inline void PubKeyResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pub_key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&pub_key_)) + sizeof(error_));
}

PubKeyResponse::~PubKeyResponse() {
  // @@protoc_insertion_point(destructor:tendermint.privval.PubKeyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PubKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pub_key_;
  if (this != internal_default_instance()) delete error_;
}

void PubKeyResponse::ArenaDtor(void* object) {
  PubKeyResponse* _this = reinterpret_cast< PubKeyResponse* >(object);
  (void)_this;
}
void PubKeyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PubKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PubKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.privval.PubKeyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pub_key_ != nullptr) {
    delete pub_key_;
  }
  pub_key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PubKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.crypto.PublicKey pub_key = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.privval.RemoteSignerError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PubKeyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.privval.PubKeyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.crypto.PublicKey pub_key = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_pub_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pub_key(this), target, stream);
  }

  // .tendermint.privval.RemoteSignerError error = 2;
  if (this->_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.privval.PubKeyResponse)
  return target;
}

size_t PubKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.privval.PubKeyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.crypto.PublicKey pub_key = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_pub_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pub_key_);
  }

  // .tendermint.privval.RemoteSignerError error = 2;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PubKeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PubKeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PubKeyResponse::GetClassData() const { return &_class_data_; }

void PubKeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PubKeyResponse *>(to)->MergeFrom(
      static_cast<const PubKeyResponse &>(from));
}


void PubKeyResponse::MergeFrom(const PubKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.privval.PubKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pub_key()) {
    _internal_mutable_pub_key()->::tendermint::crypto::PublicKey::MergeFrom(from._internal_pub_key());
  }
  if (from._internal_has_error()) {
    _internal_mutable_error()->::tendermint::privval::RemoteSignerError::MergeFrom(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PubKeyResponse::CopyFrom(const PubKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.privval.PubKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubKeyResponse::IsInitialized() const {
  return true;
}

void PubKeyResponse::InternalSwap(PubKeyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PubKeyResponse, error_)
      + sizeof(PubKeyResponse::error_)
      - PROTOBUF_FIELD_OFFSET(PubKeyResponse, pub_key_)>(
          reinterpret_cast<char*>(&pub_key_),
          reinterpret_cast<char*>(&other->pub_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PubKeyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[2]);
}

// ===================================================================

class SignVoteRequest::_Internal {
 public:
  static const ::tendermint::types::Vote& vote(const SignVoteRequest* msg);
};

const ::tendermint::types::Vote&
SignVoteRequest::_Internal::vote(const SignVoteRequest* msg) {
  return *msg->vote_;
}
void SignVoteRequest::clear_vote() {
  if (GetArenaForAllocation() == nullptr && vote_ != nullptr) {
    delete vote_;
  }
  vote_ = nullptr;
}
SignVoteRequest::SignVoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.privval.SignVoteRequest)
}
SignVoteRequest::SignVoteRequest(const SignVoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_vote()) {
    vote_ = new ::tendermint::types::Vote(*from.vote_);
  } else {
    vote_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.privval.SignVoteRequest)
}

inline void SignVoteRequest::SharedCtor() {
chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
vote_ = nullptr;
}

SignVoteRequest::~SignVoteRequest() {
  // @@protoc_insertion_point(destructor:tendermint.privval.SignVoteRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SignVoteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vote_;
}

void SignVoteRequest::ArenaDtor(void* object) {
  SignVoteRequest* _this = reinterpret_cast< SignVoteRequest* >(object);
  (void)_this;
}
void SignVoteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignVoteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignVoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.privval.SignVoteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && vote_ != nullptr) {
    delete vote_;
  }
  vote_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignVoteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.Vote vote = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chain_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.privval.SignVoteRequest.chain_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignVoteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.privval.SignVoteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.Vote vote = 1;
  if (this->_internal_has_vote()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vote(this), target, stream);
  }

  // string chain_id = 2;
  if (!this->_internal_chain_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.privval.SignVoteRequest.chain_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chain_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.privval.SignVoteRequest)
  return target;
}

size_t SignVoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.privval.SignVoteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain_id = 2;
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // .tendermint.types.Vote vote = 1;
  if (this->_internal_has_vote()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vote_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignVoteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SignVoteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignVoteRequest::GetClassData() const { return &_class_data_; }

void SignVoteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SignVoteRequest *>(to)->MergeFrom(
      static_cast<const SignVoteRequest &>(from));
}


void SignVoteRequest::MergeFrom(const SignVoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.privval.SignVoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_has_vote()) {
    _internal_mutable_vote()->::tendermint::types::Vote::MergeFrom(from._internal_vote());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignVoteRequest::CopyFrom(const SignVoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.privval.SignVoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignVoteRequest::IsInitialized() const {
  return true;
}

void SignVoteRequest::InternalSwap(SignVoteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chain_id_, lhs_arena,
      &other->chain_id_, rhs_arena
  );
  swap(vote_, other->vote_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignVoteRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[3]);
}

// ===================================================================

class SignedVoteResponse::_Internal {
 public:
  static const ::tendermint::types::Vote& vote(const SignedVoteResponse* msg);
  static const ::tendermint::privval::RemoteSignerError& error(const SignedVoteResponse* msg);
};

const ::tendermint::types::Vote&
SignedVoteResponse::_Internal::vote(const SignedVoteResponse* msg) {
  return *msg->vote_;
}
const ::tendermint::privval::RemoteSignerError&
SignedVoteResponse::_Internal::error(const SignedVoteResponse* msg) {
  return *msg->error_;
}
void SignedVoteResponse::clear_vote() {
  if (GetArenaForAllocation() == nullptr && vote_ != nullptr) {
    delete vote_;
  }
  vote_ = nullptr;
}
SignedVoteResponse::SignedVoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.privval.SignedVoteResponse)
}
SignedVoteResponse::SignedVoteResponse(const SignedVoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vote()) {
    vote_ = new ::tendermint::types::Vote(*from.vote_);
  } else {
    vote_ = nullptr;
  }
  if (from._internal_has_error()) {
    error_ = new ::tendermint::privval::RemoteSignerError(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.privval.SignedVoteResponse)
}

inline void SignedVoteResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vote_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&vote_)) + sizeof(error_));
}

SignedVoteResponse::~SignedVoteResponse() {
  // @@protoc_insertion_point(destructor:tendermint.privval.SignedVoteResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SignedVoteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete vote_;
  if (this != internal_default_instance()) delete error_;
}

void SignedVoteResponse::ArenaDtor(void* object) {
  SignedVoteResponse* _this = reinterpret_cast< SignedVoteResponse* >(object);
  (void)_this;
}
void SignedVoteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignedVoteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignedVoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.privval.SignedVoteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && vote_ != nullptr) {
    delete vote_;
  }
  vote_ = nullptr;
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignedVoteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.Vote vote = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.privval.RemoteSignerError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignedVoteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.privval.SignedVoteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.Vote vote = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_vote()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vote(this), target, stream);
  }

  // .tendermint.privval.RemoteSignerError error = 2;
  if (this->_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.privval.SignedVoteResponse)
  return target;
}

size_t SignedVoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.privval.SignedVoteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.Vote vote = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_vote()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vote_);
  }

  // .tendermint.privval.RemoteSignerError error = 2;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignedVoteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SignedVoteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignedVoteResponse::GetClassData() const { return &_class_data_; }

void SignedVoteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SignedVoteResponse *>(to)->MergeFrom(
      static_cast<const SignedVoteResponse &>(from));
}


void SignedVoteResponse::MergeFrom(const SignedVoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.privval.SignedVoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vote()) {
    _internal_mutable_vote()->::tendermint::types::Vote::MergeFrom(from._internal_vote());
  }
  if (from._internal_has_error()) {
    _internal_mutable_error()->::tendermint::privval::RemoteSignerError::MergeFrom(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignedVoteResponse::CopyFrom(const SignedVoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.privval.SignedVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedVoteResponse::IsInitialized() const {
  return true;
}

void SignedVoteResponse::InternalSwap(SignedVoteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignedVoteResponse, error_)
      + sizeof(SignedVoteResponse::error_)
      - PROTOBUF_FIELD_OFFSET(SignedVoteResponse, vote_)>(
          reinterpret_cast<char*>(&vote_),
          reinterpret_cast<char*>(&other->vote_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignedVoteResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[4]);
}

// ===================================================================

class SignProposalRequest::_Internal {
 public:
  static const ::tendermint::types::Proposal& proposal(const SignProposalRequest* msg);
};

const ::tendermint::types::Proposal&
SignProposalRequest::_Internal::proposal(const SignProposalRequest* msg) {
  return *msg->proposal_;
}
void SignProposalRequest::clear_proposal() {
  if (GetArenaForAllocation() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
}
SignProposalRequest::SignProposalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.privval.SignProposalRequest)
}
SignProposalRequest::SignProposalRequest(const SignProposalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_proposal()) {
    proposal_ = new ::tendermint::types::Proposal(*from.proposal_);
  } else {
    proposal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.privval.SignProposalRequest)
}

inline void SignProposalRequest::SharedCtor() {
chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
proposal_ = nullptr;
}

SignProposalRequest::~SignProposalRequest() {
  // @@protoc_insertion_point(destructor:tendermint.privval.SignProposalRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SignProposalRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete proposal_;
}

void SignProposalRequest::ArenaDtor(void* object) {
  SignProposalRequest* _this = reinterpret_cast< SignProposalRequest* >(object);
  (void)_this;
}
void SignProposalRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignProposalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignProposalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.privval.SignProposalRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignProposalRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.Proposal proposal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chain_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.privval.SignProposalRequest.chain_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignProposalRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.privval.SignProposalRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.Proposal proposal = 1;
  if (this->_internal_has_proposal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::proposal(this), target, stream);
  }

  // string chain_id = 2;
  if (!this->_internal_chain_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.privval.SignProposalRequest.chain_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chain_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.privval.SignProposalRequest)
  return target;
}

size_t SignProposalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.privval.SignProposalRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain_id = 2;
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // .tendermint.types.Proposal proposal = 1;
  if (this->_internal_has_proposal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proposal_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignProposalRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SignProposalRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignProposalRequest::GetClassData() const { return &_class_data_; }

void SignProposalRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SignProposalRequest *>(to)->MergeFrom(
      static_cast<const SignProposalRequest &>(from));
}


void SignProposalRequest::MergeFrom(const SignProposalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.privval.SignProposalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_has_proposal()) {
    _internal_mutable_proposal()->::tendermint::types::Proposal::MergeFrom(from._internal_proposal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignProposalRequest::CopyFrom(const SignProposalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.privval.SignProposalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignProposalRequest::IsInitialized() const {
  return true;
}

void SignProposalRequest::InternalSwap(SignProposalRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chain_id_, lhs_arena,
      &other->chain_id_, rhs_arena
  );
  swap(proposal_, other->proposal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignProposalRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[5]);
}

// ===================================================================

class SignedProposalResponse::_Internal {
 public:
  static const ::tendermint::types::Proposal& proposal(const SignedProposalResponse* msg);
  static const ::tendermint::privval::RemoteSignerError& error(const SignedProposalResponse* msg);
};

const ::tendermint::types::Proposal&
SignedProposalResponse::_Internal::proposal(const SignedProposalResponse* msg) {
  return *msg->proposal_;
}
const ::tendermint::privval::RemoteSignerError&
SignedProposalResponse::_Internal::error(const SignedProposalResponse* msg) {
  return *msg->error_;
}
void SignedProposalResponse::clear_proposal() {
  if (GetArenaForAllocation() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
}
SignedProposalResponse::SignedProposalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.privval.SignedProposalResponse)
}
SignedProposalResponse::SignedProposalResponse(const SignedProposalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_proposal()) {
    proposal_ = new ::tendermint::types::Proposal(*from.proposal_);
  } else {
    proposal_ = nullptr;
  }
  if (from._internal_has_error()) {
    error_ = new ::tendermint::privval::RemoteSignerError(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.privval.SignedProposalResponse)
}

inline void SignedProposalResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&proposal_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&proposal_)) + sizeof(error_));
}

SignedProposalResponse::~SignedProposalResponse() {
  // @@protoc_insertion_point(destructor:tendermint.privval.SignedProposalResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SignedProposalResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete proposal_;
  if (this != internal_default_instance()) delete error_;
}

void SignedProposalResponse::ArenaDtor(void* object) {
  SignedProposalResponse* _this = reinterpret_cast< SignedProposalResponse* >(object);
  (void)_this;
}
void SignedProposalResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignedProposalResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignedProposalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.privval.SignedProposalResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignedProposalResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.Proposal proposal = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.privval.RemoteSignerError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignedProposalResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.privval.SignedProposalResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.Proposal proposal = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_proposal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::proposal(this), target, stream);
  }

  // .tendermint.privval.RemoteSignerError error = 2;
  if (this->_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.privval.SignedProposalResponse)
  return target;
}

size_t SignedProposalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.privval.SignedProposalResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.Proposal proposal = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_proposal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proposal_);
  }

  // .tendermint.privval.RemoteSignerError error = 2;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignedProposalResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SignedProposalResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignedProposalResponse::GetClassData() const { return &_class_data_; }

void SignedProposalResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SignedProposalResponse *>(to)->MergeFrom(
      static_cast<const SignedProposalResponse &>(from));
}


void SignedProposalResponse::MergeFrom(const SignedProposalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.privval.SignedProposalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_proposal()) {
    _internal_mutable_proposal()->::tendermint::types::Proposal::MergeFrom(from._internal_proposal());
  }
  if (from._internal_has_error()) {
    _internal_mutable_error()->::tendermint::privval::RemoteSignerError::MergeFrom(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignedProposalResponse::CopyFrom(const SignedProposalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.privval.SignedProposalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedProposalResponse::IsInitialized() const {
  return true;
}

void SignedProposalResponse::InternalSwap(SignedProposalResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignedProposalResponse, error_)
      + sizeof(SignedProposalResponse::error_)
      - PROTOBUF_FIELD_OFFSET(SignedProposalResponse, proposal_)>(
          reinterpret_cast<char*>(&proposal_),
          reinterpret_cast<char*>(&other->proposal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignedProposalResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[6]);
}

// ===================================================================

class PingRequest::_Internal {
 public:
};

PingRequest::PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tendermint.privval.PingRequest)
}
PingRequest::PingRequest(const PingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.privval.PingRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PingRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[7]);
}

// ===================================================================

class PingResponse::_Internal {
 public:
};

PingResponse::PingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tendermint.privval.PingResponse)
}
PingResponse::PingResponse(const PingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.privval.PingResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PingResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[8]);
}

// ===================================================================

class Message::_Internal {
 public:
  static const ::tendermint::privval::PubKeyRequest& pub_key_request(const Message* msg);
  static const ::tendermint::privval::PubKeyResponse& pub_key_response(const Message* msg);
  static const ::tendermint::privval::SignVoteRequest& sign_vote_request(const Message* msg);
  static const ::tendermint::privval::SignedVoteResponse& signed_vote_response(const Message* msg);
  static const ::tendermint::privval::SignProposalRequest& sign_proposal_request(const Message* msg);
  static const ::tendermint::privval::SignedProposalResponse& signed_proposal_response(const Message* msg);
  static const ::tendermint::privval::PingRequest& ping_request(const Message* msg);
  static const ::tendermint::privval::PingResponse& ping_response(const Message* msg);
};

const ::tendermint::privval::PubKeyRequest&
Message::_Internal::pub_key_request(const Message* msg) {
  return *msg->sum_.pub_key_request_;
}
const ::tendermint::privval::PubKeyResponse&
Message::_Internal::pub_key_response(const Message* msg) {
  return *msg->sum_.pub_key_response_;
}
const ::tendermint::privval::SignVoteRequest&
Message::_Internal::sign_vote_request(const Message* msg) {
  return *msg->sum_.sign_vote_request_;
}
const ::tendermint::privval::SignedVoteResponse&
Message::_Internal::signed_vote_response(const Message* msg) {
  return *msg->sum_.signed_vote_response_;
}
const ::tendermint::privval::SignProposalRequest&
Message::_Internal::sign_proposal_request(const Message* msg) {
  return *msg->sum_.sign_proposal_request_;
}
const ::tendermint::privval::SignedProposalResponse&
Message::_Internal::signed_proposal_response(const Message* msg) {
  return *msg->sum_.signed_proposal_response_;
}
const ::tendermint::privval::PingRequest&
Message::_Internal::ping_request(const Message* msg) {
  return *msg->sum_.ping_request_;
}
const ::tendermint::privval::PingResponse&
Message::_Internal::ping_response(const Message* msg) {
  return *msg->sum_.ping_response_;
}
void Message::set_allocated_pub_key_request(::tendermint::privval::PubKeyRequest* pub_key_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (pub_key_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::privval::PubKeyRequest>::GetOwningArena(pub_key_request);
    if (message_arena != submessage_arena) {
      pub_key_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pub_key_request, submessage_arena);
    }
    set_has_pub_key_request();
    sum_.pub_key_request_ = pub_key_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.privval.Message.pub_key_request)
}
void Message::set_allocated_pub_key_response(::tendermint::privval::PubKeyResponse* pub_key_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (pub_key_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::privval::PubKeyResponse>::GetOwningArena(pub_key_response);
    if (message_arena != submessage_arena) {
      pub_key_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pub_key_response, submessage_arena);
    }
    set_has_pub_key_response();
    sum_.pub_key_response_ = pub_key_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.privval.Message.pub_key_response)
}
void Message::set_allocated_sign_vote_request(::tendermint::privval::SignVoteRequest* sign_vote_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (sign_vote_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::privval::SignVoteRequest>::GetOwningArena(sign_vote_request);
    if (message_arena != submessage_arena) {
      sign_vote_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sign_vote_request, submessage_arena);
    }
    set_has_sign_vote_request();
    sum_.sign_vote_request_ = sign_vote_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.privval.Message.sign_vote_request)
}
void Message::set_allocated_signed_vote_response(::tendermint::privval::SignedVoteResponse* signed_vote_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (signed_vote_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::privval::SignedVoteResponse>::GetOwningArena(signed_vote_response);
    if (message_arena != submessage_arena) {
      signed_vote_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signed_vote_response, submessage_arena);
    }
    set_has_signed_vote_response();
    sum_.signed_vote_response_ = signed_vote_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.privval.Message.signed_vote_response)
}
void Message::set_allocated_sign_proposal_request(::tendermint::privval::SignProposalRequest* sign_proposal_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (sign_proposal_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::privval::SignProposalRequest>::GetOwningArena(sign_proposal_request);
    if (message_arena != submessage_arena) {
      sign_proposal_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sign_proposal_request, submessage_arena);
    }
    set_has_sign_proposal_request();
    sum_.sign_proposal_request_ = sign_proposal_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.privval.Message.sign_proposal_request)
}
void Message::set_allocated_signed_proposal_response(::tendermint::privval::SignedProposalResponse* signed_proposal_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (signed_proposal_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::privval::SignedProposalResponse>::GetOwningArena(signed_proposal_response);
    if (message_arena != submessage_arena) {
      signed_proposal_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signed_proposal_response, submessage_arena);
    }
    set_has_signed_proposal_response();
    sum_.signed_proposal_response_ = signed_proposal_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.privval.Message.signed_proposal_response)
}
void Message::set_allocated_ping_request(::tendermint::privval::PingRequest* ping_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (ping_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::privval::PingRequest>::GetOwningArena(ping_request);
    if (message_arena != submessage_arena) {
      ping_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping_request, submessage_arena);
    }
    set_has_ping_request();
    sum_.ping_request_ = ping_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.privval.Message.ping_request)
}
void Message::set_allocated_ping_response(::tendermint::privval::PingResponse* ping_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (ping_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tendermint::privval::PingResponse>::GetOwningArena(ping_response);
    if (message_arena != submessage_arena) {
      ping_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping_response, submessage_arena);
    }
    set_has_ping_response();
    sum_.ping_response_ = ping_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.privval.Message.ping_response)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.privval.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_sum();
  switch (from.sum_case()) {
    case kPubKeyRequest: {
      _internal_mutable_pub_key_request()->::tendermint::privval::PubKeyRequest::MergeFrom(from._internal_pub_key_request());
      break;
    }
    case kPubKeyResponse: {
      _internal_mutable_pub_key_response()->::tendermint::privval::PubKeyResponse::MergeFrom(from._internal_pub_key_response());
      break;
    }
    case kSignVoteRequest: {
      _internal_mutable_sign_vote_request()->::tendermint::privval::SignVoteRequest::MergeFrom(from._internal_sign_vote_request());
      break;
    }
    case kSignedVoteResponse: {
      _internal_mutable_signed_vote_response()->::tendermint::privval::SignedVoteResponse::MergeFrom(from._internal_signed_vote_response());
      break;
    }
    case kSignProposalRequest: {
      _internal_mutable_sign_proposal_request()->::tendermint::privval::SignProposalRequest::MergeFrom(from._internal_sign_proposal_request());
      break;
    }
    case kSignedProposalResponse: {
      _internal_mutable_signed_proposal_response()->::tendermint::privval::SignedProposalResponse::MergeFrom(from._internal_signed_proposal_response());
      break;
    }
    case kPingRequest: {
      _internal_mutable_ping_request()->::tendermint::privval::PingRequest::MergeFrom(from._internal_ping_request());
      break;
    }
    case kPingResponse: {
      _internal_mutable_ping_response()->::tendermint::privval::PingResponse::MergeFrom(from._internal_ping_response());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.privval.Message)
}

inline void Message::SharedCtor() {
clear_has_sum();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:tendermint.privval.Message)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_sum()) {
    clear_sum();
  }
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:tendermint.privval.Message)
  switch (sum_case()) {
    case kPubKeyRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.pub_key_request_;
      }
      break;
    }
    case kPubKeyResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.pub_key_response_;
      }
      break;
    }
    case kSignVoteRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.sign_vote_request_;
      }
      break;
    }
    case kSignedVoteResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.signed_vote_response_;
      }
      break;
    }
    case kSignProposalRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.sign_proposal_request_;
      }
      break;
    }
    case kSignedProposalResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.signed_proposal_response_;
      }
      break;
    }
    case kPingRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.ping_request_;
      }
      break;
    }
    case kPingResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.ping_response_;
      }
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SUM_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.privval.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.privval.PubKeyRequest pub_key_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub_key_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.privval.PubKeyResponse pub_key_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub_key_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.privval.SignVoteRequest sign_vote_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sign_vote_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.privval.SignedVoteResponse signed_vote_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_signed_vote_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.privval.SignProposalRequest sign_proposal_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sign_proposal_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.privval.SignedProposalResponse signed_proposal_response = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_signed_proposal_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.privval.PingRequest ping_request = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.privval.PingResponse ping_response = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.privval.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.privval.PubKeyRequest pub_key_request = 1;
  if (_internal_has_pub_key_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pub_key_request(this), target, stream);
  }

  // .tendermint.privval.PubKeyResponse pub_key_response = 2;
  if (_internal_has_pub_key_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pub_key_response(this), target, stream);
  }

  // .tendermint.privval.SignVoteRequest sign_vote_request = 3;
  if (_internal_has_sign_vote_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sign_vote_request(this), target, stream);
  }

  // .tendermint.privval.SignedVoteResponse signed_vote_response = 4;
  if (_internal_has_signed_vote_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::signed_vote_response(this), target, stream);
  }

  // .tendermint.privval.SignProposalRequest sign_proposal_request = 5;
  if (_internal_has_sign_proposal_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sign_proposal_request(this), target, stream);
  }

  // .tendermint.privval.SignedProposalResponse signed_proposal_response = 6;
  if (_internal_has_signed_proposal_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::signed_proposal_response(this), target, stream);
  }

  // .tendermint.privval.PingRequest ping_request = 7;
  if (_internal_has_ping_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::ping_request(this), target, stream);
  }

  // .tendermint.privval.PingResponse ping_response = 8;
  if (_internal_has_ping_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::ping_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.privval.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.privval.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sum_case()) {
    // .tendermint.privval.PubKeyRequest pub_key_request = 1;
    case kPubKeyRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.pub_key_request_);
      break;
    }
    // .tendermint.privval.PubKeyResponse pub_key_response = 2;
    case kPubKeyResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.pub_key_response_);
      break;
    }
    // .tendermint.privval.SignVoteRequest sign_vote_request = 3;
    case kSignVoteRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.sign_vote_request_);
      break;
    }
    // .tendermint.privval.SignedVoteResponse signed_vote_response = 4;
    case kSignedVoteResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.signed_vote_response_);
      break;
    }
    // .tendermint.privval.SignProposalRequest sign_proposal_request = 5;
    case kSignProposalRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.sign_proposal_request_);
      break;
    }
    // .tendermint.privval.SignedProposalResponse signed_proposal_response = 6;
    case kSignedProposalResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.signed_proposal_response_);
      break;
    }
    // .tendermint.privval.PingRequest ping_request = 7;
    case kPingRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.ping_request_);
      break;
    }
    // .tendermint.privval.PingResponse ping_response = 8;
    case kPingResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.ping_response_);
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }

void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message *>(to)->MergeFrom(
      static_cast<const Message &>(from));
}


void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.privval.Message)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sum_case()) {
    case kPubKeyRequest: {
      _internal_mutable_pub_key_request()->::tendermint::privval::PubKeyRequest::MergeFrom(from._internal_pub_key_request());
      break;
    }
    case kPubKeyResponse: {
      _internal_mutable_pub_key_response()->::tendermint::privval::PubKeyResponse::MergeFrom(from._internal_pub_key_response());
      break;
    }
    case kSignVoteRequest: {
      _internal_mutable_sign_vote_request()->::tendermint::privval::SignVoteRequest::MergeFrom(from._internal_sign_vote_request());
      break;
    }
    case kSignedVoteResponse: {
      _internal_mutable_signed_vote_response()->::tendermint::privval::SignedVoteResponse::MergeFrom(from._internal_signed_vote_response());
      break;
    }
    case kSignProposalRequest: {
      _internal_mutable_sign_proposal_request()->::tendermint::privval::SignProposalRequest::MergeFrom(from._internal_sign_proposal_request());
      break;
    }
    case kSignedProposalResponse: {
      _internal_mutable_signed_proposal_response()->::tendermint::privval::SignedProposalResponse::MergeFrom(from._internal_signed_proposal_response());
      break;
    }
    case kPingRequest: {
      _internal_mutable_ping_request()->::tendermint::privval::PingRequest::MergeFrom(from._internal_ping_request());
      break;
    }
    case kPingResponse: {
      _internal_mutable_ping_response()->::tendermint::privval::PingResponse::MergeFrom(from._internal_ping_response());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.privval.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(sum_, other->sum_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace privval
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::privval::RemoteSignerError* Arena::CreateMaybeMessage< ::tendermint::privval::RemoteSignerError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::privval::RemoteSignerError >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::privval::PubKeyRequest* Arena::CreateMaybeMessage< ::tendermint::privval::PubKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::privval::PubKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::privval::PubKeyResponse* Arena::CreateMaybeMessage< ::tendermint::privval::PubKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::privval::PubKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::privval::SignVoteRequest* Arena::CreateMaybeMessage< ::tendermint::privval::SignVoteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::privval::SignVoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::privval::SignedVoteResponse* Arena::CreateMaybeMessage< ::tendermint::privval::SignedVoteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::privval::SignedVoteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::privval::SignProposalRequest* Arena::CreateMaybeMessage< ::tendermint::privval::SignProposalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::privval::SignProposalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::privval::SignedProposalResponse* Arena::CreateMaybeMessage< ::tendermint::privval::SignedProposalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::privval::SignedProposalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::privval::PingRequest* Arena::CreateMaybeMessage< ::tendermint::privval::PingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::privval::PingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::privval::PingResponse* Arena::CreateMaybeMessage< ::tendermint::privval::PingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::privval::PingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::privval::Message* Arena::CreateMaybeMessage< ::tendermint::privval::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::privval::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
