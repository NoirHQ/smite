// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/version/types.proto

#include "tendermint/version/types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tendermint {
namespace version {
constexpr App::App(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : software_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , protocol_(uint64_t{0u}){}
struct AppDefaultTypeInternal {
  constexpr AppDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppDefaultTypeInternal() {}
  union {
    App _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppDefaultTypeInternal _App_default_instance_;
constexpr Consensus::Consensus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_(uint64_t{0u})
  , app_(uint64_t{0u}){}
struct ConsensusDefaultTypeInternal {
  constexpr ConsensusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConsensusDefaultTypeInternal() {}
  union {
    Consensus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConsensusDefaultTypeInternal _Consensus_default_instance_;
}  // namespace version
}  // namespace tendermint
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tendermint_2fversion_2ftypes_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tendermint_2fversion_2ftypes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tendermint_2fversion_2ftypes_2eproto = nullptr;

const uint32_t TableStruct_tendermint_2fversion_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::version::App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::version::App, protocol_),
  PROTOBUF_FIELD_OFFSET(::tendermint::version::App, software_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::version::Consensus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::version::Consensus, block_),
  PROTOBUF_FIELD_OFFSET(::tendermint::version::Consensus, app_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tendermint::version::App)},
  { 8, -1, -1, sizeof(::tendermint::version::Consensus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::version::_App_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tendermint::version::_Consensus_default_instance_),
};

const char descriptor_table_protodef_tendermint_2fversion_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036tendermint/version/types.proto\022\022tender"
  "mint.version\032\024gogoproto/gogo.proto\")\n\003Ap"
  "p\022\020\n\010protocol\030\001 \001(\004\022\020\n\010software\030\002 \001(\t\"-\n"
  "\tConsensus\022\r\n\005block\030\001 \001(\004\022\013\n\003app\030\002 \001(\004:\004"
  "\350\240\037\001B;Z9github.com/tendermint/tendermint"
  "/proto/tendermint/versionb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tendermint_2fversion_2ftypes_2eproto_deps[1] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tendermint_2fversion_2ftypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tendermint_2fversion_2ftypes_2eproto = {
  false, false, 233, descriptor_table_protodef_tendermint_2fversion_2ftypes_2eproto, "tendermint/version/types.proto", 
  &descriptor_table_tendermint_2fversion_2ftypes_2eproto_once, descriptor_table_tendermint_2fversion_2ftypes_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_tendermint_2fversion_2ftypes_2eproto::offsets,
  file_level_metadata_tendermint_2fversion_2ftypes_2eproto, file_level_enum_descriptors_tendermint_2fversion_2ftypes_2eproto, file_level_service_descriptors_tendermint_2fversion_2ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tendermint_2fversion_2ftypes_2eproto_getter() {
  return &descriptor_table_tendermint_2fversion_2ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tendermint_2fversion_2ftypes_2eproto(&descriptor_table_tendermint_2fversion_2ftypes_2eproto);
namespace tendermint {
namespace version {

// ===================================================================

class App::_Internal {
 public:
};

App::App(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.version.App)
}
App::App(const App& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  software_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    software_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_software().empty()) {
    software_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_software(), 
      GetArenaForAllocation());
  }
  protocol_ = from.protocol_;
  // @@protoc_insertion_point(copy_constructor:tendermint.version.App)
}

inline void App::SharedCtor() {
software_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  software_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
protocol_ = uint64_t{0u};
}

App::~App() {
  // @@protoc_insertion_point(destructor:tendermint.version.App)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void App::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  software_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void App::ArenaDtor(void* object) {
  App* _this = reinterpret_cast< App* >(object);
  (void)_this;
}
void App::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void App::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void App::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.version.App)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  software_.ClearToEmpty();
  protocol_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* App::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string software = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_software();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tendermint.version.App.software"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* App::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.version.App)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 protocol = 1;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_protocol(), target);
  }

  // string software = 2;
  if (!this->_internal_software().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_software().data(), static_cast<int>(this->_internal_software().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.version.App.software");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_software(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.version.App)
  return target;
}

size_t App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.version.App)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string software = 2;
  if (!this->_internal_software().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_software());
  }

  // uint64 protocol = 1;
  if (this->_internal_protocol() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_protocol());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData App::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    App::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*App::GetClassData() const { return &_class_data_; }

void App::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<App *>(to)->MergeFrom(
      static_cast<const App &>(from));
}


void App::MergeFrom(const App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.version.App)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_software().empty()) {
    _internal_set_software(from._internal_software());
  }
  if (from._internal_protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void App::CopyFrom(const App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.version.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool App::IsInitialized() const {
  return true;
}

void App::InternalSwap(App* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &software_, lhs_arena,
      &other->software_, rhs_arena
  );
  swap(protocol_, other->protocol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata App::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fversion_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fversion_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fversion_2ftypes_2eproto[0]);
}

// ===================================================================

class Consensus::_Internal {
 public:
};

Consensus::Consensus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tendermint.version.Consensus)
}
Consensus::Consensus(const Consensus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&block_, &from.block_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_) -
    reinterpret_cast<char*>(&block_)) + sizeof(app_));
  // @@protoc_insertion_point(copy_constructor:tendermint.version.Consensus)
}

inline void Consensus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_) -
    reinterpret_cast<char*>(&block_)) + sizeof(app_));
}

Consensus::~Consensus() {
  // @@protoc_insertion_point(destructor:tendermint.version.Consensus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Consensus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Consensus::ArenaDtor(void* object) {
  Consensus* _this = reinterpret_cast< Consensus* >(object);
  (void)_this;
}
void Consensus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Consensus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Consensus::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.version.Consensus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_) -
      reinterpret_cast<char*>(&block_)) + sizeof(app_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Consensus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 app = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          app_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Consensus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.version.Consensus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block = 1;
  if (this->_internal_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block(), target);
  }

  // uint64 app = 2;
  if (this->_internal_app() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_app(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.version.Consensus)
  return target;
}

size_t Consensus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.version.Consensus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 block = 1;
  if (this->_internal_block() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_block());
  }

  // uint64 app = 2;
  if (this->_internal_app() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_app());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Consensus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Consensus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Consensus::GetClassData() const { return &_class_data_; }

void Consensus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Consensus *>(to)->MergeFrom(
      static_cast<const Consensus &>(from));
}


void Consensus::MergeFrom(const Consensus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tendermint.version.Consensus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_block() != 0) {
    _internal_set_block(from._internal_block());
  }
  if (from._internal_app() != 0) {
    _internal_set_app(from._internal_app());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Consensus::CopyFrom(const Consensus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.version.Consensus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Consensus::IsInitialized() const {
  return true;
}

void Consensus::InternalSwap(Consensus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Consensus, app_)
      + sizeof(Consensus::app_)
      - PROTOBUF_FIELD_OFFSET(Consensus, block_)>(
          reinterpret_cast<char*>(&block_),
          reinterpret_cast<char*>(&other->block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Consensus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tendermint_2fversion_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fversion_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fversion_2ftypes_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace version
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::version::App* Arena::CreateMaybeMessage< ::tendermint::version::App >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::version::App >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::version::Consensus* Arena::CreateMaybeMessage< ::tendermint::version::Consensus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::version::Consensus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
