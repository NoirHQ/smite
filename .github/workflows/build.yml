name: Build
on:
  pull_request:
  push:
    branches:
      - main
      - release
      - release/**

jobs:
  linux_build:
    name: Linux
    runs-on: ubuntu-latest
    env:
      CC: /usr/bin/gcc-10
      CXX: /usr/bin/g++-10
    steps:
      # setup build dependencies
      # boost
      - uses: actions/cache@v2
        id: cache-boost
        with:
          path: /opt/boost
          key: ${{ runner.os }}-boost-1.77
      - if: steps.cache-boost.outputs.cache-hit != 'true'
        uses: MarkusJx/install-boost@v2.0.0
        with:
          boost_version: 1.77.0
          platform_version: 20.04
          boost_install_dir: /opt
      # gflags (for rocksdb)
      - run: sudo apt install -y libgflags-dev
      # go toolchain
      - uses: actions/setup-go@v2
        with:
          go-version: "1.17"
      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
      - uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      # checkout
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      # rocksdb
      - id: rocksdb-cache
        run: echo "::set-output name=version::$(git submodule status | awk '/rocksdb/{ print $1 }')"
      - uses: actions/cache@v2
        with:
          path: ./build/libs/rocksdb
          key: ${{ runner.os }}-rocksdb-${{ steps.rocksdb-cache.outputs.version }}
      # build
      - run: cmake -E make_directory build
      - run: BOOST_ROOT=/opt/boost cmake .. && make -j2
        working-directory: ./build

  darwin_build:
    name: MacOS
    runs-on: macos-latest
    steps:
      # setup build dependencies
      - run: brew install boost gflags rocksdb
      # restore go package cache
      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
      - uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      # checkout
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      # build
      - run: cmake -E make_directory build
      - run: cmake .. && make -j2
        working-directory: ./build
